
TempuratureSensorReading_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007284  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08007428  08007428  00017428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007838  08007838  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007840  08007840  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001e8  08007a2c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08007a2c  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4f8  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b62  00000000  00000000  0002b70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  0002d270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0002de50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001626e  00000000  00000000  0002e958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000876b  00000000  00000000  00044bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c7a3  00000000  00000000  0004d331  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9ad4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dac  00000000  00000000  000d9b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800740c 	.word	0x0800740c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800740c 	.word	0x0800740c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_frsub>:
 8000bb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bbc:	e002      	b.n	8000bc4 <__addsf3>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_fsub>:
 8000bc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bc4 <__addsf3>:
 8000bc4:	0042      	lsls	r2, r0, #1
 8000bc6:	bf1f      	itttt	ne
 8000bc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bcc:	ea92 0f03 	teqne	r2, r3
 8000bd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd8:	d06a      	beq.n	8000cb0 <__addsf3+0xec>
 8000bda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000be2:	bfc1      	itttt	gt
 8000be4:	18d2      	addgt	r2, r2, r3
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	4048      	eorgt	r0, r1
 8000bea:	4041      	eorgt	r1, r0
 8000bec:	bfb8      	it	lt
 8000bee:	425b      	neglt	r3, r3
 8000bf0:	2b19      	cmp	r3, #25
 8000bf2:	bf88      	it	hi
 8000bf4:	4770      	bxhi	lr
 8000bf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4249      	negne	r1, r1
 8000c16:	ea92 0f03 	teq	r2, r3
 8000c1a:	d03f      	beq.n	8000c9c <__addsf3+0xd8>
 8000c1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c20:	fa41 fc03 	asr.w	ip, r1, r3
 8000c24:	eb10 000c 	adds.w	r0, r0, ip
 8000c28:	f1c3 0320 	rsb	r3, r3, #32
 8000c2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__addsf3+0x78>
 8000c36:	4249      	negs	r1, r1
 8000c38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c40:	d313      	bcc.n	8000c6a <__addsf3+0xa6>
 8000c42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c46:	d306      	bcc.n	8000c56 <__addsf3+0x92>
 8000c48:	0840      	lsrs	r0, r0, #1
 8000c4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4e:	f102 0201 	add.w	r2, r2, #1
 8000c52:	2afe      	cmp	r2, #254	; 0xfe
 8000c54:	d251      	bcs.n	8000cfa <__addsf3+0x136>
 8000c56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5e:	bf08      	it	eq
 8000c60:	f020 0001 	biceq.w	r0, r0, #1
 8000c64:	ea40 0003 	orr.w	r0, r0, r3
 8000c68:	4770      	bx	lr
 8000c6a:	0049      	lsls	r1, r1, #1
 8000c6c:	eb40 0000 	adc.w	r0, r0, r0
 8000c70:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c74:	f1a2 0201 	sub.w	r2, r2, #1
 8000c78:	d1ed      	bne.n	8000c56 <__addsf3+0x92>
 8000c7a:	fab0 fc80 	clz	ip, r0
 8000c7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c82:	ebb2 020c 	subs.w	r2, r2, ip
 8000c86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c8a:	bfaa      	itet	ge
 8000c8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c90:	4252      	neglt	r2, r2
 8000c92:	4318      	orrge	r0, r3
 8000c94:	bfbc      	itt	lt
 8000c96:	40d0      	lsrlt	r0, r2
 8000c98:	4318      	orrlt	r0, r3
 8000c9a:	4770      	bx	lr
 8000c9c:	f092 0f00 	teq	r2, #0
 8000ca0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ca4:	bf06      	itte	eq
 8000ca6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000caa:	3201      	addeq	r2, #1
 8000cac:	3b01      	subne	r3, #1
 8000cae:	e7b5      	b.n	8000c1c <__addsf3+0x58>
 8000cb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb8:	bf18      	it	ne
 8000cba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cbe:	d021      	beq.n	8000d04 <__addsf3+0x140>
 8000cc0:	ea92 0f03 	teq	r2, r3
 8000cc4:	d004      	beq.n	8000cd0 <__addsf3+0x10c>
 8000cc6:	f092 0f00 	teq	r2, #0
 8000cca:	bf08      	it	eq
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	4770      	bx	lr
 8000cd0:	ea90 0f01 	teq	r0, r1
 8000cd4:	bf1c      	itt	ne
 8000cd6:	2000      	movne	r0, #0
 8000cd8:	4770      	bxne	lr
 8000cda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cde:	d104      	bne.n	8000cea <__addsf3+0x126>
 8000ce0:	0040      	lsls	r0, r0, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cee:	bf3c      	itt	cc
 8000cf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bxcc	lr
 8000cf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d02:	4770      	bx	lr
 8000d04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d08:	bf16      	itet	ne
 8000d0a:	4608      	movne	r0, r1
 8000d0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d10:	4601      	movne	r1, r0
 8000d12:	0242      	lsls	r2, r0, #9
 8000d14:	bf06      	itte	eq
 8000d16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d1a:	ea90 0f01 	teqeq	r0, r1
 8000d1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_ui2f>:
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e004      	b.n	8000d34 <__aeabi_i2f+0x8>
 8000d2a:	bf00      	nop

08000d2c <__aeabi_i2f>:
 8000d2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d30:	bf48      	it	mi
 8000d32:	4240      	negmi	r0, r0
 8000d34:	ea5f 0c00 	movs.w	ip, r0
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d40:	4601      	mov	r1, r0
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	e01c      	b.n	8000d82 <__aeabi_l2f+0x2a>

08000d48 <__aeabi_ul2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e00a      	b.n	8000d6c <__aeabi_l2f+0x14>
 8000d56:	bf00      	nop

08000d58 <__aeabi_l2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__aeabi_l2f+0x14>
 8000d66:	4240      	negs	r0, r0
 8000d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6c:	ea5f 0c01 	movs.w	ip, r1
 8000d70:	bf02      	ittt	eq
 8000d72:	4684      	moveq	ip, r0
 8000d74:	4601      	moveq	r1, r0
 8000d76:	2000      	moveq	r0, #0
 8000d78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d7c:	bf08      	it	eq
 8000d7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d86:	fabc f28c 	clz	r2, ip
 8000d8a:	3a08      	subs	r2, #8
 8000d8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d90:	db10      	blt.n	8000db4 <__aeabi_l2f+0x5c>
 8000d92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d96:	4463      	add	r3, ip
 8000d98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000da4:	fa20 f202 	lsr.w	r2, r0, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f102 0220 	add.w	r2, r2, #32
 8000db8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_uldivmod>:
 8000dd4:	b953      	cbnz	r3, 8000dec <__aeabi_uldivmod+0x18>
 8000dd6:	b94a      	cbnz	r2, 8000dec <__aeabi_uldivmod+0x18>
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	bf08      	it	eq
 8000ddc:	2800      	cmpeq	r0, #0
 8000dde:	bf1c      	itt	ne
 8000de0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000de4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000de8:	f000 b972 	b.w	80010d0 <__aeabi_idiv0>
 8000dec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000df0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df4:	f000 f806 	bl	8000e04 <__udivmoddi4>
 8000df8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e00:	b004      	add	sp, #16
 8000e02:	4770      	bx	lr

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9e08      	ldr	r6, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4688      	mov	r8, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14b      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	4615      	mov	r5, r2
 8000e16:	d967      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0720 	rsb	r7, r2, #32
 8000e22:	fa01 f302 	lsl.w	r3, r1, r2
 8000e26:	fa20 f707 	lsr.w	r7, r0, r7
 8000e2a:	4095      	lsls	r5, r2
 8000e2c:	ea47 0803 	orr.w	r8, r7, r3
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbb8 f7fe 	udiv	r7, r8, lr
 8000e3c:	fa1f fc85 	uxth.w	ip, r5
 8000e40:	fb0e 8817 	mls	r8, lr, r7, r8
 8000e44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e48:	fb07 f10c 	mul.w	r1, r7, ip
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18eb      	adds	r3, r5, r3
 8000e52:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000e56:	f080 811b 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8118 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e60:	3f02      	subs	r7, #2
 8000e62:	442b      	add	r3, r5
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e78:	45a4      	cmp	ip, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	192c      	adds	r4, r5, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e82:	f080 8107 	bcs.w	8001094 <__udivmoddi4+0x290>
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	f240 8104 	bls.w	8001094 <__udivmoddi4+0x290>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	442c      	add	r4, r5
 8000e90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e94:	eba4 040c 	sub.w	r4, r4, ip
 8000e98:	2700      	movs	r7, #0
 8000e9a:	b11e      	cbz	r6, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ea4:	4639      	mov	r1, r7
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d909      	bls.n	8000ec2 <__udivmoddi4+0xbe>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	f000 80eb 	beq.w	800108a <__udivmoddi4+0x286>
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e9c6 0100 	strd	r0, r1, [r6]
 8000eba:	4638      	mov	r0, r7
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	fab3 f783 	clz	r7, r3
 8000ec6:	2f00      	cmp	r7, #0
 8000ec8:	d147      	bne.n	8000f5a <__udivmoddi4+0x156>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d302      	bcc.n	8000ed4 <__udivmoddi4+0xd0>
 8000ece:	4282      	cmp	r2, r0
 8000ed0:	f200 80fa 	bhi.w	80010c8 <__udivmoddi4+0x2c4>
 8000ed4:	1a84      	subs	r4, r0, r2
 8000ed6:	eb61 0303 	sbc.w	r3, r1, r3
 8000eda:	2001      	movs	r0, #1
 8000edc:	4698      	mov	r8, r3
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d0e0      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000ee2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ee6:	e7dd      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000ee8:	b902      	cbnz	r2, 8000eec <__udivmoddi4+0xe8>
 8000eea:	deff      	udf	#255	; 0xff
 8000eec:	fab2 f282 	clz	r2, r2
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	f040 808f 	bne.w	8001014 <__udivmoddi4+0x210>
 8000ef6:	1b49      	subs	r1, r1, r5
 8000ef8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efc:	fa1f f885 	uxth.w	r8, r5
 8000f00:	2701      	movs	r7, #1
 8000f02:	fbb1 fcfe 	udiv	ip, r1, lr
 8000f06:	0c23      	lsrs	r3, r4, #16
 8000f08:	fb0e 111c 	mls	r1, lr, ip, r1
 8000f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f10:	fb08 f10c 	mul.w	r1, r8, ip
 8000f14:	4299      	cmp	r1, r3
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x124>
 8000f18:	18eb      	adds	r3, r5, r3
 8000f1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x122>
 8000f20:	4299      	cmp	r1, r3
 8000f22:	f200 80cd 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f26:	4684      	mov	ip, r0
 8000f28:	1a59      	subs	r1, r3, r1
 8000f2a:	b2a3      	uxth	r3, r4
 8000f2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f30:	fb0e 1410 	mls	r4, lr, r0, r1
 8000f34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000f38:	fb08 f800 	mul.w	r8, r8, r0
 8000f3c:	45a0      	cmp	r8, r4
 8000f3e:	d907      	bls.n	8000f50 <__udivmoddi4+0x14c>
 8000f40:	192c      	adds	r4, r5, r4
 8000f42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f46:	d202      	bcs.n	8000f4e <__udivmoddi4+0x14a>
 8000f48:	45a0      	cmp	r8, r4
 8000f4a:	f200 80b6 	bhi.w	80010ba <__udivmoddi4+0x2b6>
 8000f4e:	4618      	mov	r0, r3
 8000f50:	eba4 0408 	sub.w	r4, r4, r8
 8000f54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f58:	e79f      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f5a:	f1c7 0c20 	rsb	ip, r7, #32
 8000f5e:	40bb      	lsls	r3, r7
 8000f60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000f64:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f68:	fa01 f407 	lsl.w	r4, r1, r7
 8000f6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f70:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f78:	4325      	orrs	r5, r4
 8000f7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f7e:	0c2c      	lsrs	r4, r5, #16
 8000f80:	fb08 3319 	mls	r3, r8, r9, r3
 8000f84:	fa1f fa8e 	uxth.w	sl, lr
 8000f88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f8c:	fb09 f40a 	mul.w	r4, r9, sl
 8000f90:	429c      	cmp	r4, r3
 8000f92:	fa02 f207 	lsl.w	r2, r2, r7
 8000f96:	fa00 f107 	lsl.w	r1, r0, r7
 8000f9a:	d90b      	bls.n	8000fb4 <__udivmoddi4+0x1b0>
 8000f9c:	eb1e 0303 	adds.w	r3, lr, r3
 8000fa0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fa4:	f080 8087 	bcs.w	80010b6 <__udivmoddi4+0x2b2>
 8000fa8:	429c      	cmp	r4, r3
 8000faa:	f240 8084 	bls.w	80010b6 <__udivmoddi4+0x2b2>
 8000fae:	f1a9 0902 	sub.w	r9, r9, #2
 8000fb2:	4473      	add	r3, lr
 8000fb4:	1b1b      	subs	r3, r3, r4
 8000fb6:	b2ad      	uxth	r5, r5
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000fc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000fc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000fc8:	45a2      	cmp	sl, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x1da>
 8000fcc:	eb1e 0404 	adds.w	r4, lr, r4
 8000fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000fd4:	d26b      	bcs.n	80010ae <__udivmoddi4+0x2aa>
 8000fd6:	45a2      	cmp	sl, r4
 8000fd8:	d969      	bls.n	80010ae <__udivmoddi4+0x2aa>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	4474      	add	r4, lr
 8000fde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fe2:	fba0 8902 	umull	r8, r9, r0, r2
 8000fe6:	eba4 040a 	sub.w	r4, r4, sl
 8000fea:	454c      	cmp	r4, r9
 8000fec:	46c2      	mov	sl, r8
 8000fee:	464b      	mov	r3, r9
 8000ff0:	d354      	bcc.n	800109c <__udivmoddi4+0x298>
 8000ff2:	d051      	beq.n	8001098 <__udivmoddi4+0x294>
 8000ff4:	2e00      	cmp	r6, #0
 8000ff6:	d069      	beq.n	80010cc <__udivmoddi4+0x2c8>
 8000ff8:	ebb1 050a 	subs.w	r5, r1, sl
 8000ffc:	eb64 0403 	sbc.w	r4, r4, r3
 8001000:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001004:	40fd      	lsrs	r5, r7
 8001006:	40fc      	lsrs	r4, r7
 8001008:	ea4c 0505 	orr.w	r5, ip, r5
 800100c:	e9c6 5400 	strd	r5, r4, [r6]
 8001010:	2700      	movs	r7, #0
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8001014:	f1c2 0320 	rsb	r3, r2, #32
 8001018:	fa20 f703 	lsr.w	r7, r0, r3
 800101c:	4095      	lsls	r5, r2
 800101e:	fa01 f002 	lsl.w	r0, r1, r2
 8001022:	fa21 f303 	lsr.w	r3, r1, r3
 8001026:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800102a:	4338      	orrs	r0, r7
 800102c:	0c01      	lsrs	r1, r0, #16
 800102e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001032:	fa1f f885 	uxth.w	r8, r5
 8001036:	fb0e 3317 	mls	r3, lr, r7, r3
 800103a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800103e:	fb07 f308 	mul.w	r3, r7, r8
 8001042:	428b      	cmp	r3, r1
 8001044:	fa04 f402 	lsl.w	r4, r4, r2
 8001048:	d907      	bls.n	800105a <__udivmoddi4+0x256>
 800104a:	1869      	adds	r1, r5, r1
 800104c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8001050:	d22f      	bcs.n	80010b2 <__udivmoddi4+0x2ae>
 8001052:	428b      	cmp	r3, r1
 8001054:	d92d      	bls.n	80010b2 <__udivmoddi4+0x2ae>
 8001056:	3f02      	subs	r7, #2
 8001058:	4429      	add	r1, r5
 800105a:	1acb      	subs	r3, r1, r3
 800105c:	b281      	uxth	r1, r0
 800105e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001062:	fb0e 3310 	mls	r3, lr, r0, r3
 8001066:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800106a:	fb00 f308 	mul.w	r3, r0, r8
 800106e:	428b      	cmp	r3, r1
 8001070:	d907      	bls.n	8001082 <__udivmoddi4+0x27e>
 8001072:	1869      	adds	r1, r5, r1
 8001074:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001078:	d217      	bcs.n	80010aa <__udivmoddi4+0x2a6>
 800107a:	428b      	cmp	r3, r1
 800107c:	d915      	bls.n	80010aa <__udivmoddi4+0x2a6>
 800107e:	3802      	subs	r0, #2
 8001080:	4429      	add	r1, r5
 8001082:	1ac9      	subs	r1, r1, r3
 8001084:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001088:	e73b      	b.n	8000f02 <__udivmoddi4+0xfe>
 800108a:	4637      	mov	r7, r6
 800108c:	4630      	mov	r0, r6
 800108e:	e709      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8001090:	4607      	mov	r7, r0
 8001092:	e6e7      	b.n	8000e64 <__udivmoddi4+0x60>
 8001094:	4618      	mov	r0, r3
 8001096:	e6fb      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001098:	4541      	cmp	r1, r8
 800109a:	d2ab      	bcs.n	8000ff4 <__udivmoddi4+0x1f0>
 800109c:	ebb8 0a02 	subs.w	sl, r8, r2
 80010a0:	eb69 020e 	sbc.w	r2, r9, lr
 80010a4:	3801      	subs	r0, #1
 80010a6:	4613      	mov	r3, r2
 80010a8:	e7a4      	b.n	8000ff4 <__udivmoddi4+0x1f0>
 80010aa:	4660      	mov	r0, ip
 80010ac:	e7e9      	b.n	8001082 <__udivmoddi4+0x27e>
 80010ae:	4618      	mov	r0, r3
 80010b0:	e795      	b.n	8000fde <__udivmoddi4+0x1da>
 80010b2:	4667      	mov	r7, ip
 80010b4:	e7d1      	b.n	800105a <__udivmoddi4+0x256>
 80010b6:	4681      	mov	r9, r0
 80010b8:	e77c      	b.n	8000fb4 <__udivmoddi4+0x1b0>
 80010ba:	3802      	subs	r0, #2
 80010bc:	442c      	add	r4, r5
 80010be:	e747      	b.n	8000f50 <__udivmoddi4+0x14c>
 80010c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010c4:	442b      	add	r3, r5
 80010c6:	e72f      	b.n	8000f28 <__udivmoddi4+0x124>
 80010c8:	4638      	mov	r0, r7
 80010ca:	e708      	b.n	8000ede <__udivmoddi4+0xda>
 80010cc:	4637      	mov	r7, r6
 80010ce:	e6e9      	b.n	8000ea4 <__udivmoddi4+0xa0>

080010d0 <__aeabi_idiv0>:
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <setDhtPin>:

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"
void setDhtPin(uint16_t pin) {
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
	DHT_PIN = pin;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <setDhtPin+0x1c>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	8013      	strh	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	20000000 	.word	0x20000000

080010f4 <DWT_Delay_Init>:

uint32_t DWT_Delay_Init(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <DWT_Delay_Init+0x58>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <DWT_Delay_Init+0x58>)
 80010fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001102:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <DWT_Delay_Init+0x58>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <DWT_Delay_Init+0x58>)
 800110a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800110e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <DWT_Delay_Init+0x5c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <DWT_Delay_Init+0x5c>)
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <DWT_Delay_Init+0x5c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <DWT_Delay_Init+0x5c>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <DWT_Delay_Init+0x5c>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800112e:	bf00      	nop
     __ASM volatile ("NOP");
 8001130:	bf00      	nop
  __ASM volatile ("NOP");
 8001132:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <DWT_Delay_Init+0x5c>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001140:	2301      	movs	r3, #1
  }
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000edf0 	.word	0xe000edf0
 8001150:	e0001000 	.word	0xe0001000

08001154 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <delay+0x3c>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001162:	f001 ffcd 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8001166:	4602      	mov	r2, r0
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <delay+0x40>)
 800116a:	fba3 2302 	umull	r2, r3, r3, r2
 800116e:	0c9b      	lsrs	r3, r3, #18
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001178:	bf00      	nop
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <delay+0x3c>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad2      	subs	r2, r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3f8      	bcc.n	800117a <delay+0x26>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	e0001000 	.word	0xe0001000
 8001194:	431bde83 	.word	0x431bde83

08001198 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 f9b8 	bl	800253c <HAL_GPIO_Init>
}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f001 f99a 	bl	800253c <HAL_GPIO_Init>
}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <DHT_Start>:


void DHT_Start (void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001214:	f7ff ff6e 	bl	80010f4 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <DHT_Start+0x50>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4811      	ldr	r0, [pc, #68]	; (8001264 <DHT_Start+0x54>)
 8001220:	f7ff ffba 	bl	8001198 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <DHT_Start+0x50>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	4619      	mov	r1, r3
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <DHT_Start+0x54>)
 800122e:	f001 fb1f 	bl	8002870 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001232:	f244 6050 	movw	r0, #18000	; 0x4650
 8001236:	f7ff ff8d 	bl	8001154 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <DHT_Start+0x50>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <DHT_Start+0x54>)
 8001244:	f001 fb14 	bl	8002870 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001248:	2014      	movs	r0, #20
 800124a:	f7ff ff83 	bl	8001154 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <DHT_Start+0x50>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <DHT_Start+0x54>)
 8001256:	f7ff ffbd 	bl	80011d4 <Set_Pin_Input>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000
 8001264:	40020000 	.word	0x40020000

08001268 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001272:	2028      	movs	r0, #40	; 0x28
 8001274:	f7ff ff6e 	bl	8001154 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <DHT_Check_Response+0x64>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <DHT_Check_Response+0x68>)
 8001280:	f001 fade 	bl	8002840 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d110      	bne.n	80012ac <DHT_Check_Response+0x44>
	{
		delay (80);
 800128a:	2050      	movs	r0, #80	; 0x50
 800128c:	f7ff ff62 	bl	8001154 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <DHT_Check_Response+0x64>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	480e      	ldr	r0, [pc, #56]	; (80012d0 <DHT_Check_Response+0x68>)
 8001298:	f001 fad2 	bl	8002840 <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <DHT_Check_Response+0x40>
 80012a2:	2301      	movs	r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	e001      	b.n	80012ac <DHT_Check_Response+0x44>
		else Response = -1;
 80012a8:	23ff      	movs	r3, #255	; 0xff
 80012aa:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80012ac:	bf00      	nop
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <DHT_Check_Response+0x64>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4806      	ldr	r0, [pc, #24]	; (80012d0 <DHT_Check_Response+0x68>)
 80012b6:	f001 fac3 	bl	8002840 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f6      	bne.n	80012ae <DHT_Check_Response+0x46>

	return Response;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000000 	.word	0x20000000
 80012d0:	40020000 	.word	0x40020000

080012d4 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80012da:	2300      	movs	r3, #0
 80012dc:	71bb      	strb	r3, [r7, #6]
 80012de:	e03d      	b.n	800135c <DHT_Read+0x88>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80012e0:	bf00      	nop
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <DHT_Read+0x98>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4821      	ldr	r0, [pc, #132]	; (8001370 <DHT_Read+0x9c>)
 80012ea:	f001 faa9 	bl	8002840 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f6      	beq.n	80012e2 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80012f4:	2028      	movs	r0, #40	; 0x28
 80012f6:	f7ff ff2d 	bl	8001154 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <DHT_Read+0x98>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	481b      	ldr	r0, [pc, #108]	; (8001370 <DHT_Read+0x9c>)
 8001302:	f001 fa9d 	bl	8002840 <HAL_GPIO_ReadPin>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10e      	bne.n	800132a <DHT_Read+0x56>
		{
			i&= ~(1<<(7-j));   // write 0
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2201      	movs	r2, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	b25b      	sxtb	r3, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	b25a      	sxtb	r2, r3
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	4013      	ands	r3, r2
 8001324:	b25b      	sxtb	r3, r3
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	e00b      	b.n	8001342 <DHT_Read+0x6e>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	f1c3 0307 	rsb	r3, r3, #7
 8001330:	2201      	movs	r2, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	b25a      	sxtb	r2, r3
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4313      	orrs	r3, r2
 800133e:	b25b      	sxtb	r3, r3
 8001340:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001342:	bf00      	nop
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <DHT_Read+0x98>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <DHT_Read+0x9c>)
 800134c:	f001 fa78 	bl	8002840 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f6      	bne.n	8001344 <DHT_Read+0x70>
	for (j=0;j<8;j++)
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	3301      	adds	r3, #1
 800135a:	71bb      	strb	r3, [r7, #6]
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d9be      	bls.n	80012e0 <DHT_Read+0xc>
	}
	return i;
 8001362:	79fb      	ldrb	r3, [r7, #7]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	40020000 	.word	0x40020000

08001374 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800137c:	f7ff ff48 	bl	8001210 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001380:	f7ff ff72 	bl	8001268 <DHT_Check_Response>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <DHT_GetData+0xa4>)
 800138a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800138c:	f7ff ffa2 	bl	80012d4 <DHT_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <DHT_GetData+0xa8>)
 8001396:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001398:	f7ff ff9c 	bl	80012d4 <DHT_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <DHT_GetData+0xac>)
 80013a2:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80013a4:	f7ff ff96 	bl	80012d4 <DHT_Read>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <DHT_GetData+0xb0>)
 80013ae:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80013b0:	f7ff ff90 	bl	80012d4 <DHT_Read>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <DHT_GetData+0xb4>)
 80013ba:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80013bc:	f7ff ff8a 	bl	80012d4 <DHT_Read>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <DHT_GetData+0xb8>)
 80013c6:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <DHT_GetData+0xb8>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <DHT_GetData+0xa8>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <DHT_GetData+0xac>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <DHT_GetData+0xb0>)
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a11      	ldr	r2, [pc, #68]	; (8001428 <DHT_GetData+0xb4>)
 80013e2:	7812      	ldrb	r2, [r2, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	4299      	cmp	r1, r3
 80013e8:	d111      	bne.n	800140e <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <DHT_GetData+0xb0>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <DHT_GetData+0xa8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000204 	.word	0x20000204
 800141c:	20000234 	.word	0x20000234
 8001420:	20000236 	.word	0x20000236
 8001424:	20000235 	.word	0x20000235
 8001428:	2000023a 	.word	0x2000023a
 800142c:	20000238 	.word	0x20000238

08001430 <timerIRQcallback>:
char serialOutBuffer[200];

uint8_t nowFanState = FAN_OFF;

uint64_t timerTick = 0;
void timerIRQcallback() {
 8001430:	b490      	push	{r4, r7}
 8001432:	af00      	add	r7, sp, #0
//	uint16_t nowTimer =  __HAL_TIM_GET_COUNTER(&htim1);
//	sprintf(serialOutBuffer,"Timer interupted : nowTIme -> %d" , nowTimer);
//	HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 200 , 100 );
	timerTick++;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <timerIRQcallback+0x20>)
 8001436:	e9d3 1200 	ldrd	r1, r2, [r3]
 800143a:	1c4b      	adds	r3, r1, #1
 800143c:	f142 0400 	adc.w	r4, r2, #0
 8001440:	4a03      	ldr	r2, [pc, #12]	; (8001450 <timerIRQcallback+0x20>)
 8001442:	e9c2 3400 	strd	r3, r4, [r2]

}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc90      	pop	{r4, r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000208 	.word	0x20000208

08001454 <getTickTimer1>:

uint64_t getTickTimer1() {
 8001454:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001458:	af00      	add	r7, sp, #0
	return (timerTick - 1) * 65536 + (uint64_t) __HAL_TIM_GET_COUNTER(&htim1);
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <getTickTimer1+0x44>)
 800145c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	f04f 0400 	mov.w	r4, #0
 8001468:	0414      	lsls	r4, r2, #16
 800146a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800146e:	040b      	lsls	r3, r1, #16
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <getTickTimer1+0x48>)
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001476:	4611      	mov	r1, r2
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	eb13 0b01 	adds.w	fp, r3, r1
 8001480:	eb44 0c02 	adc.w	ip, r4, r2
 8001484:	f5bb 3380 	subs.w	r3, fp, #65536	; 0x10000
 8001488:	f14c 34ff 	adc.w	r4, ip, #4294967295	; 0xffffffff
}
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001496:	4770      	bx	lr
 8001498:	20000208 	.word	0x20000208
 800149c:	20000354 	.word	0x20000354

080014a0 <getTimer1Second>:

uint64_t getTimer1Second() {
 80014a0:	b598      	push	{r3, r4, r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	return getTickTimer1() / 1000;
 80014a4:	f7ff ffd6 	bl	8001454 <getTickTimer1>
 80014a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	f7ff fc90 	bl	8000dd4 <__aeabi_uldivmod>
 80014b4:	4603      	mov	r3, r0
 80014b6:	460c      	mov	r4, r1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	4621      	mov	r1, r4
 80014bc:	bd98      	pop	{r3, r4, r7, pc}
	...

080014c0 <switchToOn>:

uint8_t fanState = FAN_OFF;
uint64_t lastFanOffTimeSecond = 0;
uint64_t lastFanOnTimeSecond = 0;

uint8_t switchToOn() {
 80014c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80014c4:	b08e      	sub	sp, #56	; 0x38
 80014c6:	af00      	add	r7, sp, #0
	double triggerOnProbs = 1;
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	4c82      	ldr	r4, [pc, #520]	; (80016d8 <switchToOn+0x218>)
 80014ce:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	uint64_t timediff = getTimer1Second() - lastFanOffTimeSecond;
 80014d2:	f7ff ffe5 	bl	80014a0 <getTimer1Second>
 80014d6:	460a      	mov	r2, r1
 80014d8:	4601      	mov	r1, r0
 80014da:	4b80      	ldr	r3, [pc, #512]	; (80016dc <switchToOn+0x21c>)
 80014dc:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80014e0:	460b      	mov	r3, r1
 80014e2:	4614      	mov	r4, r2
 80014e4:	ebb3 030b 	subs.w	r3, r3, fp
 80014e8:	eb64 040c 	sbc.w	r4, r4, ip
 80014ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	timediff = timediff > 300 ? 300 : timediff;
 80014f0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80014f4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	42a2      	cmp	r2, r4
 80014fe:	bf08      	it	eq
 8001500:	4299      	cmpeq	r1, r3
 8001502:	d203      	bcs.n	800150c <switchToOn+0x4c>
 8001504:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001508:	f04f 0400 	mov.w	r4, #0
 800150c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	float timeFromLastOff = timediff; // Second Max = 300 ??
 8001510:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001514:	f7ff fc18 	bl	8000d48 <__aeabi_ul2f>
 8001518:	4603      	mov	r3, r0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24

	float insideRHNow = H2;
 800151c:	4b70      	ldr	r3, [pc, #448]	; (80016e0 <switchToOn+0x220>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	623b      	str	r3, [r7, #32]
	float outsideRHNow = H1;
 8001522:	4b70      	ldr	r3, [pc, #448]	; (80016e4 <switchToOn+0x224>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	61fb      	str	r3, [r7, #28]
	float diffNowRH = insideRHNow - outsideRHNow;
 8001528:	ed97 7a08 	vldr	s14, [r7, #32]
 800152c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001534:	edc7 7a06 	vstr	s15, [r7, #24]

	double probDiffNowRh = (double) (1 / (1 + pow(e, - 0.34 * diffNowRH + 1)) );
 8001538:	69b8      	ldr	r0, [r7, #24]
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	a35e      	add	r3, pc, #376	; (adr r3, 80016b8 <switchToOn+0x1f8>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f860 	bl	8000608 <__aeabi_dmul>
 8001548:	4603      	mov	r3, r0
 800154a:	460c      	mov	r4, r1
 800154c:	4618      	mov	r0, r3
 800154e:	4621      	mov	r1, r4
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <switchToOn+0x218>)
 8001556:	f7fe fea1 	bl	800029c <__adddf3>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	ec44 3b17 	vmov	d7, r3, r4
 8001562:	eeb0 1a47 	vmov.f32	s2, s14
 8001566:	eef0 1a67 	vmov.f32	s3, s15
 800156a:	ed9f 0b55 	vldr	d0, [pc, #340]	; 80016c0 <switchToOn+0x200>
 800156e:	f004 fef5 	bl	800635c <pow>
 8001572:	ec51 0b10 	vmov	r0, r1, d0
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <switchToOn+0x218>)
 800157c:	f7fe fe8e 	bl	800029c <__adddf3>
 8001580:	4603      	mov	r3, r0
 8001582:	460c      	mov	r4, r1
 8001584:	461a      	mov	r2, r3
 8001586:	4623      	mov	r3, r4
 8001588:	f04f 0000 	mov.w	r0, #0
 800158c:	4952      	ldr	r1, [pc, #328]	; (80016d8 <switchToOn+0x218>)
 800158e:	f7ff f965 	bl	800085c <__aeabi_ddiv>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double probTimeFromLastOff = (double) (1 / (1 + pow(e, - 0.1 * timeFromLastOff + 1)) );
 800159a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800159c:	f7fe ffdc 	bl	8000558 <__aeabi_f2d>
 80015a0:	a349      	add	r3, pc, #292	; (adr r3, 80016c8 <switchToOn+0x208>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f82f 	bl	8000608 <__aeabi_dmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	4618      	mov	r0, r3
 80015b0:	4621      	mov	r1, r4
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <switchToOn+0x218>)
 80015b8:	f7fe fe70 	bl	800029c <__adddf3>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	ec44 3b17 	vmov	d7, r3, r4
 80015c4:	eeb0 1a47 	vmov.f32	s2, s14
 80015c8:	eef0 1a67 	vmov.f32	s3, s15
 80015cc:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 80016c0 <switchToOn+0x200>
 80015d0:	f004 fec4 	bl	800635c <pow>
 80015d4:	ec51 0b10 	vmov	r0, r1, d0
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <switchToOn+0x218>)
 80015de:	f7fe fe5d 	bl	800029c <__adddf3>
 80015e2:	4603      	mov	r3, r0
 80015e4:	460c      	mov	r4, r1
 80015e6:	461a      	mov	r2, r3
 80015e8:	4623      	mov	r3, r4
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	493a      	ldr	r1, [pc, #232]	; (80016d8 <switchToOn+0x218>)
 80015f0:	f7ff f934 	bl	800085c <__aeabi_ddiv>
 80015f4:	4603      	mov	r3, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double probInsideRh = (double) (1 / (1 + pow(e, - 0.34 * (insideRHNow - 60) + 1)) );
 80015fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001600:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80016e8 <switchToOn+0x228>
 8001604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001608:	ee17 0a90 	vmov	r0, s15
 800160c:	f7fe ffa4 	bl	8000558 <__aeabi_f2d>
 8001610:	a329      	add	r3, pc, #164	; (adr r3, 80016b8 <switchToOn+0x1f8>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fff7 	bl	8000608 <__aeabi_dmul>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	4618      	mov	r0, r3
 8001620:	4621      	mov	r1, r4
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <switchToOn+0x218>)
 8001628:	f7fe fe38 	bl	800029c <__adddf3>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	ec44 3b17 	vmov	d7, r3, r4
 8001634:	eeb0 1a47 	vmov.f32	s2, s14
 8001638:	eef0 1a67 	vmov.f32	s3, s15
 800163c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80016c0 <switchToOn+0x200>
 8001640:	f004 fe8c 	bl	800635c <pow>
 8001644:	ec51 0b10 	vmov	r0, r1, d0
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <switchToOn+0x218>)
 800164e:	f7fe fe25 	bl	800029c <__adddf3>
 8001652:	4603      	mov	r3, r0
 8001654:	460c      	mov	r4, r1
 8001656:	461a      	mov	r2, r3
 8001658:	4623      	mov	r3, r4
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	491e      	ldr	r1, [pc, #120]	; (80016d8 <switchToOn+0x218>)
 8001660:	f7ff f8fc 	bl	800085c <__aeabi_ddiv>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	e9c7 3400 	strd	r3, r4, [r7]

	triggerOnProbs = probDiffNowRh * probTimeFromLastOff * probInsideRh;
 800166c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001670:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001674:	f7fe ffc8 	bl	8000608 <__aeabi_dmul>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	461a      	mov	r2, r3
 800167e:	4623      	mov	r3, r4
 8001680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001684:	f7fe ffc0 	bl	8000608 <__aeabi_dmul>
 8001688:	4603      	mov	r3, r0
 800168a:	460c      	mov	r4, r1
 800168c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	return triggerOnProbs > 0.6;
 8001690:	2301      	movs	r3, #1
 8001692:	461c      	mov	r4, r3
 8001694:	a30e      	add	r3, pc, #56	; (adr r3, 80016d0 <switchToOn+0x210>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800169e:	f7ff fa43 	bl	8000b28 <__aeabi_dcmpgt>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <switchToOn+0x1ec>
 80016a8:	2300      	movs	r3, #0
 80016aa:	461c      	mov	r4, r3
 80016ac:	b2e3      	uxtb	r3, r4
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3738      	adds	r7, #56	; 0x38
 80016b2:	46bd      	mov	sp, r7
 80016b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80016b8:	5c28f5c3 	.word	0x5c28f5c3
 80016bc:	bfd5c28f 	.word	0xbfd5c28f
 80016c0:	8b145703 	.word	0x8b145703
 80016c4:	4005bf0a 	.word	0x4005bf0a
 80016c8:	9999999a 	.word	0x9999999a
 80016cc:	bfb99999 	.word	0xbfb99999
 80016d0:	33333333 	.word	0x33333333
 80016d4:	3fe33333 	.word	0x3fe33333
 80016d8:	3ff00000 	.word	0x3ff00000
 80016dc:	20000218 	.word	0x20000218
 80016e0:	200003d4 	.word	0x200003d4
 80016e4:	200003d8 	.word	0x200003d8
 80016e8:	42700000 	.word	0x42700000
 80016ec:	00000000 	.word	0x00000000

080016f0 <switchToOff>:

uint8_t switchToOff() {
 80016f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80016f4:	b08e      	sub	sp, #56	; 0x38
 80016f6:	af00      	add	r7, sp, #0
	double triggerOffProbs = 1;
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	4c8a      	ldr	r4, [pc, #552]	; (8001928 <switchToOff+0x238>)
 80016fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	uint64_t timediff = getTimer1Second() - lastFanOnTimeSecond;
 8001702:	f7ff fecd 	bl	80014a0 <getTimer1Second>
 8001706:	460a      	mov	r2, r1
 8001708:	4601      	mov	r1, r0
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <switchToOff+0x23c>)
 800170c:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001710:	460b      	mov	r3, r1
 8001712:	4614      	mov	r4, r2
 8001714:	ebb3 030b 	subs.w	r3, r3, fp
 8001718:	eb64 040c 	sbc.w	r4, r4, ip
 800171c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	timediff = timediff > 300 ? 300 : timediff;
 8001720:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001724:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	42a2      	cmp	r2, r4
 800172e:	bf08      	it	eq
 8001730:	4299      	cmpeq	r1, r3
 8001732:	d203      	bcs.n	800173c <switchToOff+0x4c>
 8001734:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	float timeFromLastOn = timediff; // Second Max = 300 ??
 8001740:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001744:	f7ff fb00 	bl	8000d48 <__aeabi_ul2f>
 8001748:	4603      	mov	r3, r0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24

	float insideRHNow = H2;
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <switchToOff+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	623b      	str	r3, [r7, #32]
	float outsideRHNow = H1;
 8001752:	4b78      	ldr	r3, [pc, #480]	; (8001934 <switchToOff+0x244>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61fb      	str	r3, [r7, #28]
	float diffNowRH = insideRHNow - outsideRHNow;
 8001758:	ed97 7a08 	vldr	s14, [r7, #32]
 800175c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001764:	edc7 7a06 	vstr	s15, [r7, #24]

	double probDiffNowRh = (double) (1 / (1 + pow(e, - 0.3 * diffNowRH + 0.3)) );
 8001768:	69b8      	ldr	r0, [r7, #24]
 800176a:	f7fe fef5 	bl	8000558 <__aeabi_f2d>
 800176e:	a364      	add	r3, pc, #400	; (adr r3, 8001900 <switchToOff+0x210>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ff48 	bl	8000608 <__aeabi_dmul>
 8001778:	4603      	mov	r3, r0
 800177a:	460c      	mov	r4, r1
 800177c:	4618      	mov	r0, r3
 800177e:	4621      	mov	r1, r4
 8001780:	a361      	add	r3, pc, #388	; (adr r3, 8001908 <switchToOff+0x218>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe fd89 	bl	800029c <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	ec44 3b17 	vmov	d7, r3, r4
 8001792:	eeb0 1a47 	vmov.f32	s2, s14
 8001796:	eef0 1a67 	vmov.f32	s3, s15
 800179a:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8001910 <switchToOff+0x220>
 800179e:	f004 fddd 	bl	800635c <pow>
 80017a2:	ec51 0b10 	vmov	r0, r1, d0
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <switchToOff+0x238>)
 80017ac:	f7fe fd76 	bl	800029c <__adddf3>
 80017b0:	4603      	mov	r3, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	461a      	mov	r2, r3
 80017b6:	4623      	mov	r3, r4
 80017b8:	f04f 0000 	mov.w	r0, #0
 80017bc:	495a      	ldr	r1, [pc, #360]	; (8001928 <switchToOff+0x238>)
 80017be:	f7ff f84d 	bl	800085c <__aeabi_ddiv>
 80017c2:	4603      	mov	r3, r0
 80017c4:	460c      	mov	r4, r1
 80017c6:	e9c7 3404 	strd	r3, r4, [r7, #16]

	double probTimeFromLastOff = (double) (1 / (1 + pow(e, - 0.2 * timeFromLastOn + 10)) );
 80017ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	a351      	add	r3, pc, #324	; (adr r3, 8001918 <switchToOff+0x228>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe ff17 	bl	8000608 <__aeabi_dmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	4618      	mov	r0, r3
 80017e0:	4621      	mov	r1, r4
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b54      	ldr	r3, [pc, #336]	; (8001938 <switchToOff+0x248>)
 80017e8:	f7fe fd58 	bl	800029c <__adddf3>
 80017ec:	4603      	mov	r3, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	ec44 3b17 	vmov	d7, r3, r4
 80017f4:	eeb0 1a47 	vmov.f32	s2, s14
 80017f8:	eef0 1a67 	vmov.f32	s3, s15
 80017fc:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8001910 <switchToOff+0x220>
 8001800:	f004 fdac 	bl	800635c <pow>
 8001804:	ec51 0b10 	vmov	r0, r1, d0
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b46      	ldr	r3, [pc, #280]	; (8001928 <switchToOff+0x238>)
 800180e:	f7fe fd45 	bl	800029c <__adddf3>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	461a      	mov	r2, r3
 8001818:	4623      	mov	r3, r4
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	4942      	ldr	r1, [pc, #264]	; (8001928 <switchToOff+0x238>)
 8001820:	f7ff f81c 	bl	800085c <__aeabi_ddiv>
 8001824:	4603      	mov	r3, r0
 8001826:	460c      	mov	r4, r1
 8001828:	e9c7 3402 	strd	r3, r4, [r7, #8]
	probTimeFromLastOff = 1 - probTimeFromLastOff;
 800182c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	493c      	ldr	r1, [pc, #240]	; (8001928 <switchToOff+0x238>)
 8001836:	f7fe fd2f 	bl	8000298 <__aeabi_dsub>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	double probInsideRh = (double) (1 / (1 + pow(e, - 0.4 * (insideRHNow - 45) + 3.5)) );
 8001842:	edd7 7a08 	vldr	s15, [r7, #32]
 8001846:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800193c <switchToOff+0x24c>
 800184a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800184e:	ee17 0a90 	vmov	r0, s15
 8001852:	f7fe fe81 	bl	8000558 <__aeabi_f2d>
 8001856:	a332      	add	r3, pc, #200	; (adr r3, 8001920 <switchToOff+0x230>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fed4 	bl	8000608 <__aeabi_dmul>
 8001860:	4603      	mov	r3, r0
 8001862:	460c      	mov	r4, r1
 8001864:	4618      	mov	r0, r3
 8001866:	4621      	mov	r1, r4
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <switchToOff+0x250>)
 800186e:	f7fe fd15 	bl	800029c <__adddf3>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	ec44 3b17 	vmov	d7, r3, r4
 800187a:	eeb0 1a47 	vmov.f32	s2, s14
 800187e:	eef0 1a67 	vmov.f32	s3, s15
 8001882:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001910 <switchToOff+0x220>
 8001886:	f004 fd69 	bl	800635c <pow>
 800188a:	ec51 0b10 	vmov	r0, r1, d0
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <switchToOff+0x238>)
 8001894:	f7fe fd02 	bl	800029c <__adddf3>
 8001898:	4603      	mov	r3, r0
 800189a:	460c      	mov	r4, r1
 800189c:	461a      	mov	r2, r3
 800189e:	4623      	mov	r3, r4
 80018a0:	f04f 0000 	mov.w	r0, #0
 80018a4:	4920      	ldr	r1, [pc, #128]	; (8001928 <switchToOff+0x238>)
 80018a6:	f7fe ffd9 	bl	800085c <__aeabi_ddiv>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	e9c7 3400 	strd	r3, r4, [r7]

	triggerOffProbs = probDiffNowRh * probTimeFromLastOff * probInsideRh;
 80018b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018ba:	f7fe fea5 	bl	8000608 <__aeabi_dmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	460c      	mov	r4, r1
 80018c2:	461a      	mov	r2, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ca:	f7fe fe9d 	bl	8000608 <__aeabi_dmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	return triggerOffProbs < 0.5;
 80018d6:	2301      	movs	r3, #1
 80018d8:	461c      	mov	r4, r3
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <switchToOff+0x254>)
 80018e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80018e4:	f7ff f902 	bl	8000aec <__aeabi_dcmplt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <switchToOff+0x202>
 80018ee:	2300      	movs	r3, #0
 80018f0:	461c      	mov	r4, r3
 80018f2:	b2e3      	uxtb	r3, r4
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3738      	adds	r7, #56	; 0x38
 80018f8:	46bd      	mov	sp, r7
 80018fa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80018fe:	bf00      	nop
 8001900:	33333333 	.word	0x33333333
 8001904:	bfd33333 	.word	0xbfd33333
 8001908:	33333333 	.word	0x33333333
 800190c:	3fd33333 	.word	0x3fd33333
 8001910:	8b145703 	.word	0x8b145703
 8001914:	4005bf0a 	.word	0x4005bf0a
 8001918:	9999999a 	.word	0x9999999a
 800191c:	bfc99999 	.word	0xbfc99999
 8001920:	9999999a 	.word	0x9999999a
 8001924:	bfd99999 	.word	0xbfd99999
 8001928:	3ff00000 	.word	0x3ff00000
 800192c:	20000220 	.word	0x20000220
 8001930:	200003d4 	.word	0x200003d4
 8001934:	200003d8 	.word	0x200003d8
 8001938:	40240000 	.word	0x40240000
 800193c:	42340000 	.word	0x42340000
 8001940:	400c0000 	.word	0x400c0000
 8001944:	3fe00000 	.word	0x3fe00000

08001948 <fanControlLoop>:
void setFan(uint8_t targetFanState) {
	if (targetFanState == nowFanState) return;

}

void fanControlLoop() {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
//	float insideRH = 50;
//	float outsideRH = 60;
//	uint64_t timeInSecond = getTimer1Second();

	switch (fanState) {
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <fanControlLoop+0x24>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <fanControlLoop+0x18>
 8001954:	2b01      	cmp	r3, #1
 8001956:	d000      	beq.n	800195a <fanControlLoop+0x12>
			break;
		case FAN_OFF :
			state_FanOff();
			break;
		default :
			break;
 8001958:	e005      	b.n	8001966 <fanControlLoop+0x1e>
			state_FanOn();
 800195a:	f000 f809 	bl	8001970 <state_FanOn>
			break;
 800195e:	e002      	b.n	8001966 <fanControlLoop+0x1e>
			state_FanOff();
 8001960:	f000 f83a 	bl	80019d8 <state_FanOff>
			break;
 8001964:	bf00      	nop
	}

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000210 	.word	0x20000210

08001970 <state_FanOn>:

void state_FanOn() {
 8001970:	b598      	push	{r3, r4, r7, lr}
 8001972:	af00      	add	r7, sp, #0
	if (switchToOff() > 0) {
 8001974:	f7ff febc 	bl	80016f0 <switchToOff>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00a      	beq.n	8001994 <state_FanOn+0x24>
		lastFanOffTimeSecond = getTimer1Second();
 800197e:	f7ff fd8f 	bl	80014a0 <getTimer1Second>
 8001982:	4603      	mov	r3, r0
 8001984:	460c      	mov	r4, r1
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <state_FanOn+0x50>)
 8001988:	e9c2 3400 	strd	r3, r4, [r2]
		fanState = FAN_OFF;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <state_FanOn+0x54>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
		return;
 8001992:	e013      	b.n	80019bc <state_FanOn+0x4c>
	}

	  sprintf(serialOutBuffer,"FAN ON                                                                                                     \n" );
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <state_FanOn+0x58>)
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <state_FanOn+0x5c>)
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	236d      	movs	r3, #109	; 0x6d
 800199e:	461a      	mov	r2, r3
 80019a0:	f002 fc94 	bl	80042cc <memcpy>
	  HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 200 , 100 );
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	22c8      	movs	r2, #200	; 0xc8
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <state_FanOn+0x58>)
 80019aa:	4809      	ldr	r0, [pc, #36]	; (80019d0 <state_FanOn+0x60>)
 80019ac:	f002 f805 	bl	80039ba <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(FAN_GPIO, FAN_PIN, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b6:	4807      	ldr	r0, [pc, #28]	; (80019d4 <state_FanOn+0x64>)
 80019b8:	f000 ff5a 	bl	8002870 <HAL_GPIO_WritePin>

}
 80019bc:	bd98      	pop	{r3, r4, r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000218 	.word	0x20000218
 80019c4:	20000210 	.word	0x20000210
 80019c8:	20000280 	.word	0x20000280
 80019cc:	08007428 	.word	0x08007428
 80019d0:	20000394 	.word	0x20000394
 80019d4:	40020800 	.word	0x40020800

080019d8 <state_FanOff>:

void state_FanOff() {
 80019d8:	b598      	push	{r3, r4, r7, lr}
 80019da:	af00      	add	r7, sp, #0
	if (switchToOn() > 0) {
 80019dc:	f7ff fd70 	bl	80014c0 <switchToOn>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <state_FanOff+0x24>
		lastFanOnTimeSecond = getTimer1Second();
 80019e6:	f7ff fd5b 	bl	80014a0 <getTimer1Second>
 80019ea:	4603      	mov	r3, r0
 80019ec:	460c      	mov	r4, r1
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <state_FanOff+0x50>)
 80019f0:	e9c2 3400 	strd	r3, r4, [r2]
		fanState = FAN_ON;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <state_FanOff+0x54>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
		return;
 80019fa:	e013      	b.n	8001a24 <state_FanOff+0x4c>
	}
	  sprintf(serialOutBuffer,"FAN OFF                                                                                                      \n" );
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <state_FanOff+0x58>)
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <state_FanOff+0x5c>)
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	236f      	movs	r3, #111	; 0x6f
 8001a06:	461a      	mov	r2, r3
 8001a08:	f002 fc60 	bl	80042cc <memcpy>
	  HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 200 , 100 );
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	22c8      	movs	r2, #200	; 0xc8
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <state_FanOff+0x58>)
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <state_FanOff+0x60>)
 8001a14:	f001 ffd1 	bl	80039ba <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(FAN_GPIO, FAN_PIN, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <state_FanOff+0x64>)
 8001a20:	f000 ff26 	bl	8002870 <HAL_GPIO_WritePin>
}
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000220 	.word	0x20000220
 8001a2c:	20000210 	.word	0x20000210
 8001a30:	20000280 	.word	0x20000280
 8001a34:	08007498 	.word	0x08007498
 8001a38:	20000394 	.word	0x20000394
 8001a3c:	40020800 	.word	0x40020800

08001a40 <tim1Delay>:

void tim1Delay(uint32_t mills) {
 8001a40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	uint64_t startTime = getTickTimer1();
 8001a4a:	f7ff fd03 	bl	8001454 <getTickTimer1>
 8001a4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	//mills *= 1000;
	while (getTickTimer1() - startTime < mills);
 8001a52:	bf00      	nop
 8001a54:	f7ff fcfe 	bl	8001454 <getTickTimer1>
 8001a58:	4683      	mov	fp, r0
 8001a5a:	468c      	mov	ip, r1
 8001a5c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a60:	4659      	mov	r1, fp
 8001a62:	4662      	mov	r2, ip
 8001a64:	1ac9      	subs	r1, r1, r3
 8001a66:	eb62 0204 	sbc.w	r2, r2, r4
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f04f 0400 	mov.w	r4, #0
 8001a70:	42a2      	cmp	r2, r4
 8001a72:	bf08      	it	eq
 8001a74:	4299      	cmpeq	r1, r3
 8001a76:	d3ed      	bcc.n	8001a54 <tim1Delay+0x14>
	return;
 8001a78:	bf00      	nop
}
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
	...

08001a84 <fanSystemHandle>:

void fanSystemHandle() {
 8001a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af06      	add	r7, sp, #24
	  setDhtPin(GPIO_PIN_15);
 8001a8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a90:	f7ff fb20 	bl	80010d4 <setDhtPin>
	  DHT_GetData(&DHT11_Data);
 8001a94:	482d      	ldr	r0, [pc, #180]	; (8001b4c <fanSystemHandle+0xc8>)
 8001a96:	f7ff fc6d 	bl	8001374 <DHT_GetData>
	  T1 = DHT11_Data.Temperature;
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <fanSystemHandle+0xc8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <fanSystemHandle+0xcc>)
 8001aa0:	6013      	str	r3, [r2, #0]
	  H1 = DHT11_Data.Humidity;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <fanSystemHandle+0xc8>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <fanSystemHandle+0xd0>)
 8001aa8:	6013      	str	r3, [r2, #0]
	  //sprintf(serialOutBuffer,"Sensor 1 : Temperature : %.2f C , Humidity : %.2f %% \n",Temperature ,Humidity );
	  //HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 100 , 100 );

	  tim1Delay(100);
 8001aaa:	2064      	movs	r0, #100	; 0x64
 8001aac:	f7ff ffc8 	bl	8001a40 <tim1Delay>
	  setDhtPin(GPIO_PIN_12);
 8001ab0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ab4:	f7ff fb0e 	bl	80010d4 <setDhtPin>
	  DHT_GetData(&DHT11_Data);
 8001ab8:	4824      	ldr	r0, [pc, #144]	; (8001b4c <fanSystemHandle+0xc8>)
 8001aba:	f7ff fc5b 	bl	8001374 <DHT_GetData>
	  T2 = DHT11_Data.Temperature;
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <fanSystemHandle+0xc8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <fanSystemHandle+0xd4>)
 8001ac4:	6013      	str	r3, [r2, #0]
	  H2 = DHT11_Data.Humidity + 4; // Shift up 4 %
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <fanSystemHandle+0xc8>)
 8001ac8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001acc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <fanSystemHandle+0xd8>)
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
	  //sprintf(serialOutBuffer,"Sensor 2 : Temperature : %.2f C , Humidity : %.2f %% \n",Temperature ,Humidity );
	  sprintf(serialOutBuffer,"Sensor 1 : Temperature : %.2f C , Humidity : %.2f %%    Sensor 2 : Temperature : %.2f C , Humidity : %.2f %% \n",T1 ,H1 , T2 , H2 );
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <fanSystemHandle+0xcc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd3a 	bl	8000558 <__aeabi_f2d>
 8001ae4:	4682      	mov	sl, r0
 8001ae6:	468b      	mov	fp, r1
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <fanSystemHandle+0xd0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd33 	bl	8000558 <__aeabi_f2d>
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <fanSystemHandle+0xd4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd2c 	bl	8000558 <__aeabi_f2d>
 8001b00:	4680      	mov	r8, r0
 8001b02:	4689      	mov	r9, r1
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <fanSystemHandle+0xd8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd25 	bl	8000558 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b16:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b1a:	e9cd 4500 	strd	r4, r5, [sp]
 8001b1e:	4652      	mov	r2, sl
 8001b20:	465b      	mov	r3, fp
 8001b22:	490f      	ldr	r1, [pc, #60]	; (8001b60 <fanSystemHandle+0xdc>)
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <fanSystemHandle+0xe0>)
 8001b26:	f003 f841 	bl	8004bac <siprintf>
	  HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 200 , 100 );
 8001b2a:	2364      	movs	r3, #100	; 0x64
 8001b2c:	22c8      	movs	r2, #200	; 0xc8
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <fanSystemHandle+0xe0>)
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <fanSystemHandle+0xe4>)
 8001b32:	f001 ff42 	bl	80039ba <HAL_UART_Transmit>
	  fanControlLoop();
 8001b36:	f7ff ff07 	bl	8001948 <fanControlLoop>
	  tim1Delay(1000);
 8001b3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3e:	f7ff ff7f 	bl	8001a40 <tim1Delay>
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000348 	.word	0x20000348
 8001b50:	20000350 	.word	0x20000350
 8001b54:	200003d8 	.word	0x200003d8
 8001b58:	2000023c 	.word	0x2000023c
 8001b5c:	200003d4 	.word	0x200003d4
 8001b60:	08007508 	.word	0x08007508
 8001b64:	20000280 	.word	0x20000280
 8001b68:	20000394 	.word	0x20000394

08001b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b70:	f000 fb60 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */
  // HAL_GPIO_WritePin(FAN_GPIO, FAN_PIN, GPIO_PIN_SET);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b74:	f000 f814 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b78:	f000 f946 	bl	8001e08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b7c:	f000 f91a 	bl	8001db4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001b80:	f000 f878 	bl	8001c74 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b84:	f000 f8c8 	bl	8001d18 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <main+0x2c>)
 8001b8a:	f001 fb18 	bl	80031be <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b8e:	4803      	ldr	r0, [pc, #12]	; (8001b9c <main+0x30>)
 8001b90:	f001 fb15 	bl	80031be <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <main+0x28>
 8001b96:	bf00      	nop
 8001b98:	20000354 	.word	0x20000354
 8001b9c:	20000240 	.word	0x20000240

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	; 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	2230      	movs	r2, #48	; 0x30
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fb97 	bl	80042e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <SystemClock_Config+0xd0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <SystemClock_Config+0xd0>)
 8001bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <SystemClock_Config+0xd0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c04:	2310      	movs	r3, #16
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c10:	2308      	movs	r3, #8
 8001c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001c14:	2350      	movs	r3, #80	; 0x50
 8001c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fe3d 	bl	80028a4 <HAL_RCC_OscConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c30:	f000 f97c 	bl	8001f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c34:	230f      	movs	r3, #15
 8001c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	2102      	movs	r1, #2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 f896 	bl	8002d84 <HAL_RCC_ClockConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c5e:	f000 f965 	bl	8001f2c <Error_Handler>
  }
}
 8001c62:	bf00      	nop
 8001c64:	3750      	adds	r7, #80	; 0x50
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40007000 	.word	0x40007000

08001c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001c92:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <MX_TIM1_Init+0xa0>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40000 - 1;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001c98:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001c9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001cc0:	f001 fa52 	bl	8003168 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001cca:	f000 f92f 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001cdc:	f001 fb9b 	bl	8003416 <HAL_TIM_ConfigClockSource>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ce6:	f000 f921 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001cf8:	f001 fd90 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001d02:	f000 f913 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000354 	.word	0x20000354
 8001d14:	40010000 	.word	0x40010000

08001d18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <MX_TIM3_Init+0x98>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d5a:	4814      	ldr	r0, [pc, #80]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d5c:	f001 fa04 	bl	8003168 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d66:	f000 f8e1 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0308 	add.w	r3, r7, #8
 8001d74:	4619      	mov	r1, r3
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d78:	f001 fb4d 	bl	8003416 <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d82:	f000 f8d3 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <MX_TIM3_Init+0x94>)
 8001d94:	f001 fd42 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d9e:	f000 f8c5 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000240 	.word	0x20000240
 8001db0:	40000400 	.word	0x40000400

08001db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <MX_USART2_UART_Init+0x50>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dec:	f001 fd98 	bl	8003920 <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001df6:	f000 f899 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000394 	.word	0x20000394
 8001e04:	40004400 	.word	0x40004400

08001e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a3d      	ldr	r2, [pc, #244]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a28      	ldr	r2, [pc, #160]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <MX_GPIO_Init+0x114>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2120      	movs	r1, #32
 8001e92:	4823      	ldr	r0, [pc, #140]	; (8001f20 <MX_GPIO_Init+0x118>)
 8001e94:	f000 fcec 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9e:	4821      	ldr	r0, [pc, #132]	; (8001f24 <MX_GPIO_Init+0x11c>)
 8001ea0:	f000 fce6 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <MX_GPIO_Init+0x120>)
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481a      	ldr	r0, [pc, #104]	; (8001f24 <MX_GPIO_Init+0x11c>)
 8001eba:	f000 fb3f 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4812      	ldr	r0, [pc, #72]	; (8001f20 <MX_GPIO_Init+0x118>)
 8001ed6:	f000 fb31 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ee0:	2311      	movs	r3, #17
 8001ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480c      	ldr	r0, [pc, #48]	; (8001f24 <MX_GPIO_Init+0x11c>)
 8001ef4:	f000 fb22 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4804      	ldr	r0, [pc, #16]	; (8001f20 <MX_GPIO_Init+0x118>)
 8001f0e:	f000 fb15 	bl	800253c <HAL_GPIO_Init>

}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	; 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020800 	.word	0x40020800
 8001f28:	10210000 	.word	0x10210000

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <Error_Handler+0x6>

08001f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f72:	2007      	movs	r0, #7
 8001f74:	f000 faa0 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <HAL_TIM_Base_MspInit+0x90>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d11e      	bne.n	8001fd4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_TIM_Base_MspInit+0x94>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <HAL_TIM_Base_MspInit+0x94>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_TIM_Base_MspInit+0x94>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 1);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2018      	movs	r0, #24
 8001fb8:	f000 fa89 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fbc:	2018      	movs	r0, #24
 8001fbe:	f000 faa2 	bl	8002506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2019      	movs	r0, #25
 8001fc8:	f000 fa81 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fcc:	2019      	movs	r0, #25
 8001fce:	f000 fa9a 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fd2:	e01a      	b.n	800200a <HAL_TIM_Base_MspInit+0x86>
  else if(htim_base->Instance==TIM3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_TIM_Base_MspInit+0x98>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d115      	bne.n	800200a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_TIM_Base_MspInit+0x94>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_TIM_Base_MspInit+0x94>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_TIM_Base_MspInit+0x94>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	201d      	movs	r0, #29
 8002000:	f000 fa65 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002004:	201d      	movs	r0, #29
 8002006:	f000 fa7e 	bl	8002506 <HAL_NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40023800 	.word	0x40023800
 800201c:	40000400 	.word	0x40000400

08002020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_UART_MspInit+0x84>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d12b      	bne.n	800209a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_UART_MspInit+0x88>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_UART_MspInit+0x88>)
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_UART_MspInit+0x88>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_UART_MspInit+0x88>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <HAL_UART_MspInit+0x88>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_UART_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800207a:	230c      	movs	r3, #12
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208a:	2307      	movs	r3, #7
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <HAL_UART_MspInit+0x8c>)
 8002096:	f000 fa51 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40004400 	.word	0x40004400
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <NMI_Handler+0x4>

080020b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <MemManage_Handler+0x4>

080020c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <BusFault_Handler+0x4>

080020c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <UsageFault_Handler+0x4>

080020ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020fc:	f000 f8ec 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800210a:	f001 f87c 	bl	8003206 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000354 	.word	0x20000354

08002118 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800211e:	f001 f872 	bl	8003206 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  timerIRQcallback();
 8002122:	f7ff f985 	bl	8001430 <timerIRQcallback>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000354 	.word	0x20000354

08002130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002134:	4803      	ldr	r0, [pc, #12]	; (8002144 <TIM3_IRQHandler+0x14>)
 8002136:	f001 f866 	bl	8003206 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  fanSystemHandle();
 800213a:	f7ff fca3 	bl	8001a84 <fanSystemHandle>
  /* USER CODE END TIM3_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000240 	.word	0x20000240

08002148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <_sbrk+0x5c>)
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <_sbrk+0x60>)
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <_sbrk+0x64>)
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <_sbrk+0x68>)
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	429a      	cmp	r2, r3
 8002176:	d207      	bcs.n	8002188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002178:	f002 f87e 	bl	8004278 <__errno>
 800217c:	4602      	mov	r2, r0
 800217e:	230c      	movs	r3, #12
 8002180:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002186:	e009      	b.n	800219c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <_sbrk+0x64>)
 8002198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20020000 	.word	0x20020000
 80021a8:	00000400 	.word	0x00000400
 80021ac:	20000228 	.word	0x20000228
 80021b0:	200003e8 	.word	0x200003e8

080021b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <SystemInit+0x28>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	4a07      	ldr	r2, [pc, #28]	; (80021dc <SystemInit+0x28>)
 80021c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SystemInit+0x28>)
 80021ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ce:	609a      	str	r2, [r3, #8]
#endif
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002218 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021e6:	e003      	b.n	80021f0 <LoopCopyDataInit>

080021e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021ee:	3104      	adds	r1, #4

080021f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021f8:	d3f6      	bcc.n	80021e8 <CopyDataInit>
  ldr  r2, =_sbss
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021fc:	e002      	b.n	8002204 <LoopFillZerobss>

080021fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002200:	f842 3b04 	str.w	r3, [r2], #4

08002204 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002206:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002208:	d3f9      	bcc.n	80021fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800220a:	f7ff ffd3 	bl	80021b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800220e:	f002 f839 	bl	8004284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002212:	f7ff fcab 	bl	8001b6c <main>
  bx  lr    
 8002216:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002218:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800221c:	08007848 	.word	0x08007848
  ldr  r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002224:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002228:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800222c:	200003e4 	.word	0x200003e4

08002230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC_IRQHandler>
	...

08002234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <HAL_Init+0x40>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_Init+0x40>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_Init+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_Init+0x40>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 f92b 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	2000      	movs	r0, #0
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fe64 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f943 	bl	8002522 <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b4:	f000 f90b 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000004 	.word	0x20000004
 80022d0:	2000000c 	.word	0x2000000c
 80022d4:	20000008 	.word	0x20000008

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000000c 	.word	0x2000000c
 80022fc:	200003dc 	.word	0x200003dc

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200003dc 	.word	0x200003dc

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e159      	b.n	800280c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 8148 	bne.w	8002806 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d00b      	beq.n	8002596 <HAL_GPIO_Init+0x5a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800258a:	2b11      	cmp	r3, #17
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b12      	cmp	r3, #18
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0xfc>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b12      	cmp	r3, #18
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a2 	beq.w	8002806 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_GPIO_Init+0x2e4>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_GPIO_Init+0x2e4>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_GPIO_Init+0x2e4>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_GPIO_Init+0x2e8>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a48      	ldr	r2, [pc, #288]	; (8002828 <HAL_GPIO_Init+0x2ec>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d019      	beq.n	800273e <HAL_GPIO_Init+0x202>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a47      	ldr	r2, [pc, #284]	; (800282c <HAL_GPIO_Init+0x2f0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0x1fe>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a46      	ldr	r2, [pc, #280]	; (8002830 <HAL_GPIO_Init+0x2f4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00d      	beq.n	8002736 <HAL_GPIO_Init+0x1fa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a45      	ldr	r2, [pc, #276]	; (8002834 <HAL_GPIO_Init+0x2f8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <HAL_GPIO_Init+0x1f6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a44      	ldr	r2, [pc, #272]	; (8002838 <HAL_GPIO_Init+0x2fc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_GPIO_Init+0x1f2>
 800272a:	2304      	movs	r3, #4
 800272c:	e008      	b.n	8002740 <HAL_GPIO_Init+0x204>
 800272e:	2307      	movs	r3, #7
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x204>
 8002732:	2303      	movs	r3, #3
 8002734:	e004      	b.n	8002740 <HAL_GPIO_Init+0x204>
 8002736:	2302      	movs	r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x204>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x204>
 800273e:	2300      	movs	r3, #0
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	4093      	lsls	r3, r2
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002750:	4934      	ldr	r1, [pc, #208]	; (8002824 <HAL_GPIO_Init+0x2e8>)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <HAL_GPIO_Init+0x300>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002782:	4a2e      	ldr	r2, [pc, #184]	; (800283c <HAL_GPIO_Init+0x300>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002788:	4b2c      	ldr	r3, [pc, #176]	; (800283c <HAL_GPIO_Init+0x300>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_GPIO_Init+0x300>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_GPIO_Init+0x300>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a19      	ldr	r2, [pc, #100]	; (800283c <HAL_GPIO_Init+0x300>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <HAL_GPIO_Init+0x300>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <HAL_GPIO_Init+0x300>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	f67f aea2 	bls.w	8002558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002814:	bf00      	nop
 8002816:	3724      	adds	r7, #36	; 0x24
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40023800 	.word	0x40023800
 8002824:	40013800 	.word	0x40013800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40021000 	.word	0x40021000
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	e001      	b.n	8002862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e25b      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d075      	beq.n	80029ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c2:	4ba3      	ldr	r3, [pc, #652]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d00c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4ba0      	ldr	r3, [pc, #640]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d112      	bne.n	8002900 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028da:	4b9d      	ldr	r3, [pc, #628]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e6:	d10b      	bne.n	8002900 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	4b99      	ldr	r3, [pc, #612]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d05b      	beq.n	80029ac <HAL_RCC_OscConfig+0x108>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d157      	bne.n	80029ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e236      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002908:	d106      	bne.n	8002918 <HAL_RCC_OscConfig+0x74>
 800290a:	4b91      	ldr	r3, [pc, #580]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a90      	ldr	r2, [pc, #576]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e01d      	b.n	8002954 <HAL_RCC_OscConfig+0xb0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x98>
 8002922:	4b8b      	ldr	r3, [pc, #556]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a8a      	ldr	r2, [pc, #552]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a87      	ldr	r2, [pc, #540]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0xb0>
 800293c:	4b84      	ldr	r3, [pc, #528]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a83      	ldr	r2, [pc, #524]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a80      	ldr	r2, [pc, #512]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff fcd0 	bl	8002300 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff fccc 	bl	8002300 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1fb      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0xc0>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7ff fcbc 	bl	8002300 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298c:	f7ff fcb8 	bl	8002300 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1e7      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0xe8>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d063      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b62      	ldr	r3, [pc, #392]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d11c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_RCC_OscConfig+0x152>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e1bb      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4952      	ldr	r1, [pc, #328]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0a:	e03a      	b.n	8002a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a14:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <HAL_RCC_OscConfig+0x2b0>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7ff fc71 	bl	8002300 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a22:	f7ff fc6d 	bl	8002300 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e19c      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4940      	ldr	r1, [pc, #256]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <HAL_RCC_OscConfig+0x2b0>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fc50 	bl	8002300 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a64:	f7ff fc4c 	bl	8002300 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e17b      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d030      	beq.n	8002af0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d016      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_RCC_OscConfig+0x2b4>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7ff fc30 	bl	8002300 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fc2c 	bl	8002300 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e15b      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x200>
 8002ac2:	e015      	b.n	8002af0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_OscConfig+0x2b4>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7ff fc19 	bl	8002300 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad2:	f7ff fc15 	bl	8002300 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e144      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a0 	beq.w	8002c3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x2b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d121      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCC_OscConfig+0x2b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_RCC_OscConfig+0x2b8>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7ff fbdb 	bl	8002300 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e011      	b.n	8002b72 <HAL_RCC_OscConfig+0x2ce>
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	42470000 	.word	0x42470000
 8002b58:	42470e80 	.word	0x42470e80
 8002b5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b60:	f7ff fbce 	bl	8002300 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0fd      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x4d4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2f0>
 8002b86:	4b7d      	ldr	r3, [pc, #500]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a7c      	ldr	r2, [pc, #496]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	e01c      	b.n	8002bce <HAL_RCC_OscConfig+0x32a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x312>
 8002b9c:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a76      	ldr	r2, [pc, #472]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a73      	ldr	r2, [pc, #460]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0x32a>
 8002bb6:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a70      	ldr	r2, [pc, #448]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b6e      	ldr	r3, [pc, #440]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a6d      	ldr	r2, [pc, #436]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d015      	beq.n	8002c02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7ff fb93 	bl	8002300 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7ff fb8f 	bl	8002300 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0bc      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ee      	beq.n	8002bde <HAL_RCC_OscConfig+0x33a>
 8002c00:	e014      	b.n	8002c2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7ff fb7d 	bl	8002300 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7ff fb79 	bl	8002300 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0a6      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c32:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a51      	ldr	r2, [pc, #324]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8092 	beq.w	8002d6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d05c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d141      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b48      	ldr	r3, [pc, #288]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7ff fb4d 	bl	8002300 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7ff fb49 	bl	8002300 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e078      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	019b      	lsls	r3, r3, #6
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	4933      	ldr	r1, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb2:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff fb22 	bl	8002300 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7ff fb1e 	bl	8002300 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e04d      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x41c>
 8002cde:	e045      	b.n	8002d6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x4dc>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7ff fb0b 	bl	8002300 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cee:	f7ff fb07 	bl	8002300 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e036      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x44a>
 8002d0c:	e02e      	b.n	8002d6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e029      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_RCC_OscConfig+0x4d8>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d115      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d42:	4013      	ands	r3, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d10d      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	42470060 	.word	0x42470060

08002d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0cc      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b68      	ldr	r3, [pc, #416]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d90c      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d044      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d119      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e067      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7ff fa44 	bl	8002300 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7ff fa40 	bl	8002300 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e04f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d20c      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e032      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0a:	f000 f821 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4601      	mov	r1, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	5cd3      	ldrb	r3, [r2, r3]
 8002f1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f9a4 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08007578 	.word	0x08007578
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	20000008 	.word	0x20000008

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f66:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d007      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x32>
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d008      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x38>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80b4 	bne.w	80030e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b5e      	ldr	r3, [pc, #376]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f7e:	60bb      	str	r3, [r7, #8]
       break;
 8002f80:	e0b3      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f82:	4b5e      	ldr	r3, [pc, #376]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f84:	60bb      	str	r3, [r7, #8]
      break;
 8002f86:	e0b0      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f88:	4b5a      	ldr	r3, [pc, #360]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f92:	4b58      	ldr	r3, [pc, #352]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d04a      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9e:	4b55      	ldr	r3, [pc, #340]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	099b      	lsrs	r3, r3, #6
 8002fa4:	f04f 0400 	mov.w	r4, #0
 8002fa8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	ea03 0501 	and.w	r5, r3, r1
 8002fb4:	ea04 0602 	and.w	r6, r4, r2
 8002fb8:	4629      	mov	r1, r5
 8002fba:	4632      	mov	r2, r6
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	f04f 0400 	mov.w	r4, #0
 8002fc4:	0154      	lsls	r4, r2, #5
 8002fc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fca:	014b      	lsls	r3, r1, #5
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4622      	mov	r2, r4
 8002fd0:	1b49      	subs	r1, r1, r5
 8002fd2:	eb62 0206 	sbc.w	r2, r2, r6
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	f04f 0400 	mov.w	r4, #0
 8002fde:	0194      	lsls	r4, r2, #6
 8002fe0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fe4:	018b      	lsls	r3, r1, #6
 8002fe6:	1a5b      	subs	r3, r3, r1
 8002fe8:	eb64 0402 	sbc.w	r4, r4, r2
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	00e2      	lsls	r2, r4, #3
 8002ff6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ffa:	00d9      	lsls	r1, r3, #3
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4614      	mov	r4, r2
 8003000:	195b      	adds	r3, r3, r5
 8003002:	eb44 0406 	adc.w	r4, r4, r6
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	0262      	lsls	r2, r4, #9
 8003010:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003014:	0259      	lsls	r1, r3, #9
 8003016:	460b      	mov	r3, r1
 8003018:	4614      	mov	r4, r2
 800301a:	4618      	mov	r0, r3
 800301c:	4621      	mov	r1, r4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f04f 0400 	mov.w	r4, #0
 8003024:	461a      	mov	r2, r3
 8003026:	4623      	mov	r3, r4
 8003028:	f7fd fed4 	bl	8000dd4 <__aeabi_uldivmod>
 800302c:	4603      	mov	r3, r0
 800302e:	460c      	mov	r4, r1
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e049      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003034:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	f04f 0400 	mov.w	r4, #0
 800303e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	ea03 0501 	and.w	r5, r3, r1
 800304a:	ea04 0602 	and.w	r6, r4, r2
 800304e:	4629      	mov	r1, r5
 8003050:	4632      	mov	r2, r6
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	f04f 0400 	mov.w	r4, #0
 800305a:	0154      	lsls	r4, r2, #5
 800305c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003060:	014b      	lsls	r3, r1, #5
 8003062:	4619      	mov	r1, r3
 8003064:	4622      	mov	r2, r4
 8003066:	1b49      	subs	r1, r1, r5
 8003068:	eb62 0206 	sbc.w	r2, r2, r6
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	f04f 0400 	mov.w	r4, #0
 8003074:	0194      	lsls	r4, r2, #6
 8003076:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800307a:	018b      	lsls	r3, r1, #6
 800307c:	1a5b      	subs	r3, r3, r1
 800307e:	eb64 0402 	sbc.w	r4, r4, r2
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	00e2      	lsls	r2, r4, #3
 800308c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003090:	00d9      	lsls	r1, r3, #3
 8003092:	460b      	mov	r3, r1
 8003094:	4614      	mov	r4, r2
 8003096:	195b      	adds	r3, r3, r5
 8003098:	eb44 0406 	adc.w	r4, r4, r6
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	02a2      	lsls	r2, r4, #10
 80030a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030aa:	0299      	lsls	r1, r3, #10
 80030ac:	460b      	mov	r3, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	4621      	mov	r1, r4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f04f 0400 	mov.w	r4, #0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4623      	mov	r3, r4
 80030be:	f7fd fe89 	bl	8000dd4 <__aeabi_uldivmod>
 80030c2:	4603      	mov	r3, r0
 80030c4:	460c      	mov	r4, r1
 80030c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	3301      	adds	r3, #1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	60bb      	str	r3, [r7, #8]
      break;
 80030e2:	e002      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030e6:	60bb      	str	r3, [r7, #8]
      break;
 80030e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ea:	68bb      	ldr	r3, [r7, #8]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	00f42400 	.word	0x00f42400
 80030fc:	007a1200 	.word	0x007a1200

08003100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCC_GetHCLKFreq+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000004 	.word	0x20000004

08003118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800311c:	f7ff fff0 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003120:	4601      	mov	r1, r0
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0a9b      	lsrs	r3, r3, #10
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4a03      	ldr	r2, [pc, #12]	; (800313c <HAL_RCC_GetPCLK1Freq+0x24>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	08007588 	.word	0x08007588

08003140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003144:	f7ff ffdc 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003148:	4601      	mov	r1, r0
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0b5b      	lsrs	r3, r3, #13
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4a03      	ldr	r2, [pc, #12]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	fa21 f303 	lsr.w	r3, r1, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	08007588 	.word	0x08007588

08003168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e01d      	b.n	80031b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe fef8 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f000 fa1e 	bl	80035e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b06      	cmp	r3, #6
 80031e6:	d007      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d122      	bne.n	8003262 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d11b      	bne.n	8003262 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0202 	mvn.w	r2, #2
 8003232:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f9af 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 800324e:	e005      	b.n	800325c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f9a1 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9b2 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b04      	cmp	r3, #4
 800326e:	d122      	bne.n	80032b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b04      	cmp	r3, #4
 800327c:	d11b      	bne.n	80032b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f06f 0204 	mvn.w	r2, #4
 8003286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f985 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 80032a2:	e005      	b.n	80032b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f977 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f988 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d122      	bne.n	800330a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d11b      	bne.n	800330a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f06f 0208 	mvn.w	r2, #8
 80032da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2204      	movs	r2, #4
 80032e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f95b 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 80032f6:	e005      	b.n	8003304 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f94d 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f95e 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b10      	cmp	r3, #16
 8003316:	d122      	bne.n	800335e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b10      	cmp	r3, #16
 8003324:	d11b      	bne.n	800335e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f06f 0210 	mvn.w	r2, #16
 800332e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2208      	movs	r2, #8
 8003334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f931 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 800334a:	e005      	b.n	8003358 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f923 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f934 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10e      	bne.n	800338a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0201 	mvn.w	r2, #1
 8003382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f8fd 	bl	8003584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d10e      	bne.n	80033b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d107      	bne.n	80033b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 faab 	bl	800390c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d10e      	bne.n	80033e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d107      	bne.n	80033e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f8f9 	bl	80035d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d10e      	bne.n	800340e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d107      	bne.n	800340e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f06f 0220 	mvn.w	r2, #32
 8003406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa75 	bl	80038f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_TIM_ConfigClockSource+0x18>
 800342a:	2302      	movs	r3, #2
 800342c:	e0a6      	b.n	800357c <HAL_TIM_ConfigClockSource+0x166>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800344c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003454:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d067      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x120>
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d80b      	bhi.n	8003482 <HAL_TIM_ConfigClockSource+0x6c>
 800346a:	2b10      	cmp	r3, #16
 800346c:	d073      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x140>
 800346e:	2b10      	cmp	r3, #16
 8003470:	d802      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x62>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d06f      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003476:	e078      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003478:	2b20      	cmp	r3, #32
 800347a:	d06c      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x140>
 800347c:	2b30      	cmp	r3, #48	; 0x30
 800347e:	d06a      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003480:	e073      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003482:	2b70      	cmp	r3, #112	; 0x70
 8003484:	d00d      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x8c>
 8003486:	2b70      	cmp	r3, #112	; 0x70
 8003488:	d804      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x7e>
 800348a:	2b50      	cmp	r3, #80	; 0x50
 800348c:	d033      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0xe0>
 800348e:	2b60      	cmp	r3, #96	; 0x60
 8003490:	d041      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003492:	e06a      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003498:	d066      	beq.n	8003568 <HAL_TIM_ConfigClockSource+0x152>
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349e:	d017      	beq.n	80034d0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80034a0:	e063      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f000 f993 	bl	80037dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
      break;
 80034ce:	e04c      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f000 f97c 	bl	80037dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f2:	609a      	str	r2, [r3, #8]
      break;
 80034f4:	e039      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	461a      	mov	r2, r3
 8003504:	f000 f8f0 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2150      	movs	r1, #80	; 0x50
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f949 	bl	80037a6 <TIM_ITRx_SetConfig>
      break;
 8003514:	e029      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	461a      	mov	r2, r3
 8003524:	f000 f90f 	bl	8003746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2160      	movs	r1, #96	; 0x60
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f939 	bl	80037a6 <TIM_ITRx_SetConfig>
      break;
 8003534:	e019      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	461a      	mov	r2, r3
 8003544:	f000 f8d0 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2140      	movs	r1, #64	; 0x40
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f929 	bl	80037a6 <TIM_ITRx_SetConfig>
      break;
 8003554:	e009      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f000 f920 	bl	80037a6 <TIM_ITRx_SetConfig>
      break;
 8003566:	e000      	b.n	800356a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003568:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a34      	ldr	r2, [pc, #208]	; (80036cc <TIM_Base_SetConfig+0xe4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00f      	beq.n	8003620 <TIM_Base_SetConfig+0x38>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003606:	d00b      	beq.n	8003620 <TIM_Base_SetConfig+0x38>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <TIM_Base_SetConfig+0xe8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_Base_SetConfig+0x38>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a30      	ldr	r2, [pc, #192]	; (80036d4 <TIM_Base_SetConfig+0xec>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_Base_SetConfig+0x38>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <TIM_Base_SetConfig+0xf0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d108      	bne.n	8003632 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a25      	ldr	r2, [pc, #148]	; (80036cc <TIM_Base_SetConfig+0xe4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01b      	beq.n	8003672 <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003640:	d017      	beq.n	8003672 <TIM_Base_SetConfig+0x8a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a22      	ldr	r2, [pc, #136]	; (80036d0 <TIM_Base_SetConfig+0xe8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <TIM_Base_SetConfig+0xec>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00f      	beq.n	8003672 <TIM_Base_SetConfig+0x8a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a20      	ldr	r2, [pc, #128]	; (80036d8 <TIM_Base_SetConfig+0xf0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00b      	beq.n	8003672 <TIM_Base_SetConfig+0x8a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <TIM_Base_SetConfig+0xf4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d007      	beq.n	8003672 <TIM_Base_SetConfig+0x8a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <TIM_Base_SetConfig+0xf8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_Base_SetConfig+0x8a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <TIM_Base_SetConfig+0xfc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d108      	bne.n	8003684 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <TIM_Base_SetConfig+0xe4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d103      	bne.n	80036b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	615a      	str	r2, [r3, #20]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 030a 	bic.w	r3, r3, #10
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003746:	b480      	push	{r7}
 8003748:	b087      	sub	sp, #28
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f023 0210 	bic.w	r2, r3, #16
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	031b      	lsls	r3, r3, #12
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f043 0307 	orr.w	r3, r3, #7
 80037c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	431a      	orrs	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4313      	orrs	r3, r2
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003830:	2302      	movs	r3, #2
 8003832:	e050      	b.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d018      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003880:	d013      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00e      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10c      	bne.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40014000 	.word	0x40014000

080038f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e03f      	b.n	80039b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fe fb6a 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f90b 	bl	8003b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b088      	sub	sp, #32
 80039be:	af02      	add	r7, sp, #8
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	f040 8083 	bne.w	8003ae2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Transmit+0x2e>
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e07b      	b.n	8003ae4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Transmit+0x40>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e074      	b.n	8003ae4 <HAL_UART_Transmit+0x12a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2221      	movs	r2, #33	; 0x21
 8003a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a10:	f7fe fc76 	bl	8002300 <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a2a:	e042      	b.n	8003ab2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d122      	bne.n	8003a8a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f84c 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e042      	b.n	8003ae4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a70:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	e017      	b.n	8003ab2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	3301      	adds	r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	e013      	b.n	8003ab2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f829 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e01f      	b.n	8003ae4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	60ba      	str	r2, [r7, #8]
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1b7      	bne.n	8003a2c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f810 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e006      	b.n	8003ae4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afc:	e02c      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b04:	d028      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b0c:	f7fe fbf8 	bl	8002300 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d21d      	bcs.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e00f      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d0c3      	beq.n	8003afe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003bc2:	f023 030c 	bic.w	r3, r3, #12
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bee:	f040 818b 	bne.w	8003f08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4ac1      	ldr	r2, [pc, #772]	; (8003efc <UART_SetConfig+0x37c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d005      	beq.n	8003c08 <UART_SetConfig+0x88>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4abf      	ldr	r2, [pc, #764]	; (8003f00 <UART_SetConfig+0x380>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f040 80bd 	bne.w	8003d82 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c08:	f7ff fa9a 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 8003c0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	461d      	mov	r5, r3
 8003c12:	f04f 0600 	mov.w	r6, #0
 8003c16:	46a8      	mov	r8, r5
 8003c18:	46b1      	mov	r9, r6
 8003c1a:	eb18 0308 	adds.w	r3, r8, r8
 8003c1e:	eb49 0409 	adc.w	r4, r9, r9
 8003c22:	4698      	mov	r8, r3
 8003c24:	46a1      	mov	r9, r4
 8003c26:	eb18 0805 	adds.w	r8, r8, r5
 8003c2a:	eb49 0906 	adc.w	r9, r9, r6
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c42:	4688      	mov	r8, r1
 8003c44:	4691      	mov	r9, r2
 8003c46:	eb18 0005 	adds.w	r0, r8, r5
 8003c4a:	eb49 0106 	adc.w	r1, r9, r6
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	461d      	mov	r5, r3
 8003c54:	f04f 0600 	mov.w	r6, #0
 8003c58:	196b      	adds	r3, r5, r5
 8003c5a:	eb46 0406 	adc.w	r4, r6, r6
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4623      	mov	r3, r4
 8003c62:	f7fd f8b7 	bl	8000dd4 <__aeabi_uldivmod>
 8003c66:	4603      	mov	r3, r0
 8003c68:	460c      	mov	r4, r1
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4ba5      	ldr	r3, [pc, #660]	; (8003f04 <UART_SetConfig+0x384>)
 8003c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	f04f 0600 	mov.w	r6, #0
 8003c80:	46a9      	mov	r9, r5
 8003c82:	46b2      	mov	sl, r6
 8003c84:	eb19 0309 	adds.w	r3, r9, r9
 8003c88:	eb4a 040a 	adc.w	r4, sl, sl
 8003c8c:	4699      	mov	r9, r3
 8003c8e:	46a2      	mov	sl, r4
 8003c90:	eb19 0905 	adds.w	r9, r9, r5
 8003c94:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cac:	4689      	mov	r9, r1
 8003cae:	4692      	mov	sl, r2
 8003cb0:	eb19 0005 	adds.w	r0, r9, r5
 8003cb4:	eb4a 0106 	adc.w	r1, sl, r6
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	f04f 0600 	mov.w	r6, #0
 8003cc2:	196b      	adds	r3, r5, r5
 8003cc4:	eb46 0406 	adc.w	r4, r6, r6
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4623      	mov	r3, r4
 8003ccc:	f7fd f882 	bl	8000dd4 <__aeabi_uldivmod>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b8b      	ldr	r3, [pc, #556]	; (8003f04 <UART_SetConfig+0x384>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	2164      	movs	r1, #100	; 0x64
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	3332      	adds	r3, #50	; 0x32
 8003cea:	4a86      	ldr	r2, [pc, #536]	; (8003f04 <UART_SetConfig+0x384>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cf8:	4498      	add	r8, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	461d      	mov	r5, r3
 8003cfe:	f04f 0600 	mov.w	r6, #0
 8003d02:	46a9      	mov	r9, r5
 8003d04:	46b2      	mov	sl, r6
 8003d06:	eb19 0309 	adds.w	r3, r9, r9
 8003d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d0e:	4699      	mov	r9, r3
 8003d10:	46a2      	mov	sl, r4
 8003d12:	eb19 0905 	adds.w	r9, r9, r5
 8003d16:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d2e:	4689      	mov	r9, r1
 8003d30:	4692      	mov	sl, r2
 8003d32:	eb19 0005 	adds.w	r0, r9, r5
 8003d36:	eb4a 0106 	adc.w	r1, sl, r6
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	461d      	mov	r5, r3
 8003d40:	f04f 0600 	mov.w	r6, #0
 8003d44:	196b      	adds	r3, r5, r5
 8003d46:	eb46 0406 	adc.w	r4, r6, r6
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4623      	mov	r3, r4
 8003d4e:	f7fd f841 	bl	8000dd4 <__aeabi_uldivmod>
 8003d52:	4603      	mov	r3, r0
 8003d54:	460c      	mov	r4, r1
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <UART_SetConfig+0x384>)
 8003d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2164      	movs	r1, #100	; 0x64
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	3332      	adds	r3, #50	; 0x32
 8003d6c:	4a65      	ldr	r2, [pc, #404]	; (8003f04 <UART_SetConfig+0x384>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f003 0207 	and.w	r2, r3, #7
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4442      	add	r2, r8
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	e26f      	b.n	8004262 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d82:	f7ff f9c9 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 8003d86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	f04f 0600 	mov.w	r6, #0
 8003d90:	46a8      	mov	r8, r5
 8003d92:	46b1      	mov	r9, r6
 8003d94:	eb18 0308 	adds.w	r3, r8, r8
 8003d98:	eb49 0409 	adc.w	r4, r9, r9
 8003d9c:	4698      	mov	r8, r3
 8003d9e:	46a1      	mov	r9, r4
 8003da0:	eb18 0805 	adds.w	r8, r8, r5
 8003da4:	eb49 0906 	adc.w	r9, r9, r6
 8003da8:	f04f 0100 	mov.w	r1, #0
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003db4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003db8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dbc:	4688      	mov	r8, r1
 8003dbe:	4691      	mov	r9, r2
 8003dc0:	eb18 0005 	adds.w	r0, r8, r5
 8003dc4:	eb49 0106 	adc.w	r1, r9, r6
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	461d      	mov	r5, r3
 8003dce:	f04f 0600 	mov.w	r6, #0
 8003dd2:	196b      	adds	r3, r5, r5
 8003dd4:	eb46 0406 	adc.w	r4, r6, r6
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4623      	mov	r3, r4
 8003ddc:	f7fc fffa 	bl	8000dd4 <__aeabi_uldivmod>
 8003de0:	4603      	mov	r3, r0
 8003de2:	460c      	mov	r4, r1
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <UART_SetConfig+0x384>)
 8003de8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	461d      	mov	r5, r3
 8003df6:	f04f 0600 	mov.w	r6, #0
 8003dfa:	46a9      	mov	r9, r5
 8003dfc:	46b2      	mov	sl, r6
 8003dfe:	eb19 0309 	adds.w	r3, r9, r9
 8003e02:	eb4a 040a 	adc.w	r4, sl, sl
 8003e06:	4699      	mov	r9, r3
 8003e08:	46a2      	mov	sl, r4
 8003e0a:	eb19 0905 	adds.w	r9, r9, r5
 8003e0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e26:	4689      	mov	r9, r1
 8003e28:	4692      	mov	sl, r2
 8003e2a:	eb19 0005 	adds.w	r0, r9, r5
 8003e2e:	eb4a 0106 	adc.w	r1, sl, r6
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	461d      	mov	r5, r3
 8003e38:	f04f 0600 	mov.w	r6, #0
 8003e3c:	196b      	adds	r3, r5, r5
 8003e3e:	eb46 0406 	adc.w	r4, r6, r6
 8003e42:	461a      	mov	r2, r3
 8003e44:	4623      	mov	r3, r4
 8003e46:	f7fc ffc5 	bl	8000dd4 <__aeabi_uldivmod>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <UART_SetConfig+0x384>)
 8003e52:	fba3 1302 	umull	r1, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2164      	movs	r1, #100	; 0x64
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	3332      	adds	r3, #50	; 0x32
 8003e64:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <UART_SetConfig+0x384>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e72:	4498      	add	r8, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	461d      	mov	r5, r3
 8003e78:	f04f 0600 	mov.w	r6, #0
 8003e7c:	46a9      	mov	r9, r5
 8003e7e:	46b2      	mov	sl, r6
 8003e80:	eb19 0309 	adds.w	r3, r9, r9
 8003e84:	eb4a 040a 	adc.w	r4, sl, sl
 8003e88:	4699      	mov	r9, r3
 8003e8a:	46a2      	mov	sl, r4
 8003e8c:	eb19 0905 	adds.w	r9, r9, r5
 8003e90:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ea4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ea8:	4689      	mov	r9, r1
 8003eaa:	4692      	mov	sl, r2
 8003eac:	eb19 0005 	adds.w	r0, r9, r5
 8003eb0:	eb4a 0106 	adc.w	r1, sl, r6
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	461d      	mov	r5, r3
 8003eba:	f04f 0600 	mov.w	r6, #0
 8003ebe:	196b      	adds	r3, r5, r5
 8003ec0:	eb46 0406 	adc.w	r4, r6, r6
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	f7fc ff84 	bl	8000dd4 <__aeabi_uldivmod>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <UART_SetConfig+0x384>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	; 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	3332      	adds	r3, #50	; 0x32
 8003ee6:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <UART_SetConfig+0x384>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 0207 	and.w	r2, r3, #7
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4442      	add	r2, r8
 8003ef8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003efa:	e1b2      	b.n	8004262 <UART_SetConfig+0x6e2>
 8003efc:	40011000 	.word	0x40011000
 8003f00:	40011400 	.word	0x40011400
 8003f04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4ad7      	ldr	r2, [pc, #860]	; (800426c <UART_SetConfig+0x6ec>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d005      	beq.n	8003f1e <UART_SetConfig+0x39e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4ad6      	ldr	r2, [pc, #856]	; (8004270 <UART_SetConfig+0x6f0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	f040 80d1 	bne.w	80040c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f1e:	f7ff f90f 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 8003f22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	469a      	mov	sl, r3
 8003f28:	f04f 0b00 	mov.w	fp, #0
 8003f2c:	46d0      	mov	r8, sl
 8003f2e:	46d9      	mov	r9, fp
 8003f30:	eb18 0308 	adds.w	r3, r8, r8
 8003f34:	eb49 0409 	adc.w	r4, r9, r9
 8003f38:	4698      	mov	r8, r3
 8003f3a:	46a1      	mov	r9, r4
 8003f3c:	eb18 080a 	adds.w	r8, r8, sl
 8003f40:	eb49 090b 	adc.w	r9, r9, fp
 8003f44:	f04f 0100 	mov.w	r1, #0
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f58:	4688      	mov	r8, r1
 8003f5a:	4691      	mov	r9, r2
 8003f5c:	eb1a 0508 	adds.w	r5, sl, r8
 8003f60:	eb4b 0609 	adc.w	r6, fp, r9
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	f04f 0400 	mov.w	r4, #0
 8003f76:	0094      	lsls	r4, r2, #2
 8003f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f7c:	008b      	lsls	r3, r1, #2
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	4628      	mov	r0, r5
 8003f84:	4631      	mov	r1, r6
 8003f86:	f7fc ff25 	bl	8000dd4 <__aeabi_uldivmod>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4bb8      	ldr	r3, [pc, #736]	; (8004274 <UART_SetConfig+0x6f4>)
 8003f92:	fba3 2302 	umull	r2, r3, r3, r2
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	469b      	mov	fp, r3
 8003fa0:	f04f 0c00 	mov.w	ip, #0
 8003fa4:	46d9      	mov	r9, fp
 8003fa6:	46e2      	mov	sl, ip
 8003fa8:	eb19 0309 	adds.w	r3, r9, r9
 8003fac:	eb4a 040a 	adc.w	r4, sl, sl
 8003fb0:	4699      	mov	r9, r3
 8003fb2:	46a2      	mov	sl, r4
 8003fb4:	eb19 090b 	adds.w	r9, r9, fp
 8003fb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fd0:	4689      	mov	r9, r1
 8003fd2:	4692      	mov	sl, r2
 8003fd4:	eb1b 0509 	adds.w	r5, fp, r9
 8003fd8:	eb4c 060a 	adc.w	r6, ip, sl
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	f04f 0400 	mov.w	r4, #0
 8003fee:	0094      	lsls	r4, r2, #2
 8003ff0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ff4:	008b      	lsls	r3, r1, #2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4623      	mov	r3, r4
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	f7fc fee9 	bl	8000dd4 <__aeabi_uldivmod>
 8004002:	4603      	mov	r3, r0
 8004004:	460c      	mov	r4, r1
 8004006:	461a      	mov	r2, r3
 8004008:	4b9a      	ldr	r3, [pc, #616]	; (8004274 <UART_SetConfig+0x6f4>)
 800400a:	fba3 1302 	umull	r1, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2164      	movs	r1, #100	; 0x64
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	3332      	adds	r3, #50	; 0x32
 800401c:	4a95      	ldr	r2, [pc, #596]	; (8004274 <UART_SetConfig+0x6f4>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004028:	4498      	add	r8, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	469b      	mov	fp, r3
 800402e:	f04f 0c00 	mov.w	ip, #0
 8004032:	46d9      	mov	r9, fp
 8004034:	46e2      	mov	sl, ip
 8004036:	eb19 0309 	adds.w	r3, r9, r9
 800403a:	eb4a 040a 	adc.w	r4, sl, sl
 800403e:	4699      	mov	r9, r3
 8004040:	46a2      	mov	sl, r4
 8004042:	eb19 090b 	adds.w	r9, r9, fp
 8004046:	eb4a 0a0c 	adc.w	sl, sl, ip
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800405e:	4689      	mov	r9, r1
 8004060:	4692      	mov	sl, r2
 8004062:	eb1b 0509 	adds.w	r5, fp, r9
 8004066:	eb4c 060a 	adc.w	r6, ip, sl
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	f04f 0400 	mov.w	r4, #0
 800407c:	0094      	lsls	r4, r2, #2
 800407e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004082:	008b      	lsls	r3, r1, #2
 8004084:	461a      	mov	r2, r3
 8004086:	4623      	mov	r3, r4
 8004088:	4628      	mov	r0, r5
 800408a:	4631      	mov	r1, r6
 800408c:	f7fc fea2 	bl	8000dd4 <__aeabi_uldivmod>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	461a      	mov	r2, r3
 8004096:	4b77      	ldr	r3, [pc, #476]	; (8004274 <UART_SetConfig+0x6f4>)
 8004098:	fba3 1302 	umull	r1, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	2164      	movs	r1, #100	; 0x64
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	3332      	adds	r3, #50	; 0x32
 80040aa:	4a72      	ldr	r2, [pc, #456]	; (8004274 <UART_SetConfig+0x6f4>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	f003 020f 	and.w	r2, r3, #15
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4442      	add	r2, r8
 80040bc:	609a      	str	r2, [r3, #8]
 80040be:	e0d0      	b.n	8004262 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7ff f82a 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 80040c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	469a      	mov	sl, r3
 80040ca:	f04f 0b00 	mov.w	fp, #0
 80040ce:	46d0      	mov	r8, sl
 80040d0:	46d9      	mov	r9, fp
 80040d2:	eb18 0308 	adds.w	r3, r8, r8
 80040d6:	eb49 0409 	adc.w	r4, r9, r9
 80040da:	4698      	mov	r8, r3
 80040dc:	46a1      	mov	r9, r4
 80040de:	eb18 080a 	adds.w	r8, r8, sl
 80040e2:	eb49 090b 	adc.w	r9, r9, fp
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040fa:	4688      	mov	r8, r1
 80040fc:	4691      	mov	r9, r2
 80040fe:	eb1a 0508 	adds.w	r5, sl, r8
 8004102:	eb4b 0609 	adc.w	r6, fp, r9
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4619      	mov	r1, r3
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	0094      	lsls	r4, r2, #2
 800411a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	461a      	mov	r2, r3
 8004122:	4623      	mov	r3, r4
 8004124:	4628      	mov	r0, r5
 8004126:	4631      	mov	r1, r6
 8004128:	f7fc fe54 	bl	8000dd4 <__aeabi_uldivmod>
 800412c:	4603      	mov	r3, r0
 800412e:	460c      	mov	r4, r1
 8004130:	461a      	mov	r2, r3
 8004132:	4b50      	ldr	r3, [pc, #320]	; (8004274 <UART_SetConfig+0x6f4>)
 8004134:	fba3 2302 	umull	r2, r3, r3, r2
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	469b      	mov	fp, r3
 8004142:	f04f 0c00 	mov.w	ip, #0
 8004146:	46d9      	mov	r9, fp
 8004148:	46e2      	mov	sl, ip
 800414a:	eb19 0309 	adds.w	r3, r9, r9
 800414e:	eb4a 040a 	adc.w	r4, sl, sl
 8004152:	4699      	mov	r9, r3
 8004154:	46a2      	mov	sl, r4
 8004156:	eb19 090b 	adds.w	r9, r9, fp
 800415a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800416a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800416e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004172:	4689      	mov	r9, r1
 8004174:	4692      	mov	sl, r2
 8004176:	eb1b 0509 	adds.w	r5, fp, r9
 800417a:	eb4c 060a 	adc.w	r6, ip, sl
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4619      	mov	r1, r3
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	f04f 0400 	mov.w	r4, #0
 8004190:	0094      	lsls	r4, r2, #2
 8004192:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	461a      	mov	r2, r3
 800419a:	4623      	mov	r3, r4
 800419c:	4628      	mov	r0, r5
 800419e:	4631      	mov	r1, r6
 80041a0:	f7fc fe18 	bl	8000dd4 <__aeabi_uldivmod>
 80041a4:	4603      	mov	r3, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b32      	ldr	r3, [pc, #200]	; (8004274 <UART_SetConfig+0x6f4>)
 80041ac:	fba3 1302 	umull	r1, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	2164      	movs	r1, #100	; 0x64
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	3332      	adds	r3, #50	; 0x32
 80041be:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <UART_SetConfig+0x6f4>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ca:	4498      	add	r8, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	469b      	mov	fp, r3
 80041d0:	f04f 0c00 	mov.w	ip, #0
 80041d4:	46d9      	mov	r9, fp
 80041d6:	46e2      	mov	sl, ip
 80041d8:	eb19 0309 	adds.w	r3, r9, r9
 80041dc:	eb4a 040a 	adc.w	r4, sl, sl
 80041e0:	4699      	mov	r9, r3
 80041e2:	46a2      	mov	sl, r4
 80041e4:	eb19 090b 	adds.w	r9, r9, fp
 80041e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004200:	4689      	mov	r9, r1
 8004202:	4692      	mov	sl, r2
 8004204:	eb1b 0509 	adds.w	r5, fp, r9
 8004208:	eb4c 060a 	adc.w	r6, ip, sl
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4619      	mov	r1, r3
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	f04f 0400 	mov.w	r4, #0
 800421e:	0094      	lsls	r4, r2, #2
 8004220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004224:	008b      	lsls	r3, r1, #2
 8004226:	461a      	mov	r2, r3
 8004228:	4623      	mov	r3, r4
 800422a:	4628      	mov	r0, r5
 800422c:	4631      	mov	r1, r6
 800422e:	f7fc fdd1 	bl	8000dd4 <__aeabi_uldivmod>
 8004232:	4603      	mov	r3, r0
 8004234:	460c      	mov	r4, r1
 8004236:	461a      	mov	r2, r3
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <UART_SetConfig+0x6f4>)
 800423a:	fba3 1302 	umull	r1, r3, r3, r2
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2164      	movs	r1, #100	; 0x64
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	3332      	adds	r3, #50	; 0x32
 800424c:	4a09      	ldr	r2, [pc, #36]	; (8004274 <UART_SetConfig+0x6f4>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4442      	add	r2, r8
 800425e:	609a      	str	r2, [r3, #8]
}
 8004260:	e7ff      	b.n	8004262 <UART_SetConfig+0x6e2>
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426c:	40011000 	.word	0x40011000
 8004270:	40011400 	.word	0x40011400
 8004274:	51eb851f 	.word	0x51eb851f

08004278 <__errno>:
 8004278:	4b01      	ldr	r3, [pc, #4]	; (8004280 <__errno+0x8>)
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000010 	.word	0x20000010

08004284 <__libc_init_array>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	4e0d      	ldr	r6, [pc, #52]	; (80042bc <__libc_init_array+0x38>)
 8004288:	4c0d      	ldr	r4, [pc, #52]	; (80042c0 <__libc_init_array+0x3c>)
 800428a:	1ba4      	subs	r4, r4, r6
 800428c:	10a4      	asrs	r4, r4, #2
 800428e:	2500      	movs	r5, #0
 8004290:	42a5      	cmp	r5, r4
 8004292:	d109      	bne.n	80042a8 <__libc_init_array+0x24>
 8004294:	4e0b      	ldr	r6, [pc, #44]	; (80042c4 <__libc_init_array+0x40>)
 8004296:	4c0c      	ldr	r4, [pc, #48]	; (80042c8 <__libc_init_array+0x44>)
 8004298:	f003 f8b8 	bl	800740c <_init>
 800429c:	1ba4      	subs	r4, r4, r6
 800429e:	10a4      	asrs	r4, r4, #2
 80042a0:	2500      	movs	r5, #0
 80042a2:	42a5      	cmp	r5, r4
 80042a4:	d105      	bne.n	80042b2 <__libc_init_array+0x2e>
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ac:	4798      	blx	r3
 80042ae:	3501      	adds	r5, #1
 80042b0:	e7ee      	b.n	8004290 <__libc_init_array+0xc>
 80042b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042b6:	4798      	blx	r3
 80042b8:	3501      	adds	r5, #1
 80042ba:	e7f2      	b.n	80042a2 <__libc_init_array+0x1e>
 80042bc:	08007840 	.word	0x08007840
 80042c0:	08007840 	.word	0x08007840
 80042c4:	08007840 	.word	0x08007840
 80042c8:	08007844 	.word	0x08007844

080042cc <memcpy>:
 80042cc:	b510      	push	{r4, lr}
 80042ce:	1e43      	subs	r3, r0, #1
 80042d0:	440a      	add	r2, r1
 80042d2:	4291      	cmp	r1, r2
 80042d4:	d100      	bne.n	80042d8 <memcpy+0xc>
 80042d6:	bd10      	pop	{r4, pc}
 80042d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e0:	e7f7      	b.n	80042d2 <memcpy+0x6>

080042e2 <memset>:
 80042e2:	4402      	add	r2, r0
 80042e4:	4603      	mov	r3, r0
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d100      	bne.n	80042ec <memset+0xa>
 80042ea:	4770      	bx	lr
 80042ec:	f803 1b01 	strb.w	r1, [r3], #1
 80042f0:	e7f9      	b.n	80042e6 <memset+0x4>

080042f2 <__cvt>:
 80042f2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f6:	ec55 4b10 	vmov	r4, r5, d0
 80042fa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80042fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004300:	2d00      	cmp	r5, #0
 8004302:	460e      	mov	r6, r1
 8004304:	4691      	mov	r9, r2
 8004306:	4619      	mov	r1, r3
 8004308:	bfb8      	it	lt
 800430a:	4622      	movlt	r2, r4
 800430c:	462b      	mov	r3, r5
 800430e:	f027 0720 	bic.w	r7, r7, #32
 8004312:	bfbb      	ittet	lt
 8004314:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004318:	461d      	movlt	r5, r3
 800431a:	2300      	movge	r3, #0
 800431c:	232d      	movlt	r3, #45	; 0x2d
 800431e:	bfb8      	it	lt
 8004320:	4614      	movlt	r4, r2
 8004322:	2f46      	cmp	r7, #70	; 0x46
 8004324:	700b      	strb	r3, [r1, #0]
 8004326:	d004      	beq.n	8004332 <__cvt+0x40>
 8004328:	2f45      	cmp	r7, #69	; 0x45
 800432a:	d100      	bne.n	800432e <__cvt+0x3c>
 800432c:	3601      	adds	r6, #1
 800432e:	2102      	movs	r1, #2
 8004330:	e000      	b.n	8004334 <__cvt+0x42>
 8004332:	2103      	movs	r1, #3
 8004334:	ab03      	add	r3, sp, #12
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	ab02      	add	r3, sp, #8
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4632      	mov	r2, r6
 800433e:	4653      	mov	r3, sl
 8004340:	ec45 4b10 	vmov	d0, r4, r5
 8004344:	f000 fce0 	bl	8004d08 <_dtoa_r>
 8004348:	2f47      	cmp	r7, #71	; 0x47
 800434a:	4680      	mov	r8, r0
 800434c:	d102      	bne.n	8004354 <__cvt+0x62>
 800434e:	f019 0f01 	tst.w	r9, #1
 8004352:	d026      	beq.n	80043a2 <__cvt+0xb0>
 8004354:	2f46      	cmp	r7, #70	; 0x46
 8004356:	eb08 0906 	add.w	r9, r8, r6
 800435a:	d111      	bne.n	8004380 <__cvt+0x8e>
 800435c:	f898 3000 	ldrb.w	r3, [r8]
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d10a      	bne.n	800437a <__cvt+0x88>
 8004364:	2200      	movs	r2, #0
 8004366:	2300      	movs	r3, #0
 8004368:	4620      	mov	r0, r4
 800436a:	4629      	mov	r1, r5
 800436c:	f7fc fbb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004370:	b918      	cbnz	r0, 800437a <__cvt+0x88>
 8004372:	f1c6 0601 	rsb	r6, r6, #1
 8004376:	f8ca 6000 	str.w	r6, [sl]
 800437a:	f8da 3000 	ldr.w	r3, [sl]
 800437e:	4499      	add	r9, r3
 8004380:	2200      	movs	r2, #0
 8004382:	2300      	movs	r3, #0
 8004384:	4620      	mov	r0, r4
 8004386:	4629      	mov	r1, r5
 8004388:	f7fc fba6 	bl	8000ad8 <__aeabi_dcmpeq>
 800438c:	b938      	cbnz	r0, 800439e <__cvt+0xac>
 800438e:	2230      	movs	r2, #48	; 0x30
 8004390:	9b03      	ldr	r3, [sp, #12]
 8004392:	454b      	cmp	r3, r9
 8004394:	d205      	bcs.n	80043a2 <__cvt+0xb0>
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	9103      	str	r1, [sp, #12]
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e7f8      	b.n	8004390 <__cvt+0x9e>
 800439e:	f8cd 900c 	str.w	r9, [sp, #12]
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043a6:	eba3 0308 	sub.w	r3, r3, r8
 80043aa:	4640      	mov	r0, r8
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	b004      	add	sp, #16
 80043b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080043b4 <__exponent>:
 80043b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b6:	2900      	cmp	r1, #0
 80043b8:	4604      	mov	r4, r0
 80043ba:	bfba      	itte	lt
 80043bc:	4249      	neglt	r1, r1
 80043be:	232d      	movlt	r3, #45	; 0x2d
 80043c0:	232b      	movge	r3, #43	; 0x2b
 80043c2:	2909      	cmp	r1, #9
 80043c4:	f804 2b02 	strb.w	r2, [r4], #2
 80043c8:	7043      	strb	r3, [r0, #1]
 80043ca:	dd20      	ble.n	800440e <__exponent+0x5a>
 80043cc:	f10d 0307 	add.w	r3, sp, #7
 80043d0:	461f      	mov	r7, r3
 80043d2:	260a      	movs	r6, #10
 80043d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80043d8:	fb06 1115 	mls	r1, r6, r5, r1
 80043dc:	3130      	adds	r1, #48	; 0x30
 80043de:	2d09      	cmp	r5, #9
 80043e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043e4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80043e8:	4629      	mov	r1, r5
 80043ea:	dc09      	bgt.n	8004400 <__exponent+0x4c>
 80043ec:	3130      	adds	r1, #48	; 0x30
 80043ee:	3b02      	subs	r3, #2
 80043f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043f4:	42bb      	cmp	r3, r7
 80043f6:	4622      	mov	r2, r4
 80043f8:	d304      	bcc.n	8004404 <__exponent+0x50>
 80043fa:	1a10      	subs	r0, r2, r0
 80043fc:	b003      	add	sp, #12
 80043fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004400:	4613      	mov	r3, r2
 8004402:	e7e7      	b.n	80043d4 <__exponent+0x20>
 8004404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004408:	f804 2b01 	strb.w	r2, [r4], #1
 800440c:	e7f2      	b.n	80043f4 <__exponent+0x40>
 800440e:	2330      	movs	r3, #48	; 0x30
 8004410:	4419      	add	r1, r3
 8004412:	7083      	strb	r3, [r0, #2]
 8004414:	1d02      	adds	r2, r0, #4
 8004416:	70c1      	strb	r1, [r0, #3]
 8004418:	e7ef      	b.n	80043fa <__exponent+0x46>
	...

0800441c <_printf_float>:
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	b08d      	sub	sp, #52	; 0x34
 8004422:	460c      	mov	r4, r1
 8004424:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004428:	4616      	mov	r6, r2
 800442a:	461f      	mov	r7, r3
 800442c:	4605      	mov	r5, r0
 800442e:	f001 fa23 	bl	8005878 <_localeconv_r>
 8004432:	6803      	ldr	r3, [r0, #0]
 8004434:	9304      	str	r3, [sp, #16]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fb fed2 	bl	80001e0 <strlen>
 800443c:	2300      	movs	r3, #0
 800443e:	930a      	str	r3, [sp, #40]	; 0x28
 8004440:	f8d8 3000 	ldr.w	r3, [r8]
 8004444:	9005      	str	r0, [sp, #20]
 8004446:	3307      	adds	r3, #7
 8004448:	f023 0307 	bic.w	r3, r3, #7
 800444c:	f103 0208 	add.w	r2, r3, #8
 8004450:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004454:	f8d4 b000 	ldr.w	fp, [r4]
 8004458:	f8c8 2000 	str.w	r2, [r8]
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004464:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004468:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800446c:	9307      	str	r3, [sp, #28]
 800446e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004476:	4ba7      	ldr	r3, [pc, #668]	; (8004714 <_printf_float+0x2f8>)
 8004478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800447c:	f7fc fb5e 	bl	8000b3c <__aeabi_dcmpun>
 8004480:	bb70      	cbnz	r0, 80044e0 <_printf_float+0xc4>
 8004482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004486:	4ba3      	ldr	r3, [pc, #652]	; (8004714 <_printf_float+0x2f8>)
 8004488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800448c:	f7fc fb38 	bl	8000b00 <__aeabi_dcmple>
 8004490:	bb30      	cbnz	r0, 80044e0 <_printf_float+0xc4>
 8004492:	2200      	movs	r2, #0
 8004494:	2300      	movs	r3, #0
 8004496:	4640      	mov	r0, r8
 8004498:	4649      	mov	r1, r9
 800449a:	f7fc fb27 	bl	8000aec <__aeabi_dcmplt>
 800449e:	b110      	cbz	r0, 80044a6 <_printf_float+0x8a>
 80044a0:	232d      	movs	r3, #45	; 0x2d
 80044a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a6:	4a9c      	ldr	r2, [pc, #624]	; (8004718 <_printf_float+0x2fc>)
 80044a8:	4b9c      	ldr	r3, [pc, #624]	; (800471c <_printf_float+0x300>)
 80044aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80044ae:	bf8c      	ite	hi
 80044b0:	4690      	movhi	r8, r2
 80044b2:	4698      	movls	r8, r3
 80044b4:	2303      	movs	r3, #3
 80044b6:	f02b 0204 	bic.w	r2, fp, #4
 80044ba:	6123      	str	r3, [r4, #16]
 80044bc:	6022      	str	r2, [r4, #0]
 80044be:	f04f 0900 	mov.w	r9, #0
 80044c2:	9700      	str	r7, [sp, #0]
 80044c4:	4633      	mov	r3, r6
 80044c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f9e6 	bl	800489c <_printf_common>
 80044d0:	3001      	adds	r0, #1
 80044d2:	f040 808d 	bne.w	80045f0 <_printf_float+0x1d4>
 80044d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044da:	b00d      	add	sp, #52	; 0x34
 80044dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	4640      	mov	r0, r8
 80044e6:	4649      	mov	r1, r9
 80044e8:	f7fc fb28 	bl	8000b3c <__aeabi_dcmpun>
 80044ec:	b110      	cbz	r0, 80044f4 <_printf_float+0xd8>
 80044ee:	4a8c      	ldr	r2, [pc, #560]	; (8004720 <_printf_float+0x304>)
 80044f0:	4b8c      	ldr	r3, [pc, #560]	; (8004724 <_printf_float+0x308>)
 80044f2:	e7da      	b.n	80044aa <_printf_float+0x8e>
 80044f4:	6861      	ldr	r1, [r4, #4]
 80044f6:	1c4b      	adds	r3, r1, #1
 80044f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80044fc:	a80a      	add	r0, sp, #40	; 0x28
 80044fe:	d13e      	bne.n	800457e <_printf_float+0x162>
 8004500:	2306      	movs	r3, #6
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	2300      	movs	r3, #0
 8004506:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800450a:	ab09      	add	r3, sp, #36	; 0x24
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	ec49 8b10 	vmov	d0, r8, r9
 8004512:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004516:	6022      	str	r2, [r4, #0]
 8004518:	f8cd a004 	str.w	sl, [sp, #4]
 800451c:	6861      	ldr	r1, [r4, #4]
 800451e:	4628      	mov	r0, r5
 8004520:	f7ff fee7 	bl	80042f2 <__cvt>
 8004524:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004528:	2b47      	cmp	r3, #71	; 0x47
 800452a:	4680      	mov	r8, r0
 800452c:	d109      	bne.n	8004542 <_printf_float+0x126>
 800452e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004530:	1cd8      	adds	r0, r3, #3
 8004532:	db02      	blt.n	800453a <_printf_float+0x11e>
 8004534:	6862      	ldr	r2, [r4, #4]
 8004536:	4293      	cmp	r3, r2
 8004538:	dd47      	ble.n	80045ca <_printf_float+0x1ae>
 800453a:	f1aa 0a02 	sub.w	sl, sl, #2
 800453e:	fa5f fa8a 	uxtb.w	sl, sl
 8004542:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004546:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004548:	d824      	bhi.n	8004594 <_printf_float+0x178>
 800454a:	3901      	subs	r1, #1
 800454c:	4652      	mov	r2, sl
 800454e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004552:	9109      	str	r1, [sp, #36]	; 0x24
 8004554:	f7ff ff2e 	bl	80043b4 <__exponent>
 8004558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800455a:	1813      	adds	r3, r2, r0
 800455c:	2a01      	cmp	r2, #1
 800455e:	4681      	mov	r9, r0
 8004560:	6123      	str	r3, [r4, #16]
 8004562:	dc02      	bgt.n	800456a <_printf_float+0x14e>
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	07d1      	lsls	r1, r2, #31
 8004568:	d501      	bpl.n	800456e <_printf_float+0x152>
 800456a:	3301      	adds	r3, #1
 800456c:	6123      	str	r3, [r4, #16]
 800456e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0a5      	beq.n	80044c2 <_printf_float+0xa6>
 8004576:	232d      	movs	r3, #45	; 0x2d
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457c:	e7a1      	b.n	80044c2 <_printf_float+0xa6>
 800457e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004582:	f000 8177 	beq.w	8004874 <_printf_float+0x458>
 8004586:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800458a:	d1bb      	bne.n	8004504 <_printf_float+0xe8>
 800458c:	2900      	cmp	r1, #0
 800458e:	d1b9      	bne.n	8004504 <_printf_float+0xe8>
 8004590:	2301      	movs	r3, #1
 8004592:	e7b6      	b.n	8004502 <_printf_float+0xe6>
 8004594:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004598:	d119      	bne.n	80045ce <_printf_float+0x1b2>
 800459a:	2900      	cmp	r1, #0
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	dd0c      	ble.n	80045ba <_printf_float+0x19e>
 80045a0:	6121      	str	r1, [r4, #16]
 80045a2:	b913      	cbnz	r3, 80045aa <_printf_float+0x18e>
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	07d2      	lsls	r2, r2, #31
 80045a8:	d502      	bpl.n	80045b0 <_printf_float+0x194>
 80045aa:	3301      	adds	r3, #1
 80045ac:	440b      	add	r3, r1
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80045b4:	f04f 0900 	mov.w	r9, #0
 80045b8:	e7d9      	b.n	800456e <_printf_float+0x152>
 80045ba:	b913      	cbnz	r3, 80045c2 <_printf_float+0x1a6>
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	07d0      	lsls	r0, r2, #31
 80045c0:	d501      	bpl.n	80045c6 <_printf_float+0x1aa>
 80045c2:	3302      	adds	r3, #2
 80045c4:	e7f3      	b.n	80045ae <_printf_float+0x192>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e7f1      	b.n	80045ae <_printf_float+0x192>
 80045ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80045ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045d2:	4293      	cmp	r3, r2
 80045d4:	db05      	blt.n	80045e2 <_printf_float+0x1c6>
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	07d1      	lsls	r1, r2, #31
 80045dc:	d5e8      	bpl.n	80045b0 <_printf_float+0x194>
 80045de:	3301      	adds	r3, #1
 80045e0:	e7e5      	b.n	80045ae <_printf_float+0x192>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bfd4      	ite	le
 80045e6:	f1c3 0302 	rsble	r3, r3, #2
 80045ea:	2301      	movgt	r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	e7de      	b.n	80045ae <_printf_float+0x192>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	055a      	lsls	r2, r3, #21
 80045f4:	d407      	bmi.n	8004606 <_printf_float+0x1ea>
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	4642      	mov	r2, r8
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b8      	blx	r7
 8004600:	3001      	adds	r0, #1
 8004602:	d12b      	bne.n	800465c <_printf_float+0x240>
 8004604:	e767      	b.n	80044d6 <_printf_float+0xba>
 8004606:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800460a:	f240 80dc 	bls.w	80047c6 <_printf_float+0x3aa>
 800460e:	2200      	movs	r2, #0
 8004610:	2300      	movs	r3, #0
 8004612:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004616:	f7fc fa5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800461a:	2800      	cmp	r0, #0
 800461c:	d033      	beq.n	8004686 <_printf_float+0x26a>
 800461e:	2301      	movs	r3, #1
 8004620:	4a41      	ldr	r2, [pc, #260]	; (8004728 <_printf_float+0x30c>)
 8004622:	4631      	mov	r1, r6
 8004624:	4628      	mov	r0, r5
 8004626:	47b8      	blx	r7
 8004628:	3001      	adds	r0, #1
 800462a:	f43f af54 	beq.w	80044d6 <_printf_float+0xba>
 800462e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004632:	429a      	cmp	r2, r3
 8004634:	db02      	blt.n	800463c <_printf_float+0x220>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	07d8      	lsls	r0, r3, #31
 800463a:	d50f      	bpl.n	800465c <_printf_float+0x240>
 800463c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f af45 	beq.w	80044d6 <_printf_float+0xba>
 800464c:	f04f 0800 	mov.w	r8, #0
 8004650:	f104 091a 	add.w	r9, r4, #26
 8004654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004656:	3b01      	subs	r3, #1
 8004658:	4543      	cmp	r3, r8
 800465a:	dc09      	bgt.n	8004670 <_printf_float+0x254>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	079b      	lsls	r3, r3, #30
 8004660:	f100 8103 	bmi.w	800486a <_printf_float+0x44e>
 8004664:	68e0      	ldr	r0, [r4, #12]
 8004666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004668:	4298      	cmp	r0, r3
 800466a:	bfb8      	it	lt
 800466c:	4618      	movlt	r0, r3
 800466e:	e734      	b.n	80044da <_printf_float+0xbe>
 8004670:	2301      	movs	r3, #1
 8004672:	464a      	mov	r2, r9
 8004674:	4631      	mov	r1, r6
 8004676:	4628      	mov	r0, r5
 8004678:	47b8      	blx	r7
 800467a:	3001      	adds	r0, #1
 800467c:	f43f af2b 	beq.w	80044d6 <_printf_float+0xba>
 8004680:	f108 0801 	add.w	r8, r8, #1
 8004684:	e7e6      	b.n	8004654 <_printf_float+0x238>
 8004686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	dc2b      	bgt.n	80046e4 <_printf_float+0x2c8>
 800468c:	2301      	movs	r3, #1
 800468e:	4a26      	ldr	r2, [pc, #152]	; (8004728 <_printf_float+0x30c>)
 8004690:	4631      	mov	r1, r6
 8004692:	4628      	mov	r0, r5
 8004694:	47b8      	blx	r7
 8004696:	3001      	adds	r0, #1
 8004698:	f43f af1d 	beq.w	80044d6 <_printf_float+0xba>
 800469c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469e:	b923      	cbnz	r3, 80046aa <_printf_float+0x28e>
 80046a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a2:	b913      	cbnz	r3, 80046aa <_printf_float+0x28e>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	07d9      	lsls	r1, r3, #31
 80046a8:	d5d8      	bpl.n	800465c <_printf_float+0x240>
 80046aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	f43f af0e 	beq.w	80044d6 <_printf_float+0xba>
 80046ba:	f04f 0900 	mov.w	r9, #0
 80046be:	f104 0a1a 	add.w	sl, r4, #26
 80046c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c4:	425b      	negs	r3, r3
 80046c6:	454b      	cmp	r3, r9
 80046c8:	dc01      	bgt.n	80046ce <_printf_float+0x2b2>
 80046ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046cc:	e794      	b.n	80045f8 <_printf_float+0x1dc>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4631      	mov	r1, r6
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b8      	blx	r7
 80046d8:	3001      	adds	r0, #1
 80046da:	f43f aefc 	beq.w	80044d6 <_printf_float+0xba>
 80046de:	f109 0901 	add.w	r9, r9, #1
 80046e2:	e7ee      	b.n	80046c2 <_printf_float+0x2a6>
 80046e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046e8:	429a      	cmp	r2, r3
 80046ea:	bfa8      	it	ge
 80046ec:	461a      	movge	r2, r3
 80046ee:	2a00      	cmp	r2, #0
 80046f0:	4691      	mov	r9, r2
 80046f2:	dd07      	ble.n	8004704 <_printf_float+0x2e8>
 80046f4:	4613      	mov	r3, r2
 80046f6:	4631      	mov	r1, r6
 80046f8:	4642      	mov	r2, r8
 80046fa:	4628      	mov	r0, r5
 80046fc:	47b8      	blx	r7
 80046fe:	3001      	adds	r0, #1
 8004700:	f43f aee9 	beq.w	80044d6 <_printf_float+0xba>
 8004704:	f104 031a 	add.w	r3, r4, #26
 8004708:	f04f 0b00 	mov.w	fp, #0
 800470c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004710:	9306      	str	r3, [sp, #24]
 8004712:	e015      	b.n	8004740 <_printf_float+0x324>
 8004714:	7fefffff 	.word	0x7fefffff
 8004718:	08007594 	.word	0x08007594
 800471c:	08007590 	.word	0x08007590
 8004720:	0800759c 	.word	0x0800759c
 8004724:	08007598 	.word	0x08007598
 8004728:	080075a0 	.word	0x080075a0
 800472c:	2301      	movs	r3, #1
 800472e:	9a06      	ldr	r2, [sp, #24]
 8004730:	4631      	mov	r1, r6
 8004732:	4628      	mov	r0, r5
 8004734:	47b8      	blx	r7
 8004736:	3001      	adds	r0, #1
 8004738:	f43f aecd 	beq.w	80044d6 <_printf_float+0xba>
 800473c:	f10b 0b01 	add.w	fp, fp, #1
 8004740:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004744:	ebaa 0309 	sub.w	r3, sl, r9
 8004748:	455b      	cmp	r3, fp
 800474a:	dcef      	bgt.n	800472c <_printf_float+0x310>
 800474c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004750:	429a      	cmp	r2, r3
 8004752:	44d0      	add	r8, sl
 8004754:	db15      	blt.n	8004782 <_printf_float+0x366>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	07da      	lsls	r2, r3, #31
 800475a:	d412      	bmi.n	8004782 <_printf_float+0x366>
 800475c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800475e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004760:	eba3 020a 	sub.w	r2, r3, sl
 8004764:	eba3 0a01 	sub.w	sl, r3, r1
 8004768:	4592      	cmp	sl, r2
 800476a:	bfa8      	it	ge
 800476c:	4692      	movge	sl, r2
 800476e:	f1ba 0f00 	cmp.w	sl, #0
 8004772:	dc0e      	bgt.n	8004792 <_printf_float+0x376>
 8004774:	f04f 0800 	mov.w	r8, #0
 8004778:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800477c:	f104 091a 	add.w	r9, r4, #26
 8004780:	e019      	b.n	80047b6 <_printf_float+0x39a>
 8004782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004786:	4631      	mov	r1, r6
 8004788:	4628      	mov	r0, r5
 800478a:	47b8      	blx	r7
 800478c:	3001      	adds	r0, #1
 800478e:	d1e5      	bne.n	800475c <_printf_float+0x340>
 8004790:	e6a1      	b.n	80044d6 <_printf_float+0xba>
 8004792:	4653      	mov	r3, sl
 8004794:	4642      	mov	r2, r8
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	d1e9      	bne.n	8004774 <_printf_float+0x358>
 80047a0:	e699      	b.n	80044d6 <_printf_float+0xba>
 80047a2:	2301      	movs	r3, #1
 80047a4:	464a      	mov	r2, r9
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	f43f ae92 	beq.w	80044d6 <_printf_float+0xba>
 80047b2:	f108 0801 	add.w	r8, r8, #1
 80047b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	eba3 030a 	sub.w	r3, r3, sl
 80047c0:	4543      	cmp	r3, r8
 80047c2:	dcee      	bgt.n	80047a2 <_printf_float+0x386>
 80047c4:	e74a      	b.n	800465c <_printf_float+0x240>
 80047c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047c8:	2a01      	cmp	r2, #1
 80047ca:	dc01      	bgt.n	80047d0 <_printf_float+0x3b4>
 80047cc:	07db      	lsls	r3, r3, #31
 80047ce:	d53a      	bpl.n	8004846 <_printf_float+0x42a>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4642      	mov	r2, r8
 80047d4:	4631      	mov	r1, r6
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	f43f ae7b 	beq.w	80044d6 <_printf_float+0xba>
 80047e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	f108 0801 	add.w	r8, r8, #1
 80047f0:	f43f ae71 	beq.w	80044d6 <_printf_float+0xba>
 80047f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f6:	2200      	movs	r2, #0
 80047f8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80047fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004800:	2300      	movs	r3, #0
 8004802:	f7fc f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8004806:	b9c8      	cbnz	r0, 800483c <_printf_float+0x420>
 8004808:	4653      	mov	r3, sl
 800480a:	4642      	mov	r2, r8
 800480c:	4631      	mov	r1, r6
 800480e:	4628      	mov	r0, r5
 8004810:	47b8      	blx	r7
 8004812:	3001      	adds	r0, #1
 8004814:	d10e      	bne.n	8004834 <_printf_float+0x418>
 8004816:	e65e      	b.n	80044d6 <_printf_float+0xba>
 8004818:	2301      	movs	r3, #1
 800481a:	4652      	mov	r2, sl
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	f43f ae57 	beq.w	80044d6 <_printf_float+0xba>
 8004828:	f108 0801 	add.w	r8, r8, #1
 800482c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800482e:	3b01      	subs	r3, #1
 8004830:	4543      	cmp	r3, r8
 8004832:	dcf1      	bgt.n	8004818 <_printf_float+0x3fc>
 8004834:	464b      	mov	r3, r9
 8004836:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800483a:	e6de      	b.n	80045fa <_printf_float+0x1de>
 800483c:	f04f 0800 	mov.w	r8, #0
 8004840:	f104 0a1a 	add.w	sl, r4, #26
 8004844:	e7f2      	b.n	800482c <_printf_float+0x410>
 8004846:	2301      	movs	r3, #1
 8004848:	e7df      	b.n	800480a <_printf_float+0x3ee>
 800484a:	2301      	movs	r3, #1
 800484c:	464a      	mov	r2, r9
 800484e:	4631      	mov	r1, r6
 8004850:	4628      	mov	r0, r5
 8004852:	47b8      	blx	r7
 8004854:	3001      	adds	r0, #1
 8004856:	f43f ae3e 	beq.w	80044d6 <_printf_float+0xba>
 800485a:	f108 0801 	add.w	r8, r8, #1
 800485e:	68e3      	ldr	r3, [r4, #12]
 8004860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	4543      	cmp	r3, r8
 8004866:	dcf0      	bgt.n	800484a <_printf_float+0x42e>
 8004868:	e6fc      	b.n	8004664 <_printf_float+0x248>
 800486a:	f04f 0800 	mov.w	r8, #0
 800486e:	f104 0919 	add.w	r9, r4, #25
 8004872:	e7f4      	b.n	800485e <_printf_float+0x442>
 8004874:	2900      	cmp	r1, #0
 8004876:	f43f ae8b 	beq.w	8004590 <_printf_float+0x174>
 800487a:	2300      	movs	r3, #0
 800487c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004880:	ab09      	add	r3, sp, #36	; 0x24
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	ec49 8b10 	vmov	d0, r8, r9
 8004888:	6022      	str	r2, [r4, #0]
 800488a:	f8cd a004 	str.w	sl, [sp, #4]
 800488e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004892:	4628      	mov	r0, r5
 8004894:	f7ff fd2d 	bl	80042f2 <__cvt>
 8004898:	4680      	mov	r8, r0
 800489a:	e648      	b.n	800452e <_printf_float+0x112>

0800489c <_printf_common>:
 800489c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a0:	4691      	mov	r9, r2
 80048a2:	461f      	mov	r7, r3
 80048a4:	688a      	ldr	r2, [r1, #8]
 80048a6:	690b      	ldr	r3, [r1, #16]
 80048a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048ac:	4293      	cmp	r3, r2
 80048ae:	bfb8      	it	lt
 80048b0:	4613      	movlt	r3, r2
 80048b2:	f8c9 3000 	str.w	r3, [r9]
 80048b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048ba:	4606      	mov	r6, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	b112      	cbz	r2, 80048c6 <_printf_common+0x2a>
 80048c0:	3301      	adds	r3, #1
 80048c2:	f8c9 3000 	str.w	r3, [r9]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	0699      	lsls	r1, r3, #26
 80048ca:	bf42      	ittt	mi
 80048cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048d0:	3302      	addmi	r3, #2
 80048d2:	f8c9 3000 	strmi.w	r3, [r9]
 80048d6:	6825      	ldr	r5, [r4, #0]
 80048d8:	f015 0506 	ands.w	r5, r5, #6
 80048dc:	d107      	bne.n	80048ee <_printf_common+0x52>
 80048de:	f104 0a19 	add.w	sl, r4, #25
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	f8d9 2000 	ldr.w	r2, [r9]
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	42ab      	cmp	r3, r5
 80048ec:	dc28      	bgt.n	8004940 <_printf_common+0xa4>
 80048ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	3300      	adds	r3, #0
 80048f6:	bf18      	it	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	0692      	lsls	r2, r2, #26
 80048fc:	d42d      	bmi.n	800495a <_printf_common+0xbe>
 80048fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004902:	4639      	mov	r1, r7
 8004904:	4630      	mov	r0, r6
 8004906:	47c0      	blx	r8
 8004908:	3001      	adds	r0, #1
 800490a:	d020      	beq.n	800494e <_printf_common+0xb2>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	68e5      	ldr	r5, [r4, #12]
 8004910:	f8d9 2000 	ldr.w	r2, [r9]
 8004914:	f003 0306 	and.w	r3, r3, #6
 8004918:	2b04      	cmp	r3, #4
 800491a:	bf08      	it	eq
 800491c:	1aad      	subeq	r5, r5, r2
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	bf0c      	ite	eq
 8004924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004928:	2500      	movne	r5, #0
 800492a:	4293      	cmp	r3, r2
 800492c:	bfc4      	itt	gt
 800492e:	1a9b      	subgt	r3, r3, r2
 8004930:	18ed      	addgt	r5, r5, r3
 8004932:	f04f 0900 	mov.w	r9, #0
 8004936:	341a      	adds	r4, #26
 8004938:	454d      	cmp	r5, r9
 800493a:	d11a      	bne.n	8004972 <_printf_common+0xd6>
 800493c:	2000      	movs	r0, #0
 800493e:	e008      	b.n	8004952 <_printf_common+0xb6>
 8004940:	2301      	movs	r3, #1
 8004942:	4652      	mov	r2, sl
 8004944:	4639      	mov	r1, r7
 8004946:	4630      	mov	r0, r6
 8004948:	47c0      	blx	r8
 800494a:	3001      	adds	r0, #1
 800494c:	d103      	bne.n	8004956 <_printf_common+0xba>
 800494e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004956:	3501      	adds	r5, #1
 8004958:	e7c3      	b.n	80048e2 <_printf_common+0x46>
 800495a:	18e1      	adds	r1, r4, r3
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	2030      	movs	r0, #48	; 0x30
 8004960:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004964:	4422      	add	r2, r4
 8004966:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800496a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800496e:	3302      	adds	r3, #2
 8004970:	e7c5      	b.n	80048fe <_printf_common+0x62>
 8004972:	2301      	movs	r3, #1
 8004974:	4622      	mov	r2, r4
 8004976:	4639      	mov	r1, r7
 8004978:	4630      	mov	r0, r6
 800497a:	47c0      	blx	r8
 800497c:	3001      	adds	r0, #1
 800497e:	d0e6      	beq.n	800494e <_printf_common+0xb2>
 8004980:	f109 0901 	add.w	r9, r9, #1
 8004984:	e7d8      	b.n	8004938 <_printf_common+0x9c>
	...

08004988 <_printf_i>:
 8004988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800498c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004990:	460c      	mov	r4, r1
 8004992:	7e09      	ldrb	r1, [r1, #24]
 8004994:	b085      	sub	sp, #20
 8004996:	296e      	cmp	r1, #110	; 0x6e
 8004998:	4617      	mov	r7, r2
 800499a:	4606      	mov	r6, r0
 800499c:	4698      	mov	r8, r3
 800499e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049a0:	f000 80b3 	beq.w	8004b0a <_printf_i+0x182>
 80049a4:	d822      	bhi.n	80049ec <_printf_i+0x64>
 80049a6:	2963      	cmp	r1, #99	; 0x63
 80049a8:	d036      	beq.n	8004a18 <_printf_i+0x90>
 80049aa:	d80a      	bhi.n	80049c2 <_printf_i+0x3a>
 80049ac:	2900      	cmp	r1, #0
 80049ae:	f000 80b9 	beq.w	8004b24 <_printf_i+0x19c>
 80049b2:	2958      	cmp	r1, #88	; 0x58
 80049b4:	f000 8083 	beq.w	8004abe <_printf_i+0x136>
 80049b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049c0:	e032      	b.n	8004a28 <_printf_i+0xa0>
 80049c2:	2964      	cmp	r1, #100	; 0x64
 80049c4:	d001      	beq.n	80049ca <_printf_i+0x42>
 80049c6:	2969      	cmp	r1, #105	; 0x69
 80049c8:	d1f6      	bne.n	80049b8 <_printf_i+0x30>
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	0605      	lsls	r5, r0, #24
 80049d0:	f103 0104 	add.w	r1, r3, #4
 80049d4:	d52a      	bpl.n	8004a2c <_printf_i+0xa4>
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6011      	str	r1, [r2, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da03      	bge.n	80049e6 <_printf_i+0x5e>
 80049de:	222d      	movs	r2, #45	; 0x2d
 80049e0:	425b      	negs	r3, r3
 80049e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049e6:	486f      	ldr	r0, [pc, #444]	; (8004ba4 <_printf_i+0x21c>)
 80049e8:	220a      	movs	r2, #10
 80049ea:	e039      	b.n	8004a60 <_printf_i+0xd8>
 80049ec:	2973      	cmp	r1, #115	; 0x73
 80049ee:	f000 809d 	beq.w	8004b2c <_printf_i+0x1a4>
 80049f2:	d808      	bhi.n	8004a06 <_printf_i+0x7e>
 80049f4:	296f      	cmp	r1, #111	; 0x6f
 80049f6:	d020      	beq.n	8004a3a <_printf_i+0xb2>
 80049f8:	2970      	cmp	r1, #112	; 0x70
 80049fa:	d1dd      	bne.n	80049b8 <_printf_i+0x30>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	f043 0320 	orr.w	r3, r3, #32
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	e003      	b.n	8004a0e <_printf_i+0x86>
 8004a06:	2975      	cmp	r1, #117	; 0x75
 8004a08:	d017      	beq.n	8004a3a <_printf_i+0xb2>
 8004a0a:	2978      	cmp	r1, #120	; 0x78
 8004a0c:	d1d4      	bne.n	80049b8 <_printf_i+0x30>
 8004a0e:	2378      	movs	r3, #120	; 0x78
 8004a10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a14:	4864      	ldr	r0, [pc, #400]	; (8004ba8 <_printf_i+0x220>)
 8004a16:	e055      	b.n	8004ac4 <_printf_i+0x13c>
 8004a18:	6813      	ldr	r3, [r2, #0]
 8004a1a:	1d19      	adds	r1, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6011      	str	r1, [r2, #0]
 8004a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e08c      	b.n	8004b46 <_printf_i+0x1be>
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6011      	str	r1, [r2, #0]
 8004a30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a34:	bf18      	it	ne
 8004a36:	b21b      	sxthne	r3, r3
 8004a38:	e7cf      	b.n	80049da <_printf_i+0x52>
 8004a3a:	6813      	ldr	r3, [r2, #0]
 8004a3c:	6825      	ldr	r5, [r4, #0]
 8004a3e:	1d18      	adds	r0, r3, #4
 8004a40:	6010      	str	r0, [r2, #0]
 8004a42:	0628      	lsls	r0, r5, #24
 8004a44:	d501      	bpl.n	8004a4a <_printf_i+0xc2>
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	e002      	b.n	8004a50 <_printf_i+0xc8>
 8004a4a:	0668      	lsls	r0, r5, #25
 8004a4c:	d5fb      	bpl.n	8004a46 <_printf_i+0xbe>
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	4854      	ldr	r0, [pc, #336]	; (8004ba4 <_printf_i+0x21c>)
 8004a52:	296f      	cmp	r1, #111	; 0x6f
 8004a54:	bf14      	ite	ne
 8004a56:	220a      	movne	r2, #10
 8004a58:	2208      	moveq	r2, #8
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a60:	6865      	ldr	r5, [r4, #4]
 8004a62:	60a5      	str	r5, [r4, #8]
 8004a64:	2d00      	cmp	r5, #0
 8004a66:	f2c0 8095 	blt.w	8004b94 <_printf_i+0x20c>
 8004a6a:	6821      	ldr	r1, [r4, #0]
 8004a6c:	f021 0104 	bic.w	r1, r1, #4
 8004a70:	6021      	str	r1, [r4, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d13d      	bne.n	8004af2 <_printf_i+0x16a>
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	f040 808e 	bne.w	8004b98 <_printf_i+0x210>
 8004a7c:	4665      	mov	r5, ip
 8004a7e:	2a08      	cmp	r2, #8
 8004a80:	d10b      	bne.n	8004a9a <_printf_i+0x112>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	07db      	lsls	r3, r3, #31
 8004a86:	d508      	bpl.n	8004a9a <_printf_i+0x112>
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	6862      	ldr	r2, [r4, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	bfde      	ittt	le
 8004a90:	2330      	movle	r3, #48	; 0x30
 8004a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a9a:	ebac 0305 	sub.w	r3, ip, r5
 8004a9e:	6123      	str	r3, [r4, #16]
 8004aa0:	f8cd 8000 	str.w	r8, [sp]
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	aa03      	add	r2, sp, #12
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff fef6 	bl	800489c <_printf_common>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d14d      	bne.n	8004b50 <_printf_i+0x1c8>
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab8:	b005      	add	sp, #20
 8004aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004abe:	4839      	ldr	r0, [pc, #228]	; (8004ba4 <_printf_i+0x21c>)
 8004ac0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ac4:	6813      	ldr	r3, [r2, #0]
 8004ac6:	6821      	ldr	r1, [r4, #0]
 8004ac8:	1d1d      	adds	r5, r3, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6015      	str	r5, [r2, #0]
 8004ace:	060a      	lsls	r2, r1, #24
 8004ad0:	d50b      	bpl.n	8004aea <_printf_i+0x162>
 8004ad2:	07ca      	lsls	r2, r1, #31
 8004ad4:	bf44      	itt	mi
 8004ad6:	f041 0120 	orrmi.w	r1, r1, #32
 8004ada:	6021      	strmi	r1, [r4, #0]
 8004adc:	b91b      	cbnz	r3, 8004ae6 <_printf_i+0x15e>
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	f022 0220 	bic.w	r2, r2, #32
 8004ae4:	6022      	str	r2, [r4, #0]
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	e7b7      	b.n	8004a5a <_printf_i+0xd2>
 8004aea:	064d      	lsls	r5, r1, #25
 8004aec:	bf48      	it	mi
 8004aee:	b29b      	uxthmi	r3, r3
 8004af0:	e7ef      	b.n	8004ad2 <_printf_i+0x14a>
 8004af2:	4665      	mov	r5, ip
 8004af4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004af8:	fb02 3311 	mls	r3, r2, r1, r3
 8004afc:	5cc3      	ldrb	r3, [r0, r3]
 8004afe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b02:	460b      	mov	r3, r1
 8004b04:	2900      	cmp	r1, #0
 8004b06:	d1f5      	bne.n	8004af4 <_printf_i+0x16c>
 8004b08:	e7b9      	b.n	8004a7e <_printf_i+0xf6>
 8004b0a:	6813      	ldr	r3, [r2, #0]
 8004b0c:	6825      	ldr	r5, [r4, #0]
 8004b0e:	6961      	ldr	r1, [r4, #20]
 8004b10:	1d18      	adds	r0, r3, #4
 8004b12:	6010      	str	r0, [r2, #0]
 8004b14:	0628      	lsls	r0, r5, #24
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	d501      	bpl.n	8004b1e <_printf_i+0x196>
 8004b1a:	6019      	str	r1, [r3, #0]
 8004b1c:	e002      	b.n	8004b24 <_printf_i+0x19c>
 8004b1e:	066a      	lsls	r2, r5, #25
 8004b20:	d5fb      	bpl.n	8004b1a <_printf_i+0x192>
 8004b22:	8019      	strh	r1, [r3, #0]
 8004b24:	2300      	movs	r3, #0
 8004b26:	6123      	str	r3, [r4, #16]
 8004b28:	4665      	mov	r5, ip
 8004b2a:	e7b9      	b.n	8004aa0 <_printf_i+0x118>
 8004b2c:	6813      	ldr	r3, [r2, #0]
 8004b2e:	1d19      	adds	r1, r3, #4
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	681d      	ldr	r5, [r3, #0]
 8004b34:	6862      	ldr	r2, [r4, #4]
 8004b36:	2100      	movs	r1, #0
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f7fb fb59 	bl	80001f0 <memchr>
 8004b3e:	b108      	cbz	r0, 8004b44 <_printf_i+0x1bc>
 8004b40:	1b40      	subs	r0, r0, r5
 8004b42:	6060      	str	r0, [r4, #4]
 8004b44:	6863      	ldr	r3, [r4, #4]
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b4e:	e7a7      	b.n	8004aa0 <_printf_i+0x118>
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	462a      	mov	r2, r5
 8004b54:	4639      	mov	r1, r7
 8004b56:	4630      	mov	r0, r6
 8004b58:	47c0      	blx	r8
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d0aa      	beq.n	8004ab4 <_printf_i+0x12c>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	079b      	lsls	r3, r3, #30
 8004b62:	d413      	bmi.n	8004b8c <_printf_i+0x204>
 8004b64:	68e0      	ldr	r0, [r4, #12]
 8004b66:	9b03      	ldr	r3, [sp, #12]
 8004b68:	4298      	cmp	r0, r3
 8004b6a:	bfb8      	it	lt
 8004b6c:	4618      	movlt	r0, r3
 8004b6e:	e7a3      	b.n	8004ab8 <_printf_i+0x130>
 8004b70:	2301      	movs	r3, #1
 8004b72:	464a      	mov	r2, r9
 8004b74:	4639      	mov	r1, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	47c0      	blx	r8
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d09a      	beq.n	8004ab4 <_printf_i+0x12c>
 8004b7e:	3501      	adds	r5, #1
 8004b80:	68e3      	ldr	r3, [r4, #12]
 8004b82:	9a03      	ldr	r2, [sp, #12]
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	42ab      	cmp	r3, r5
 8004b88:	dcf2      	bgt.n	8004b70 <_printf_i+0x1e8>
 8004b8a:	e7eb      	b.n	8004b64 <_printf_i+0x1dc>
 8004b8c:	2500      	movs	r5, #0
 8004b8e:	f104 0919 	add.w	r9, r4, #25
 8004b92:	e7f5      	b.n	8004b80 <_printf_i+0x1f8>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ac      	bne.n	8004af2 <_printf_i+0x16a>
 8004b98:	7803      	ldrb	r3, [r0, #0]
 8004b9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba2:	e76c      	b.n	8004a7e <_printf_i+0xf6>
 8004ba4:	080075a2 	.word	0x080075a2
 8004ba8:	080075b3 	.word	0x080075b3

08004bac <siprintf>:
 8004bac:	b40e      	push	{r1, r2, r3}
 8004bae:	b500      	push	{lr}
 8004bb0:	b09c      	sub	sp, #112	; 0x70
 8004bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bb4:	9002      	str	r0, [sp, #8]
 8004bb6:	9006      	str	r0, [sp, #24]
 8004bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bbc:	4809      	ldr	r0, [pc, #36]	; (8004be4 <siprintf+0x38>)
 8004bbe:	9107      	str	r1, [sp, #28]
 8004bc0:	9104      	str	r1, [sp, #16]
 8004bc2:	4909      	ldr	r1, [pc, #36]	; (8004be8 <siprintf+0x3c>)
 8004bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bc8:	9105      	str	r1, [sp, #20]
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	a902      	add	r1, sp, #8
 8004bd0:	f001 fa54 	bl	800607c <_svfiprintf_r>
 8004bd4:	9b02      	ldr	r3, [sp, #8]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	b01c      	add	sp, #112	; 0x70
 8004bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be0:	b003      	add	sp, #12
 8004be2:	4770      	bx	lr
 8004be4:	20000010 	.word	0x20000010
 8004be8:	ffff0208 	.word	0xffff0208

08004bec <quorem>:
 8004bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	6903      	ldr	r3, [r0, #16]
 8004bf2:	690c      	ldr	r4, [r1, #16]
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	4680      	mov	r8, r0
 8004bf8:	f2c0 8082 	blt.w	8004d00 <quorem+0x114>
 8004bfc:	3c01      	subs	r4, #1
 8004bfe:	f101 0714 	add.w	r7, r1, #20
 8004c02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004c06:	f100 0614 	add.w	r6, r0, #20
 8004c0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c12:	eb06 030c 	add.w	r3, r6, ip
 8004c16:	3501      	adds	r5, #1
 8004c18:	eb07 090c 	add.w	r9, r7, ip
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c22:	b395      	cbz	r5, 8004c8a <quorem+0x9e>
 8004c24:	f04f 0a00 	mov.w	sl, #0
 8004c28:	4638      	mov	r0, r7
 8004c2a:	46b6      	mov	lr, r6
 8004c2c:	46d3      	mov	fp, sl
 8004c2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c32:	b293      	uxth	r3, r2
 8004c34:	fb05 a303 	mla	r3, r5, r3, sl
 8004c38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	ebab 0303 	sub.w	r3, fp, r3
 8004c42:	0c12      	lsrs	r2, r2, #16
 8004c44:	f8de b000 	ldr.w	fp, [lr]
 8004c48:	fb05 a202 	mla	r2, r5, r2, sl
 8004c4c:	fa13 f38b 	uxtah	r3, r3, fp
 8004c50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004c54:	fa1f fb82 	uxth.w	fp, r2
 8004c58:	f8de 2000 	ldr.w	r2, [lr]
 8004c5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c6a:	4581      	cmp	r9, r0
 8004c6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c70:	f84e 3b04 	str.w	r3, [lr], #4
 8004c74:	d2db      	bcs.n	8004c2e <quorem+0x42>
 8004c76:	f856 300c 	ldr.w	r3, [r6, ip]
 8004c7a:	b933      	cbnz	r3, 8004c8a <quorem+0x9e>
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	429e      	cmp	r6, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	d330      	bcc.n	8004ce8 <quorem+0xfc>
 8004c86:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f001 f820 	bl	8005cd0 <__mcmp>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	db25      	blt.n	8004ce0 <quorem+0xf4>
 8004c94:	3501      	adds	r5, #1
 8004c96:	4630      	mov	r0, r6
 8004c98:	f04f 0c00 	mov.w	ip, #0
 8004c9c:	f857 2b04 	ldr.w	r2, [r7], #4
 8004ca0:	f8d0 e000 	ldr.w	lr, [r0]
 8004ca4:	b293      	uxth	r3, r2
 8004ca6:	ebac 0303 	sub.w	r3, ip, r3
 8004caa:	0c12      	lsrs	r2, r2, #16
 8004cac:	fa13 f38e 	uxtah	r3, r3, lr
 8004cb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cbe:	45b9      	cmp	r9, r7
 8004cc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cc4:	f840 3b04 	str.w	r3, [r0], #4
 8004cc8:	d2e8      	bcs.n	8004c9c <quorem+0xb0>
 8004cca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004cce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004cd2:	b92a      	cbnz	r2, 8004ce0 <quorem+0xf4>
 8004cd4:	3b04      	subs	r3, #4
 8004cd6:	429e      	cmp	r6, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	d30b      	bcc.n	8004cf4 <quorem+0x108>
 8004cdc:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	b003      	add	sp, #12
 8004ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	3b04      	subs	r3, #4
 8004cec:	2a00      	cmp	r2, #0
 8004cee:	d1ca      	bne.n	8004c86 <quorem+0x9a>
 8004cf0:	3c01      	subs	r4, #1
 8004cf2:	e7c5      	b.n	8004c80 <quorem+0x94>
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	2a00      	cmp	r2, #0
 8004cfa:	d1ef      	bne.n	8004cdc <quorem+0xf0>
 8004cfc:	3c01      	subs	r4, #1
 8004cfe:	e7ea      	b.n	8004cd6 <quorem+0xea>
 8004d00:	2000      	movs	r0, #0
 8004d02:	e7ee      	b.n	8004ce2 <quorem+0xf6>
 8004d04:	0000      	movs	r0, r0
	...

08004d08 <_dtoa_r>:
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	ec57 6b10 	vmov	r6, r7, d0
 8004d10:	b097      	sub	sp, #92	; 0x5c
 8004d12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d14:	9106      	str	r1, [sp, #24]
 8004d16:	4604      	mov	r4, r0
 8004d18:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d1a:	9312      	str	r3, [sp, #72]	; 0x48
 8004d1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004d20:	e9cd 6700 	strd	r6, r7, [sp]
 8004d24:	b93d      	cbnz	r5, 8004d36 <_dtoa_r+0x2e>
 8004d26:	2010      	movs	r0, #16
 8004d28:	f000 fdb4 	bl	8005894 <malloc>
 8004d2c:	6260      	str	r0, [r4, #36]	; 0x24
 8004d2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d32:	6005      	str	r5, [r0, #0]
 8004d34:	60c5      	str	r5, [r0, #12]
 8004d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d38:	6819      	ldr	r1, [r3, #0]
 8004d3a:	b151      	cbz	r1, 8004d52 <_dtoa_r+0x4a>
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	604a      	str	r2, [r1, #4]
 8004d40:	2301      	movs	r3, #1
 8004d42:	4093      	lsls	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
 8004d46:	4620      	mov	r0, r4
 8004d48:	f000 fde0 	bl	800590c <_Bfree>
 8004d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	1e3b      	subs	r3, r7, #0
 8004d54:	bfbb      	ittet	lt
 8004d56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d5a:	9301      	strlt	r3, [sp, #4]
 8004d5c:	2300      	movge	r3, #0
 8004d5e:	2201      	movlt	r2, #1
 8004d60:	bfac      	ite	ge
 8004d62:	f8c8 3000 	strge.w	r3, [r8]
 8004d66:	f8c8 2000 	strlt.w	r2, [r8]
 8004d6a:	4baf      	ldr	r3, [pc, #700]	; (8005028 <_dtoa_r+0x320>)
 8004d6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d70:	ea33 0308 	bics.w	r3, r3, r8
 8004d74:	d114      	bne.n	8004da0 <_dtoa_r+0x98>
 8004d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d78:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	9b00      	ldr	r3, [sp, #0]
 8004d80:	b923      	cbnz	r3, 8004d8c <_dtoa_r+0x84>
 8004d82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d86:	2800      	cmp	r0, #0
 8004d88:	f000 8542 	beq.w	8005810 <_dtoa_r+0xb08>
 8004d8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800503c <_dtoa_r+0x334>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8544 	beq.w	8005820 <_dtoa_r+0xb18>
 8004d98:	f10b 0303 	add.w	r3, fp, #3
 8004d9c:	f000 bd3e 	b.w	800581c <_dtoa_r+0xb14>
 8004da0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2300      	movs	r3, #0
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f7fb fe94 	bl	8000ad8 <__aeabi_dcmpeq>
 8004db0:	4681      	mov	r9, r0
 8004db2:	b168      	cbz	r0, 8004dd0 <_dtoa_r+0xc8>
 8004db4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004db6:	2301      	movs	r3, #1
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8524 	beq.w	800580a <_dtoa_r+0xb02>
 8004dc2:	4b9a      	ldr	r3, [pc, #616]	; (800502c <_dtoa_r+0x324>)
 8004dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dc6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	f000 bd28 	b.w	8005820 <_dtoa_r+0xb18>
 8004dd0:	aa14      	add	r2, sp, #80	; 0x50
 8004dd2:	a915      	add	r1, sp, #84	; 0x54
 8004dd4:	ec47 6b10 	vmov	d0, r6, r7
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 fff0 	bl	8005dbe <__d2b>
 8004dde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004de2:	9004      	str	r0, [sp, #16]
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	d07c      	beq.n	8004ee2 <_dtoa_r+0x1da>
 8004de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004dec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004df0:	46b2      	mov	sl, r6
 8004df2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004df6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004dfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004dfe:	2200      	movs	r2, #0
 8004e00:	4b8b      	ldr	r3, [pc, #556]	; (8005030 <_dtoa_r+0x328>)
 8004e02:	4650      	mov	r0, sl
 8004e04:	4659      	mov	r1, fp
 8004e06:	f7fb fa47 	bl	8000298 <__aeabi_dsub>
 8004e0a:	a381      	add	r3, pc, #516	; (adr r3, 8005010 <_dtoa_r+0x308>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f7fb fbfa 	bl	8000608 <__aeabi_dmul>
 8004e14:	a380      	add	r3, pc, #512	; (adr r3, 8005018 <_dtoa_r+0x310>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fa3f 	bl	800029c <__adddf3>
 8004e1e:	4606      	mov	r6, r0
 8004e20:	4628      	mov	r0, r5
 8004e22:	460f      	mov	r7, r1
 8004e24:	f7fb fb86 	bl	8000534 <__aeabi_i2d>
 8004e28:	a37d      	add	r3, pc, #500	; (adr r3, 8005020 <_dtoa_r+0x318>)
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	f7fb fbeb 	bl	8000608 <__aeabi_dmul>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4630      	mov	r0, r6
 8004e38:	4639      	mov	r1, r7
 8004e3a:	f7fb fa2f 	bl	800029c <__adddf3>
 8004e3e:	4606      	mov	r6, r0
 8004e40:	460f      	mov	r7, r1
 8004e42:	f7fb fe91 	bl	8000b68 <__aeabi_d2iz>
 8004e46:	2200      	movs	r2, #0
 8004e48:	4682      	mov	sl, r0
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	4639      	mov	r1, r7
 8004e50:	f7fb fe4c 	bl	8000aec <__aeabi_dcmplt>
 8004e54:	b148      	cbz	r0, 8004e6a <_dtoa_r+0x162>
 8004e56:	4650      	mov	r0, sl
 8004e58:	f7fb fb6c 	bl	8000534 <__aeabi_i2d>
 8004e5c:	4632      	mov	r2, r6
 8004e5e:	463b      	mov	r3, r7
 8004e60:	f7fb fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e64:	b908      	cbnz	r0, 8004e6a <_dtoa_r+0x162>
 8004e66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e6a:	f1ba 0f16 	cmp.w	sl, #22
 8004e6e:	d859      	bhi.n	8004f24 <_dtoa_r+0x21c>
 8004e70:	4970      	ldr	r1, [pc, #448]	; (8005034 <_dtoa_r+0x32c>)
 8004e72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e7e:	f7fb fe53 	bl	8000b28 <__aeabi_dcmpgt>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d050      	beq.n	8004f28 <_dtoa_r+0x220>
 8004e86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e90:	1b5d      	subs	r5, r3, r5
 8004e92:	f1b5 0801 	subs.w	r8, r5, #1
 8004e96:	bf49      	itett	mi
 8004e98:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e9c:	2300      	movpl	r3, #0
 8004e9e:	9305      	strmi	r3, [sp, #20]
 8004ea0:	f04f 0800 	movmi.w	r8, #0
 8004ea4:	bf58      	it	pl
 8004ea6:	9305      	strpl	r3, [sp, #20]
 8004ea8:	f1ba 0f00 	cmp.w	sl, #0
 8004eac:	db3e      	blt.n	8004f2c <_dtoa_r+0x224>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	44d0      	add	r8, sl
 8004eb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004eb6:	9307      	str	r3, [sp, #28]
 8004eb8:	9b06      	ldr	r3, [sp, #24]
 8004eba:	2b09      	cmp	r3, #9
 8004ebc:	f200 8090 	bhi.w	8004fe0 <_dtoa_r+0x2d8>
 8004ec0:	2b05      	cmp	r3, #5
 8004ec2:	bfc4      	itt	gt
 8004ec4:	3b04      	subgt	r3, #4
 8004ec6:	9306      	strgt	r3, [sp, #24]
 8004ec8:	9b06      	ldr	r3, [sp, #24]
 8004eca:	f1a3 0302 	sub.w	r3, r3, #2
 8004ece:	bfcc      	ite	gt
 8004ed0:	2500      	movgt	r5, #0
 8004ed2:	2501      	movle	r5, #1
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	f200 808f 	bhi.w	8004ff8 <_dtoa_r+0x2f0>
 8004eda:	e8df f003 	tbb	[pc, r3]
 8004ede:	7f7d      	.short	0x7f7d
 8004ee0:	7131      	.short	0x7131
 8004ee2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004ee6:	441d      	add	r5, r3
 8004ee8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004eec:	2820      	cmp	r0, #32
 8004eee:	dd13      	ble.n	8004f18 <_dtoa_r+0x210>
 8004ef0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004ef4:	9b00      	ldr	r3, [sp, #0]
 8004ef6:	fa08 f800 	lsl.w	r8, r8, r0
 8004efa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004efe:	fa23 f000 	lsr.w	r0, r3, r0
 8004f02:	ea48 0000 	orr.w	r0, r8, r0
 8004f06:	f7fb fb05 	bl	8000514 <__aeabi_ui2d>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4682      	mov	sl, r0
 8004f0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004f12:	3d01      	subs	r5, #1
 8004f14:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f16:	e772      	b.n	8004dfe <_dtoa_r+0xf6>
 8004f18:	9b00      	ldr	r3, [sp, #0]
 8004f1a:	f1c0 0020 	rsb	r0, r0, #32
 8004f1e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f22:	e7f0      	b.n	8004f06 <_dtoa_r+0x1fe>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e7b1      	b.n	8004e8c <_dtoa_r+0x184>
 8004f28:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f2a:	e7b0      	b.n	8004e8e <_dtoa_r+0x186>
 8004f2c:	9b05      	ldr	r3, [sp, #20]
 8004f2e:	eba3 030a 	sub.w	r3, r3, sl
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	f1ca 0300 	rsb	r3, sl, #0
 8004f38:	9307      	str	r3, [sp, #28]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	930e      	str	r3, [sp, #56]	; 0x38
 8004f3e:	e7bb      	b.n	8004eb8 <_dtoa_r+0x1b0>
 8004f40:	2301      	movs	r3, #1
 8004f42:	930a      	str	r3, [sp, #40]	; 0x28
 8004f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	dd59      	ble.n	8004ffe <_dtoa_r+0x2f6>
 8004f4a:	9302      	str	r3, [sp, #8]
 8004f4c:	4699      	mov	r9, r3
 8004f4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f50:	2200      	movs	r2, #0
 8004f52:	6072      	str	r2, [r6, #4]
 8004f54:	2204      	movs	r2, #4
 8004f56:	f102 0014 	add.w	r0, r2, #20
 8004f5a:	4298      	cmp	r0, r3
 8004f5c:	6871      	ldr	r1, [r6, #4]
 8004f5e:	d953      	bls.n	8005008 <_dtoa_r+0x300>
 8004f60:	4620      	mov	r0, r4
 8004f62:	f000 fc9f 	bl	80058a4 <_Balloc>
 8004f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f68:	6030      	str	r0, [r6, #0]
 8004f6a:	f1b9 0f0e 	cmp.w	r9, #14
 8004f6e:	f8d3 b000 	ldr.w	fp, [r3]
 8004f72:	f200 80e6 	bhi.w	8005142 <_dtoa_r+0x43a>
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	f000 80e3 	beq.w	8005142 <_dtoa_r+0x43a>
 8004f7c:	ed9d 7b00 	vldr	d7, [sp]
 8004f80:	f1ba 0f00 	cmp.w	sl, #0
 8004f84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f88:	dd74      	ble.n	8005074 <_dtoa_r+0x36c>
 8004f8a:	4a2a      	ldr	r2, [pc, #168]	; (8005034 <_dtoa_r+0x32c>)
 8004f8c:	f00a 030f 	and.w	r3, sl, #15
 8004f90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f94:	ed93 7b00 	vldr	d7, [r3]
 8004f98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004f9c:	06f0      	lsls	r0, r6, #27
 8004f9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004fa2:	d565      	bpl.n	8005070 <_dtoa_r+0x368>
 8004fa4:	4b24      	ldr	r3, [pc, #144]	; (8005038 <_dtoa_r+0x330>)
 8004fa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004faa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fae:	f7fb fc55 	bl	800085c <__aeabi_ddiv>
 8004fb2:	e9cd 0100 	strd	r0, r1, [sp]
 8004fb6:	f006 060f 	and.w	r6, r6, #15
 8004fba:	2503      	movs	r5, #3
 8004fbc:	4f1e      	ldr	r7, [pc, #120]	; (8005038 <_dtoa_r+0x330>)
 8004fbe:	e04c      	b.n	800505a <_dtoa_r+0x352>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fc6:	4453      	add	r3, sl
 8004fc8:	f103 0901 	add.w	r9, r3, #1
 8004fcc:	9302      	str	r3, [sp, #8]
 8004fce:	464b      	mov	r3, r9
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	bfb8      	it	lt
 8004fd4:	2301      	movlt	r3, #1
 8004fd6:	e7ba      	b.n	8004f4e <_dtoa_r+0x246>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e7b2      	b.n	8004f42 <_dtoa_r+0x23a>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e7f0      	b.n	8004fc2 <_dtoa_r+0x2ba>
 8004fe0:	2501      	movs	r5, #1
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9306      	str	r3, [sp, #24]
 8004fe6:	950a      	str	r5, [sp, #40]	; 0x28
 8004fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fec:	9302      	str	r3, [sp, #8]
 8004fee:	4699      	mov	r9, r3
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2312      	movs	r3, #18
 8004ff4:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ff6:	e7aa      	b.n	8004f4e <_dtoa_r+0x246>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8004ffc:	e7f4      	b.n	8004fe8 <_dtoa_r+0x2e0>
 8004ffe:	2301      	movs	r3, #1
 8005000:	9302      	str	r3, [sp, #8]
 8005002:	4699      	mov	r9, r3
 8005004:	461a      	mov	r2, r3
 8005006:	e7f5      	b.n	8004ff4 <_dtoa_r+0x2ec>
 8005008:	3101      	adds	r1, #1
 800500a:	6071      	str	r1, [r6, #4]
 800500c:	0052      	lsls	r2, r2, #1
 800500e:	e7a2      	b.n	8004f56 <_dtoa_r+0x24e>
 8005010:	636f4361 	.word	0x636f4361
 8005014:	3fd287a7 	.word	0x3fd287a7
 8005018:	8b60c8b3 	.word	0x8b60c8b3
 800501c:	3fc68a28 	.word	0x3fc68a28
 8005020:	509f79fb 	.word	0x509f79fb
 8005024:	3fd34413 	.word	0x3fd34413
 8005028:	7ff00000 	.word	0x7ff00000
 800502c:	080075a1 	.word	0x080075a1
 8005030:	3ff80000 	.word	0x3ff80000
 8005034:	08007600 	.word	0x08007600
 8005038:	080075d8 	.word	0x080075d8
 800503c:	080075cd 	.word	0x080075cd
 8005040:	07f1      	lsls	r1, r6, #31
 8005042:	d508      	bpl.n	8005056 <_dtoa_r+0x34e>
 8005044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800504c:	f7fb fadc 	bl	8000608 <__aeabi_dmul>
 8005050:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005054:	3501      	adds	r5, #1
 8005056:	1076      	asrs	r6, r6, #1
 8005058:	3708      	adds	r7, #8
 800505a:	2e00      	cmp	r6, #0
 800505c:	d1f0      	bne.n	8005040 <_dtoa_r+0x338>
 800505e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005066:	f7fb fbf9 	bl	800085c <__aeabi_ddiv>
 800506a:	e9cd 0100 	strd	r0, r1, [sp]
 800506e:	e01a      	b.n	80050a6 <_dtoa_r+0x39e>
 8005070:	2502      	movs	r5, #2
 8005072:	e7a3      	b.n	8004fbc <_dtoa_r+0x2b4>
 8005074:	f000 80a0 	beq.w	80051b8 <_dtoa_r+0x4b0>
 8005078:	f1ca 0600 	rsb	r6, sl, #0
 800507c:	4b9f      	ldr	r3, [pc, #636]	; (80052fc <_dtoa_r+0x5f4>)
 800507e:	4fa0      	ldr	r7, [pc, #640]	; (8005300 <_dtoa_r+0x5f8>)
 8005080:	f006 020f 	and.w	r2, r6, #15
 8005084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005090:	f7fb faba 	bl	8000608 <__aeabi_dmul>
 8005094:	e9cd 0100 	strd	r0, r1, [sp]
 8005098:	1136      	asrs	r6, r6, #4
 800509a:	2300      	movs	r3, #0
 800509c:	2502      	movs	r5, #2
 800509e:	2e00      	cmp	r6, #0
 80050a0:	d17f      	bne.n	80051a2 <_dtoa_r+0x49a>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e1      	bne.n	800506a <_dtoa_r+0x362>
 80050a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8087 	beq.w	80051bc <_dtoa_r+0x4b4>
 80050ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050b2:	2200      	movs	r2, #0
 80050b4:	4b93      	ldr	r3, [pc, #588]	; (8005304 <_dtoa_r+0x5fc>)
 80050b6:	4630      	mov	r0, r6
 80050b8:	4639      	mov	r1, r7
 80050ba:	f7fb fd17 	bl	8000aec <__aeabi_dcmplt>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d07c      	beq.n	80051bc <_dtoa_r+0x4b4>
 80050c2:	f1b9 0f00 	cmp.w	r9, #0
 80050c6:	d079      	beq.n	80051bc <_dtoa_r+0x4b4>
 80050c8:	9b02      	ldr	r3, [sp, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	dd35      	ble.n	800513a <_dtoa_r+0x432>
 80050ce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80050d2:	9308      	str	r3, [sp, #32]
 80050d4:	4639      	mov	r1, r7
 80050d6:	2200      	movs	r2, #0
 80050d8:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <_dtoa_r+0x600>)
 80050da:	4630      	mov	r0, r6
 80050dc:	f7fb fa94 	bl	8000608 <__aeabi_dmul>
 80050e0:	e9cd 0100 	strd	r0, r1, [sp]
 80050e4:	9f02      	ldr	r7, [sp, #8]
 80050e6:	3501      	adds	r5, #1
 80050e8:	4628      	mov	r0, r5
 80050ea:	f7fb fa23 	bl	8000534 <__aeabi_i2d>
 80050ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f2:	f7fb fa89 	bl	8000608 <__aeabi_dmul>
 80050f6:	2200      	movs	r2, #0
 80050f8:	4b84      	ldr	r3, [pc, #528]	; (800530c <_dtoa_r+0x604>)
 80050fa:	f7fb f8cf 	bl	800029c <__adddf3>
 80050fe:	4605      	mov	r5, r0
 8005100:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005104:	2f00      	cmp	r7, #0
 8005106:	d15d      	bne.n	80051c4 <_dtoa_r+0x4bc>
 8005108:	2200      	movs	r2, #0
 800510a:	4b81      	ldr	r3, [pc, #516]	; (8005310 <_dtoa_r+0x608>)
 800510c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005110:	f7fb f8c2 	bl	8000298 <__aeabi_dsub>
 8005114:	462a      	mov	r2, r5
 8005116:	4633      	mov	r3, r6
 8005118:	e9cd 0100 	strd	r0, r1, [sp]
 800511c:	f7fb fd04 	bl	8000b28 <__aeabi_dcmpgt>
 8005120:	2800      	cmp	r0, #0
 8005122:	f040 8288 	bne.w	8005636 <_dtoa_r+0x92e>
 8005126:	462a      	mov	r2, r5
 8005128:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800512c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005130:	f7fb fcdc 	bl	8000aec <__aeabi_dcmplt>
 8005134:	2800      	cmp	r0, #0
 8005136:	f040 827c 	bne.w	8005632 <_dtoa_r+0x92a>
 800513a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800513e:	e9cd 2300 	strd	r2, r3, [sp]
 8005142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005144:	2b00      	cmp	r3, #0
 8005146:	f2c0 8150 	blt.w	80053ea <_dtoa_r+0x6e2>
 800514a:	f1ba 0f0e 	cmp.w	sl, #14
 800514e:	f300 814c 	bgt.w	80053ea <_dtoa_r+0x6e2>
 8005152:	4b6a      	ldr	r3, [pc, #424]	; (80052fc <_dtoa_r+0x5f4>)
 8005154:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005158:	ed93 7b00 	vldr	d7, [r3]
 800515c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005164:	f280 80d8 	bge.w	8005318 <_dtoa_r+0x610>
 8005168:	f1b9 0f00 	cmp.w	r9, #0
 800516c:	f300 80d4 	bgt.w	8005318 <_dtoa_r+0x610>
 8005170:	f040 825e 	bne.w	8005630 <_dtoa_r+0x928>
 8005174:	2200      	movs	r2, #0
 8005176:	4b66      	ldr	r3, [pc, #408]	; (8005310 <_dtoa_r+0x608>)
 8005178:	ec51 0b17 	vmov	r0, r1, d7
 800517c:	f7fb fa44 	bl	8000608 <__aeabi_dmul>
 8005180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005184:	f7fb fcc6 	bl	8000b14 <__aeabi_dcmpge>
 8005188:	464f      	mov	r7, r9
 800518a:	464e      	mov	r6, r9
 800518c:	2800      	cmp	r0, #0
 800518e:	f040 8234 	bne.w	80055fa <_dtoa_r+0x8f2>
 8005192:	2331      	movs	r3, #49	; 0x31
 8005194:	f10b 0501 	add.w	r5, fp, #1
 8005198:	f88b 3000 	strb.w	r3, [fp]
 800519c:	f10a 0a01 	add.w	sl, sl, #1
 80051a0:	e22f      	b.n	8005602 <_dtoa_r+0x8fa>
 80051a2:	07f2      	lsls	r2, r6, #31
 80051a4:	d505      	bpl.n	80051b2 <_dtoa_r+0x4aa>
 80051a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051aa:	f7fb fa2d 	bl	8000608 <__aeabi_dmul>
 80051ae:	3501      	adds	r5, #1
 80051b0:	2301      	movs	r3, #1
 80051b2:	1076      	asrs	r6, r6, #1
 80051b4:	3708      	adds	r7, #8
 80051b6:	e772      	b.n	800509e <_dtoa_r+0x396>
 80051b8:	2502      	movs	r5, #2
 80051ba:	e774      	b.n	80050a6 <_dtoa_r+0x39e>
 80051bc:	f8cd a020 	str.w	sl, [sp, #32]
 80051c0:	464f      	mov	r7, r9
 80051c2:	e791      	b.n	80050e8 <_dtoa_r+0x3e0>
 80051c4:	4b4d      	ldr	r3, [pc, #308]	; (80052fc <_dtoa_r+0x5f4>)
 80051c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80051ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d047      	beq.n	8005264 <_dtoa_r+0x55c>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	2000      	movs	r0, #0
 80051da:	494e      	ldr	r1, [pc, #312]	; (8005314 <_dtoa_r+0x60c>)
 80051dc:	f7fb fb3e 	bl	800085c <__aeabi_ddiv>
 80051e0:	462a      	mov	r2, r5
 80051e2:	4633      	mov	r3, r6
 80051e4:	f7fb f858 	bl	8000298 <__aeabi_dsub>
 80051e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051ec:	465d      	mov	r5, fp
 80051ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051f2:	f7fb fcb9 	bl	8000b68 <__aeabi_d2iz>
 80051f6:	4606      	mov	r6, r0
 80051f8:	f7fb f99c 	bl	8000534 <__aeabi_i2d>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005204:	f7fb f848 	bl	8000298 <__aeabi_dsub>
 8005208:	3630      	adds	r6, #48	; 0x30
 800520a:	f805 6b01 	strb.w	r6, [r5], #1
 800520e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005212:	e9cd 0100 	strd	r0, r1, [sp]
 8005216:	f7fb fc69 	bl	8000aec <__aeabi_dcmplt>
 800521a:	2800      	cmp	r0, #0
 800521c:	d163      	bne.n	80052e6 <_dtoa_r+0x5de>
 800521e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005222:	2000      	movs	r0, #0
 8005224:	4937      	ldr	r1, [pc, #220]	; (8005304 <_dtoa_r+0x5fc>)
 8005226:	f7fb f837 	bl	8000298 <__aeabi_dsub>
 800522a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800522e:	f7fb fc5d 	bl	8000aec <__aeabi_dcmplt>
 8005232:	2800      	cmp	r0, #0
 8005234:	f040 80b7 	bne.w	80053a6 <_dtoa_r+0x69e>
 8005238:	eba5 030b 	sub.w	r3, r5, fp
 800523c:	429f      	cmp	r7, r3
 800523e:	f77f af7c 	ble.w	800513a <_dtoa_r+0x432>
 8005242:	2200      	movs	r2, #0
 8005244:	4b30      	ldr	r3, [pc, #192]	; (8005308 <_dtoa_r+0x600>)
 8005246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800524a:	f7fb f9dd 	bl	8000608 <__aeabi_dmul>
 800524e:	2200      	movs	r2, #0
 8005250:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005254:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <_dtoa_r+0x600>)
 8005256:	e9dd 0100 	ldrd	r0, r1, [sp]
 800525a:	f7fb f9d5 	bl	8000608 <__aeabi_dmul>
 800525e:	e9cd 0100 	strd	r0, r1, [sp]
 8005262:	e7c4      	b.n	80051ee <_dtoa_r+0x4e6>
 8005264:	462a      	mov	r2, r5
 8005266:	4633      	mov	r3, r6
 8005268:	f7fb f9ce 	bl	8000608 <__aeabi_dmul>
 800526c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005270:	eb0b 0507 	add.w	r5, fp, r7
 8005274:	465e      	mov	r6, fp
 8005276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800527a:	f7fb fc75 	bl	8000b68 <__aeabi_d2iz>
 800527e:	4607      	mov	r7, r0
 8005280:	f7fb f958 	bl	8000534 <__aeabi_i2d>
 8005284:	3730      	adds	r7, #48	; 0x30
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800528e:	f7fb f803 	bl	8000298 <__aeabi_dsub>
 8005292:	f806 7b01 	strb.w	r7, [r6], #1
 8005296:	42ae      	cmp	r6, r5
 8005298:	e9cd 0100 	strd	r0, r1, [sp]
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	d126      	bne.n	80052f0 <_dtoa_r+0x5e8>
 80052a2:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <_dtoa_r+0x60c>)
 80052a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052a8:	f7fa fff8 	bl	800029c <__adddf3>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052b4:	f7fb fc38 	bl	8000b28 <__aeabi_dcmpgt>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d174      	bne.n	80053a6 <_dtoa_r+0x69e>
 80052bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80052c0:	2000      	movs	r0, #0
 80052c2:	4914      	ldr	r1, [pc, #80]	; (8005314 <_dtoa_r+0x60c>)
 80052c4:	f7fa ffe8 	bl	8000298 <__aeabi_dsub>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052d0:	f7fb fc0c 	bl	8000aec <__aeabi_dcmplt>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	f43f af30 	beq.w	800513a <_dtoa_r+0x432>
 80052da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052de:	2b30      	cmp	r3, #48	; 0x30
 80052e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80052e4:	d002      	beq.n	80052ec <_dtoa_r+0x5e4>
 80052e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80052ea:	e04a      	b.n	8005382 <_dtoa_r+0x67a>
 80052ec:	4615      	mov	r5, r2
 80052ee:	e7f4      	b.n	80052da <_dtoa_r+0x5d2>
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <_dtoa_r+0x600>)
 80052f2:	f7fb f989 	bl	8000608 <__aeabi_dmul>
 80052f6:	e9cd 0100 	strd	r0, r1, [sp]
 80052fa:	e7bc      	b.n	8005276 <_dtoa_r+0x56e>
 80052fc:	08007600 	.word	0x08007600
 8005300:	080075d8 	.word	0x080075d8
 8005304:	3ff00000 	.word	0x3ff00000
 8005308:	40240000 	.word	0x40240000
 800530c:	401c0000 	.word	0x401c0000
 8005310:	40140000 	.word	0x40140000
 8005314:	3fe00000 	.word	0x3fe00000
 8005318:	e9dd 6700 	ldrd	r6, r7, [sp]
 800531c:	465d      	mov	r5, fp
 800531e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005322:	4630      	mov	r0, r6
 8005324:	4639      	mov	r1, r7
 8005326:	f7fb fa99 	bl	800085c <__aeabi_ddiv>
 800532a:	f7fb fc1d 	bl	8000b68 <__aeabi_d2iz>
 800532e:	4680      	mov	r8, r0
 8005330:	f7fb f900 	bl	8000534 <__aeabi_i2d>
 8005334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005338:	f7fb f966 	bl	8000608 <__aeabi_dmul>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4630      	mov	r0, r6
 8005342:	4639      	mov	r1, r7
 8005344:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005348:	f7fa ffa6 	bl	8000298 <__aeabi_dsub>
 800534c:	f805 6b01 	strb.w	r6, [r5], #1
 8005350:	eba5 060b 	sub.w	r6, r5, fp
 8005354:	45b1      	cmp	r9, r6
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	d139      	bne.n	80053d0 <_dtoa_r+0x6c8>
 800535c:	f7fa ff9e 	bl	800029c <__adddf3>
 8005360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005364:	4606      	mov	r6, r0
 8005366:	460f      	mov	r7, r1
 8005368:	f7fb fbde 	bl	8000b28 <__aeabi_dcmpgt>
 800536c:	b9c8      	cbnz	r0, 80053a2 <_dtoa_r+0x69a>
 800536e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005372:	4630      	mov	r0, r6
 8005374:	4639      	mov	r1, r7
 8005376:	f7fb fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800537a:	b110      	cbz	r0, 8005382 <_dtoa_r+0x67a>
 800537c:	f018 0f01 	tst.w	r8, #1
 8005380:	d10f      	bne.n	80053a2 <_dtoa_r+0x69a>
 8005382:	9904      	ldr	r1, [sp, #16]
 8005384:	4620      	mov	r0, r4
 8005386:	f000 fac1 	bl	800590c <_Bfree>
 800538a:	2300      	movs	r3, #0
 800538c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800538e:	702b      	strb	r3, [r5, #0]
 8005390:	f10a 0301 	add.w	r3, sl, #1
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8241 	beq.w	8005820 <_dtoa_r+0xb18>
 800539e:	601d      	str	r5, [r3, #0]
 80053a0:	e23e      	b.n	8005820 <_dtoa_r+0xb18>
 80053a2:	f8cd a020 	str.w	sl, [sp, #32]
 80053a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053aa:	2a39      	cmp	r2, #57	; 0x39
 80053ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80053b0:	d108      	bne.n	80053c4 <_dtoa_r+0x6bc>
 80053b2:	459b      	cmp	fp, r3
 80053b4:	d10a      	bne.n	80053cc <_dtoa_r+0x6c4>
 80053b6:	9b08      	ldr	r3, [sp, #32]
 80053b8:	3301      	adds	r3, #1
 80053ba:	9308      	str	r3, [sp, #32]
 80053bc:	2330      	movs	r3, #48	; 0x30
 80053be:	f88b 3000 	strb.w	r3, [fp]
 80053c2:	465b      	mov	r3, fp
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	3201      	adds	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e78c      	b.n	80052e6 <_dtoa_r+0x5de>
 80053cc:	461d      	mov	r5, r3
 80053ce:	e7ea      	b.n	80053a6 <_dtoa_r+0x69e>
 80053d0:	2200      	movs	r2, #0
 80053d2:	4b9b      	ldr	r3, [pc, #620]	; (8005640 <_dtoa_r+0x938>)
 80053d4:	f7fb f918 	bl	8000608 <__aeabi_dmul>
 80053d8:	2200      	movs	r2, #0
 80053da:	2300      	movs	r3, #0
 80053dc:	4606      	mov	r6, r0
 80053de:	460f      	mov	r7, r1
 80053e0:	f7fb fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d09a      	beq.n	800531e <_dtoa_r+0x616>
 80053e8:	e7cb      	b.n	8005382 <_dtoa_r+0x67a>
 80053ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	f000 808b 	beq.w	8005508 <_dtoa_r+0x800>
 80053f2:	9a06      	ldr	r2, [sp, #24]
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	dc6e      	bgt.n	80054d6 <_dtoa_r+0x7ce>
 80053f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	d067      	beq.n	80054ce <_dtoa_r+0x7c6>
 80053fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005402:	9f07      	ldr	r7, [sp, #28]
 8005404:	9d05      	ldr	r5, [sp, #20]
 8005406:	9a05      	ldr	r2, [sp, #20]
 8005408:	2101      	movs	r1, #1
 800540a:	441a      	add	r2, r3
 800540c:	4620      	mov	r0, r4
 800540e:	9205      	str	r2, [sp, #20]
 8005410:	4498      	add	r8, r3
 8005412:	f000 fb1b 	bl	8005a4c <__i2b>
 8005416:	4606      	mov	r6, r0
 8005418:	2d00      	cmp	r5, #0
 800541a:	dd0c      	ble.n	8005436 <_dtoa_r+0x72e>
 800541c:	f1b8 0f00 	cmp.w	r8, #0
 8005420:	dd09      	ble.n	8005436 <_dtoa_r+0x72e>
 8005422:	4545      	cmp	r5, r8
 8005424:	9a05      	ldr	r2, [sp, #20]
 8005426:	462b      	mov	r3, r5
 8005428:	bfa8      	it	ge
 800542a:	4643      	movge	r3, r8
 800542c:	1ad2      	subs	r2, r2, r3
 800542e:	9205      	str	r2, [sp, #20]
 8005430:	1aed      	subs	r5, r5, r3
 8005432:	eba8 0803 	sub.w	r8, r8, r3
 8005436:	9b07      	ldr	r3, [sp, #28]
 8005438:	b1eb      	cbz	r3, 8005476 <_dtoa_r+0x76e>
 800543a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543c:	2b00      	cmp	r3, #0
 800543e:	d067      	beq.n	8005510 <_dtoa_r+0x808>
 8005440:	b18f      	cbz	r7, 8005466 <_dtoa_r+0x75e>
 8005442:	4631      	mov	r1, r6
 8005444:	463a      	mov	r2, r7
 8005446:	4620      	mov	r0, r4
 8005448:	f000 fba0 	bl	8005b8c <__pow5mult>
 800544c:	9a04      	ldr	r2, [sp, #16]
 800544e:	4601      	mov	r1, r0
 8005450:	4606      	mov	r6, r0
 8005452:	4620      	mov	r0, r4
 8005454:	f000 fb03 	bl	8005a5e <__multiply>
 8005458:	9904      	ldr	r1, [sp, #16]
 800545a:	9008      	str	r0, [sp, #32]
 800545c:	4620      	mov	r0, r4
 800545e:	f000 fa55 	bl	800590c <_Bfree>
 8005462:	9b08      	ldr	r3, [sp, #32]
 8005464:	9304      	str	r3, [sp, #16]
 8005466:	9b07      	ldr	r3, [sp, #28]
 8005468:	1bda      	subs	r2, r3, r7
 800546a:	d004      	beq.n	8005476 <_dtoa_r+0x76e>
 800546c:	9904      	ldr	r1, [sp, #16]
 800546e:	4620      	mov	r0, r4
 8005470:	f000 fb8c 	bl	8005b8c <__pow5mult>
 8005474:	9004      	str	r0, [sp, #16]
 8005476:	2101      	movs	r1, #1
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fae7 	bl	8005a4c <__i2b>
 800547e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005480:	4607      	mov	r7, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 81d0 	beq.w	8005828 <_dtoa_r+0xb20>
 8005488:	461a      	mov	r2, r3
 800548a:	4601      	mov	r1, r0
 800548c:	4620      	mov	r0, r4
 800548e:	f000 fb7d 	bl	8005b8c <__pow5mult>
 8005492:	9b06      	ldr	r3, [sp, #24]
 8005494:	2b01      	cmp	r3, #1
 8005496:	4607      	mov	r7, r0
 8005498:	dc40      	bgt.n	800551c <_dtoa_r+0x814>
 800549a:	9b00      	ldr	r3, [sp, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d139      	bne.n	8005514 <_dtoa_r+0x80c>
 80054a0:	9b01      	ldr	r3, [sp, #4]
 80054a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d136      	bne.n	8005518 <_dtoa_r+0x810>
 80054aa:	9b01      	ldr	r3, [sp, #4]
 80054ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054b0:	0d1b      	lsrs	r3, r3, #20
 80054b2:	051b      	lsls	r3, r3, #20
 80054b4:	b12b      	cbz	r3, 80054c2 <_dtoa_r+0x7ba>
 80054b6:	9b05      	ldr	r3, [sp, #20]
 80054b8:	3301      	adds	r3, #1
 80054ba:	9305      	str	r3, [sp, #20]
 80054bc:	f108 0801 	add.w	r8, r8, #1
 80054c0:	2301      	movs	r3, #1
 80054c2:	9307      	str	r3, [sp, #28]
 80054c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d12a      	bne.n	8005520 <_dtoa_r+0x818>
 80054ca:	2001      	movs	r0, #1
 80054cc:	e030      	b.n	8005530 <_dtoa_r+0x828>
 80054ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054d4:	e795      	b.n	8005402 <_dtoa_r+0x6fa>
 80054d6:	9b07      	ldr	r3, [sp, #28]
 80054d8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80054dc:	42bb      	cmp	r3, r7
 80054de:	bfbf      	itttt	lt
 80054e0:	9b07      	ldrlt	r3, [sp, #28]
 80054e2:	9707      	strlt	r7, [sp, #28]
 80054e4:	1afa      	sublt	r2, r7, r3
 80054e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80054e8:	bfbb      	ittet	lt
 80054ea:	189b      	addlt	r3, r3, r2
 80054ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80054ee:	1bdf      	subge	r7, r3, r7
 80054f0:	2700      	movlt	r7, #0
 80054f2:	f1b9 0f00 	cmp.w	r9, #0
 80054f6:	bfb5      	itete	lt
 80054f8:	9b05      	ldrlt	r3, [sp, #20]
 80054fa:	9d05      	ldrge	r5, [sp, #20]
 80054fc:	eba3 0509 	sublt.w	r5, r3, r9
 8005500:	464b      	movge	r3, r9
 8005502:	bfb8      	it	lt
 8005504:	2300      	movlt	r3, #0
 8005506:	e77e      	b.n	8005406 <_dtoa_r+0x6fe>
 8005508:	9f07      	ldr	r7, [sp, #28]
 800550a:	9d05      	ldr	r5, [sp, #20]
 800550c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800550e:	e783      	b.n	8005418 <_dtoa_r+0x710>
 8005510:	9a07      	ldr	r2, [sp, #28]
 8005512:	e7ab      	b.n	800546c <_dtoa_r+0x764>
 8005514:	2300      	movs	r3, #0
 8005516:	e7d4      	b.n	80054c2 <_dtoa_r+0x7ba>
 8005518:	9b00      	ldr	r3, [sp, #0]
 800551a:	e7d2      	b.n	80054c2 <_dtoa_r+0x7ba>
 800551c:	2300      	movs	r3, #0
 800551e:	9307      	str	r3, [sp, #28]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005526:	6918      	ldr	r0, [r3, #16]
 8005528:	f000 fa42 	bl	80059b0 <__hi0bits>
 800552c:	f1c0 0020 	rsb	r0, r0, #32
 8005530:	4440      	add	r0, r8
 8005532:	f010 001f 	ands.w	r0, r0, #31
 8005536:	d047      	beq.n	80055c8 <_dtoa_r+0x8c0>
 8005538:	f1c0 0320 	rsb	r3, r0, #32
 800553c:	2b04      	cmp	r3, #4
 800553e:	dd3b      	ble.n	80055b8 <_dtoa_r+0x8b0>
 8005540:	9b05      	ldr	r3, [sp, #20]
 8005542:	f1c0 001c 	rsb	r0, r0, #28
 8005546:	4403      	add	r3, r0
 8005548:	9305      	str	r3, [sp, #20]
 800554a:	4405      	add	r5, r0
 800554c:	4480      	add	r8, r0
 800554e:	9b05      	ldr	r3, [sp, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	dd05      	ble.n	8005560 <_dtoa_r+0x858>
 8005554:	461a      	mov	r2, r3
 8005556:	9904      	ldr	r1, [sp, #16]
 8005558:	4620      	mov	r0, r4
 800555a:	f000 fb65 	bl	8005c28 <__lshift>
 800555e:	9004      	str	r0, [sp, #16]
 8005560:	f1b8 0f00 	cmp.w	r8, #0
 8005564:	dd05      	ble.n	8005572 <_dtoa_r+0x86a>
 8005566:	4639      	mov	r1, r7
 8005568:	4642      	mov	r2, r8
 800556a:	4620      	mov	r0, r4
 800556c:	f000 fb5c 	bl	8005c28 <__lshift>
 8005570:	4607      	mov	r7, r0
 8005572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005574:	b353      	cbz	r3, 80055cc <_dtoa_r+0x8c4>
 8005576:	4639      	mov	r1, r7
 8005578:	9804      	ldr	r0, [sp, #16]
 800557a:	f000 fba9 	bl	8005cd0 <__mcmp>
 800557e:	2800      	cmp	r0, #0
 8005580:	da24      	bge.n	80055cc <_dtoa_r+0x8c4>
 8005582:	2300      	movs	r3, #0
 8005584:	220a      	movs	r2, #10
 8005586:	9904      	ldr	r1, [sp, #16]
 8005588:	4620      	mov	r0, r4
 800558a:	f000 f9d6 	bl	800593a <__multadd>
 800558e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005590:	9004      	str	r0, [sp, #16]
 8005592:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 814d 	beq.w	8005836 <_dtoa_r+0xb2e>
 800559c:	2300      	movs	r3, #0
 800559e:	4631      	mov	r1, r6
 80055a0:	220a      	movs	r2, #10
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 f9c9 	bl	800593a <__multadd>
 80055a8:	9b02      	ldr	r3, [sp, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	4606      	mov	r6, r0
 80055ae:	dc4f      	bgt.n	8005650 <_dtoa_r+0x948>
 80055b0:	9b06      	ldr	r3, [sp, #24]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	dd4c      	ble.n	8005650 <_dtoa_r+0x948>
 80055b6:	e011      	b.n	80055dc <_dtoa_r+0x8d4>
 80055b8:	d0c9      	beq.n	800554e <_dtoa_r+0x846>
 80055ba:	9a05      	ldr	r2, [sp, #20]
 80055bc:	331c      	adds	r3, #28
 80055be:	441a      	add	r2, r3
 80055c0:	9205      	str	r2, [sp, #20]
 80055c2:	441d      	add	r5, r3
 80055c4:	4498      	add	r8, r3
 80055c6:	e7c2      	b.n	800554e <_dtoa_r+0x846>
 80055c8:	4603      	mov	r3, r0
 80055ca:	e7f6      	b.n	80055ba <_dtoa_r+0x8b2>
 80055cc:	f1b9 0f00 	cmp.w	r9, #0
 80055d0:	dc38      	bgt.n	8005644 <_dtoa_r+0x93c>
 80055d2:	9b06      	ldr	r3, [sp, #24]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	dd35      	ble.n	8005644 <_dtoa_r+0x93c>
 80055d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80055dc:	9b02      	ldr	r3, [sp, #8]
 80055de:	b963      	cbnz	r3, 80055fa <_dtoa_r+0x8f2>
 80055e0:	4639      	mov	r1, r7
 80055e2:	2205      	movs	r2, #5
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 f9a8 	bl	800593a <__multadd>
 80055ea:	4601      	mov	r1, r0
 80055ec:	4607      	mov	r7, r0
 80055ee:	9804      	ldr	r0, [sp, #16]
 80055f0:	f000 fb6e 	bl	8005cd0 <__mcmp>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f73f adcc 	bgt.w	8005192 <_dtoa_r+0x48a>
 80055fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055fc:	465d      	mov	r5, fp
 80055fe:	ea6f 0a03 	mvn.w	sl, r3
 8005602:	f04f 0900 	mov.w	r9, #0
 8005606:	4639      	mov	r1, r7
 8005608:	4620      	mov	r0, r4
 800560a:	f000 f97f 	bl	800590c <_Bfree>
 800560e:	2e00      	cmp	r6, #0
 8005610:	f43f aeb7 	beq.w	8005382 <_dtoa_r+0x67a>
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	d005      	beq.n	8005626 <_dtoa_r+0x91e>
 800561a:	45b1      	cmp	r9, r6
 800561c:	d003      	beq.n	8005626 <_dtoa_r+0x91e>
 800561e:	4649      	mov	r1, r9
 8005620:	4620      	mov	r0, r4
 8005622:	f000 f973 	bl	800590c <_Bfree>
 8005626:	4631      	mov	r1, r6
 8005628:	4620      	mov	r0, r4
 800562a:	f000 f96f 	bl	800590c <_Bfree>
 800562e:	e6a8      	b.n	8005382 <_dtoa_r+0x67a>
 8005630:	2700      	movs	r7, #0
 8005632:	463e      	mov	r6, r7
 8005634:	e7e1      	b.n	80055fa <_dtoa_r+0x8f2>
 8005636:	f8dd a020 	ldr.w	sl, [sp, #32]
 800563a:	463e      	mov	r6, r7
 800563c:	e5a9      	b.n	8005192 <_dtoa_r+0x48a>
 800563e:	bf00      	nop
 8005640:	40240000 	.word	0x40240000
 8005644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005646:	f8cd 9008 	str.w	r9, [sp, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80fa 	beq.w	8005844 <_dtoa_r+0xb3c>
 8005650:	2d00      	cmp	r5, #0
 8005652:	dd05      	ble.n	8005660 <_dtoa_r+0x958>
 8005654:	4631      	mov	r1, r6
 8005656:	462a      	mov	r2, r5
 8005658:	4620      	mov	r0, r4
 800565a:	f000 fae5 	bl	8005c28 <__lshift>
 800565e:	4606      	mov	r6, r0
 8005660:	9b07      	ldr	r3, [sp, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04c      	beq.n	8005700 <_dtoa_r+0x9f8>
 8005666:	6871      	ldr	r1, [r6, #4]
 8005668:	4620      	mov	r0, r4
 800566a:	f000 f91b 	bl	80058a4 <_Balloc>
 800566e:	6932      	ldr	r2, [r6, #16]
 8005670:	3202      	adds	r2, #2
 8005672:	4605      	mov	r5, r0
 8005674:	0092      	lsls	r2, r2, #2
 8005676:	f106 010c 	add.w	r1, r6, #12
 800567a:	300c      	adds	r0, #12
 800567c:	f7fe fe26 	bl	80042cc <memcpy>
 8005680:	2201      	movs	r2, #1
 8005682:	4629      	mov	r1, r5
 8005684:	4620      	mov	r0, r4
 8005686:	f000 facf 	bl	8005c28 <__lshift>
 800568a:	9b00      	ldr	r3, [sp, #0]
 800568c:	f8cd b014 	str.w	fp, [sp, #20]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	46b1      	mov	r9, r6
 8005696:	9307      	str	r3, [sp, #28]
 8005698:	4606      	mov	r6, r0
 800569a:	4639      	mov	r1, r7
 800569c:	9804      	ldr	r0, [sp, #16]
 800569e:	f7ff faa5 	bl	8004bec <quorem>
 80056a2:	4649      	mov	r1, r9
 80056a4:	4605      	mov	r5, r0
 80056a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80056aa:	9804      	ldr	r0, [sp, #16]
 80056ac:	f000 fb10 	bl	8005cd0 <__mcmp>
 80056b0:	4632      	mov	r2, r6
 80056b2:	9000      	str	r0, [sp, #0]
 80056b4:	4639      	mov	r1, r7
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 fb24 	bl	8005d04 <__mdiff>
 80056bc:	68c3      	ldr	r3, [r0, #12]
 80056be:	4602      	mov	r2, r0
 80056c0:	bb03      	cbnz	r3, 8005704 <_dtoa_r+0x9fc>
 80056c2:	4601      	mov	r1, r0
 80056c4:	9008      	str	r0, [sp, #32]
 80056c6:	9804      	ldr	r0, [sp, #16]
 80056c8:	f000 fb02 	bl	8005cd0 <__mcmp>
 80056cc:	9a08      	ldr	r2, [sp, #32]
 80056ce:	4603      	mov	r3, r0
 80056d0:	4611      	mov	r1, r2
 80056d2:	4620      	mov	r0, r4
 80056d4:	9308      	str	r3, [sp, #32]
 80056d6:	f000 f919 	bl	800590c <_Bfree>
 80056da:	9b08      	ldr	r3, [sp, #32]
 80056dc:	b9a3      	cbnz	r3, 8005708 <_dtoa_r+0xa00>
 80056de:	9a06      	ldr	r2, [sp, #24]
 80056e0:	b992      	cbnz	r2, 8005708 <_dtoa_r+0xa00>
 80056e2:	9a07      	ldr	r2, [sp, #28]
 80056e4:	b982      	cbnz	r2, 8005708 <_dtoa_r+0xa00>
 80056e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056ea:	d029      	beq.n	8005740 <_dtoa_r+0xa38>
 80056ec:	9b00      	ldr	r3, [sp, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dd01      	ble.n	80056f6 <_dtoa_r+0x9ee>
 80056f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80056f6:	9b05      	ldr	r3, [sp, #20]
 80056f8:	1c5d      	adds	r5, r3, #1
 80056fa:	f883 8000 	strb.w	r8, [r3]
 80056fe:	e782      	b.n	8005606 <_dtoa_r+0x8fe>
 8005700:	4630      	mov	r0, r6
 8005702:	e7c2      	b.n	800568a <_dtoa_r+0x982>
 8005704:	2301      	movs	r3, #1
 8005706:	e7e3      	b.n	80056d0 <_dtoa_r+0x9c8>
 8005708:	9a00      	ldr	r2, [sp, #0]
 800570a:	2a00      	cmp	r2, #0
 800570c:	db04      	blt.n	8005718 <_dtoa_r+0xa10>
 800570e:	d125      	bne.n	800575c <_dtoa_r+0xa54>
 8005710:	9a06      	ldr	r2, [sp, #24]
 8005712:	bb1a      	cbnz	r2, 800575c <_dtoa_r+0xa54>
 8005714:	9a07      	ldr	r2, [sp, #28]
 8005716:	bb0a      	cbnz	r2, 800575c <_dtoa_r+0xa54>
 8005718:	2b00      	cmp	r3, #0
 800571a:	ddec      	ble.n	80056f6 <_dtoa_r+0x9ee>
 800571c:	2201      	movs	r2, #1
 800571e:	9904      	ldr	r1, [sp, #16]
 8005720:	4620      	mov	r0, r4
 8005722:	f000 fa81 	bl	8005c28 <__lshift>
 8005726:	4639      	mov	r1, r7
 8005728:	9004      	str	r0, [sp, #16]
 800572a:	f000 fad1 	bl	8005cd0 <__mcmp>
 800572e:	2800      	cmp	r0, #0
 8005730:	dc03      	bgt.n	800573a <_dtoa_r+0xa32>
 8005732:	d1e0      	bne.n	80056f6 <_dtoa_r+0x9ee>
 8005734:	f018 0f01 	tst.w	r8, #1
 8005738:	d0dd      	beq.n	80056f6 <_dtoa_r+0x9ee>
 800573a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800573e:	d1d8      	bne.n	80056f2 <_dtoa_r+0x9ea>
 8005740:	9b05      	ldr	r3, [sp, #20]
 8005742:	9a05      	ldr	r2, [sp, #20]
 8005744:	1c5d      	adds	r5, r3, #1
 8005746:	2339      	movs	r3, #57	; 0x39
 8005748:	7013      	strb	r3, [r2, #0]
 800574a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800574e:	2b39      	cmp	r3, #57	; 0x39
 8005750:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005754:	d04f      	beq.n	80057f6 <_dtoa_r+0xaee>
 8005756:	3301      	adds	r3, #1
 8005758:	7013      	strb	r3, [r2, #0]
 800575a:	e754      	b.n	8005606 <_dtoa_r+0x8fe>
 800575c:	9a05      	ldr	r2, [sp, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f102 0501 	add.w	r5, r2, #1
 8005764:	dd06      	ble.n	8005774 <_dtoa_r+0xa6c>
 8005766:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800576a:	d0e9      	beq.n	8005740 <_dtoa_r+0xa38>
 800576c:	f108 0801 	add.w	r8, r8, #1
 8005770:	9b05      	ldr	r3, [sp, #20]
 8005772:	e7c2      	b.n	80056fa <_dtoa_r+0x9f2>
 8005774:	9a02      	ldr	r2, [sp, #8]
 8005776:	f805 8c01 	strb.w	r8, [r5, #-1]
 800577a:	eba5 030b 	sub.w	r3, r5, fp
 800577e:	4293      	cmp	r3, r2
 8005780:	d021      	beq.n	80057c6 <_dtoa_r+0xabe>
 8005782:	2300      	movs	r3, #0
 8005784:	220a      	movs	r2, #10
 8005786:	9904      	ldr	r1, [sp, #16]
 8005788:	4620      	mov	r0, r4
 800578a:	f000 f8d6 	bl	800593a <__multadd>
 800578e:	45b1      	cmp	r9, r6
 8005790:	9004      	str	r0, [sp, #16]
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	f04f 020a 	mov.w	r2, #10
 800579a:	4649      	mov	r1, r9
 800579c:	4620      	mov	r0, r4
 800579e:	d105      	bne.n	80057ac <_dtoa_r+0xaa4>
 80057a0:	f000 f8cb 	bl	800593a <__multadd>
 80057a4:	4681      	mov	r9, r0
 80057a6:	4606      	mov	r6, r0
 80057a8:	9505      	str	r5, [sp, #20]
 80057aa:	e776      	b.n	800569a <_dtoa_r+0x992>
 80057ac:	f000 f8c5 	bl	800593a <__multadd>
 80057b0:	4631      	mov	r1, r6
 80057b2:	4681      	mov	r9, r0
 80057b4:	2300      	movs	r3, #0
 80057b6:	220a      	movs	r2, #10
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 f8be 	bl	800593a <__multadd>
 80057be:	4606      	mov	r6, r0
 80057c0:	e7f2      	b.n	80057a8 <_dtoa_r+0xaa0>
 80057c2:	f04f 0900 	mov.w	r9, #0
 80057c6:	2201      	movs	r2, #1
 80057c8:	9904      	ldr	r1, [sp, #16]
 80057ca:	4620      	mov	r0, r4
 80057cc:	f000 fa2c 	bl	8005c28 <__lshift>
 80057d0:	4639      	mov	r1, r7
 80057d2:	9004      	str	r0, [sp, #16]
 80057d4:	f000 fa7c 	bl	8005cd0 <__mcmp>
 80057d8:	2800      	cmp	r0, #0
 80057da:	dcb6      	bgt.n	800574a <_dtoa_r+0xa42>
 80057dc:	d102      	bne.n	80057e4 <_dtoa_r+0xadc>
 80057de:	f018 0f01 	tst.w	r8, #1
 80057e2:	d1b2      	bne.n	800574a <_dtoa_r+0xa42>
 80057e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80057ee:	f47f af0a 	bne.w	8005606 <_dtoa_r+0x8fe>
 80057f2:	4615      	mov	r5, r2
 80057f4:	e7f6      	b.n	80057e4 <_dtoa_r+0xadc>
 80057f6:	4593      	cmp	fp, r2
 80057f8:	d105      	bne.n	8005806 <_dtoa_r+0xafe>
 80057fa:	2331      	movs	r3, #49	; 0x31
 80057fc:	f10a 0a01 	add.w	sl, sl, #1
 8005800:	f88b 3000 	strb.w	r3, [fp]
 8005804:	e6ff      	b.n	8005606 <_dtoa_r+0x8fe>
 8005806:	4615      	mov	r5, r2
 8005808:	e79f      	b.n	800574a <_dtoa_r+0xa42>
 800580a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005870 <_dtoa_r+0xb68>
 800580e:	e007      	b.n	8005820 <_dtoa_r+0xb18>
 8005810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005812:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005874 <_dtoa_r+0xb6c>
 8005816:	b11b      	cbz	r3, 8005820 <_dtoa_r+0xb18>
 8005818:	f10b 0308 	add.w	r3, fp, #8
 800581c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4658      	mov	r0, fp
 8005822:	b017      	add	sp, #92	; 0x5c
 8005824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	2b01      	cmp	r3, #1
 800582c:	f77f ae35 	ble.w	800549a <_dtoa_r+0x792>
 8005830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005832:	9307      	str	r3, [sp, #28]
 8005834:	e649      	b.n	80054ca <_dtoa_r+0x7c2>
 8005836:	9b02      	ldr	r3, [sp, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	dc03      	bgt.n	8005844 <_dtoa_r+0xb3c>
 800583c:	9b06      	ldr	r3, [sp, #24]
 800583e:	2b02      	cmp	r3, #2
 8005840:	f73f aecc 	bgt.w	80055dc <_dtoa_r+0x8d4>
 8005844:	465d      	mov	r5, fp
 8005846:	4639      	mov	r1, r7
 8005848:	9804      	ldr	r0, [sp, #16]
 800584a:	f7ff f9cf 	bl	8004bec <quorem>
 800584e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005852:	f805 8b01 	strb.w	r8, [r5], #1
 8005856:	9a02      	ldr	r2, [sp, #8]
 8005858:	eba5 030b 	sub.w	r3, r5, fp
 800585c:	429a      	cmp	r2, r3
 800585e:	ddb0      	ble.n	80057c2 <_dtoa_r+0xaba>
 8005860:	2300      	movs	r3, #0
 8005862:	220a      	movs	r2, #10
 8005864:	9904      	ldr	r1, [sp, #16]
 8005866:	4620      	mov	r0, r4
 8005868:	f000 f867 	bl	800593a <__multadd>
 800586c:	9004      	str	r0, [sp, #16]
 800586e:	e7ea      	b.n	8005846 <_dtoa_r+0xb3e>
 8005870:	080075a0 	.word	0x080075a0
 8005874:	080075c4 	.word	0x080075c4

08005878 <_localeconv_r>:
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <_localeconv_r+0x14>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a18      	ldr	r0, [r3, #32]
 800587e:	4b04      	ldr	r3, [pc, #16]	; (8005890 <_localeconv_r+0x18>)
 8005880:	2800      	cmp	r0, #0
 8005882:	bf08      	it	eq
 8005884:	4618      	moveq	r0, r3
 8005886:	30f0      	adds	r0, #240	; 0xf0
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000010 	.word	0x20000010
 8005890:	20000074 	.word	0x20000074

08005894 <malloc>:
 8005894:	4b02      	ldr	r3, [pc, #8]	; (80058a0 <malloc+0xc>)
 8005896:	4601      	mov	r1, r0
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	f000 bb3b 	b.w	8005f14 <_malloc_r>
 800589e:	bf00      	nop
 80058a0:	20000010 	.word	0x20000010

080058a4 <_Balloc>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058a8:	4604      	mov	r4, r0
 80058aa:	460e      	mov	r6, r1
 80058ac:	b93d      	cbnz	r5, 80058be <_Balloc+0x1a>
 80058ae:	2010      	movs	r0, #16
 80058b0:	f7ff fff0 	bl	8005894 <malloc>
 80058b4:	6260      	str	r0, [r4, #36]	; 0x24
 80058b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058ba:	6005      	str	r5, [r0, #0]
 80058bc:	60c5      	str	r5, [r0, #12]
 80058be:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80058c0:	68eb      	ldr	r3, [r5, #12]
 80058c2:	b183      	cbz	r3, 80058e6 <_Balloc+0x42>
 80058c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058cc:	b9b8      	cbnz	r0, 80058fe <_Balloc+0x5a>
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f506 	lsl.w	r5, r1, r6
 80058d4:	1d6a      	adds	r2, r5, #5
 80058d6:	0092      	lsls	r2, r2, #2
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fabf 	bl	8005e5c <_calloc_r>
 80058de:	b160      	cbz	r0, 80058fa <_Balloc+0x56>
 80058e0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80058e4:	e00e      	b.n	8005904 <_Balloc+0x60>
 80058e6:	2221      	movs	r2, #33	; 0x21
 80058e8:	2104      	movs	r1, #4
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 fab6 	bl	8005e5c <_calloc_r>
 80058f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058f2:	60e8      	str	r0, [r5, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e4      	bne.n	80058c4 <_Balloc+0x20>
 80058fa:	2000      	movs	r0, #0
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	6802      	ldr	r2, [r0, #0]
 8005900:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005904:	2300      	movs	r3, #0
 8005906:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800590a:	e7f7      	b.n	80058fc <_Balloc+0x58>

0800590c <_Bfree>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005910:	4606      	mov	r6, r0
 8005912:	460d      	mov	r5, r1
 8005914:	b93c      	cbnz	r4, 8005926 <_Bfree+0x1a>
 8005916:	2010      	movs	r0, #16
 8005918:	f7ff ffbc 	bl	8005894 <malloc>
 800591c:	6270      	str	r0, [r6, #36]	; 0x24
 800591e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005922:	6004      	str	r4, [r0, #0]
 8005924:	60c4      	str	r4, [r0, #12]
 8005926:	b13d      	cbz	r5, 8005938 <_Bfree+0x2c>
 8005928:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800592a:	686a      	ldr	r2, [r5, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005932:	6029      	str	r1, [r5, #0]
 8005934:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005938:	bd70      	pop	{r4, r5, r6, pc}

0800593a <__multadd>:
 800593a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593e:	690d      	ldr	r5, [r1, #16]
 8005940:	461f      	mov	r7, r3
 8005942:	4606      	mov	r6, r0
 8005944:	460c      	mov	r4, r1
 8005946:	f101 0c14 	add.w	ip, r1, #20
 800594a:	2300      	movs	r3, #0
 800594c:	f8dc 0000 	ldr.w	r0, [ip]
 8005950:	b281      	uxth	r1, r0
 8005952:	fb02 7101 	mla	r1, r2, r1, r7
 8005956:	0c0f      	lsrs	r7, r1, #16
 8005958:	0c00      	lsrs	r0, r0, #16
 800595a:	fb02 7000 	mla	r0, r2, r0, r7
 800595e:	b289      	uxth	r1, r1
 8005960:	3301      	adds	r3, #1
 8005962:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005966:	429d      	cmp	r5, r3
 8005968:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800596c:	f84c 1b04 	str.w	r1, [ip], #4
 8005970:	dcec      	bgt.n	800594c <__multadd+0x12>
 8005972:	b1d7      	cbz	r7, 80059aa <__multadd+0x70>
 8005974:	68a3      	ldr	r3, [r4, #8]
 8005976:	42ab      	cmp	r3, r5
 8005978:	dc12      	bgt.n	80059a0 <__multadd+0x66>
 800597a:	6861      	ldr	r1, [r4, #4]
 800597c:	4630      	mov	r0, r6
 800597e:	3101      	adds	r1, #1
 8005980:	f7ff ff90 	bl	80058a4 <_Balloc>
 8005984:	6922      	ldr	r2, [r4, #16]
 8005986:	3202      	adds	r2, #2
 8005988:	f104 010c 	add.w	r1, r4, #12
 800598c:	4680      	mov	r8, r0
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	300c      	adds	r0, #12
 8005992:	f7fe fc9b 	bl	80042cc <memcpy>
 8005996:	4621      	mov	r1, r4
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff ffb7 	bl	800590c <_Bfree>
 800599e:	4644      	mov	r4, r8
 80059a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059a4:	3501      	adds	r5, #1
 80059a6:	615f      	str	r7, [r3, #20]
 80059a8:	6125      	str	r5, [r4, #16]
 80059aa:	4620      	mov	r0, r4
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059b0 <__hi0bits>:
 80059b0:	0c02      	lsrs	r2, r0, #16
 80059b2:	0412      	lsls	r2, r2, #16
 80059b4:	4603      	mov	r3, r0
 80059b6:	b9b2      	cbnz	r2, 80059e6 <__hi0bits+0x36>
 80059b8:	0403      	lsls	r3, r0, #16
 80059ba:	2010      	movs	r0, #16
 80059bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059c0:	bf04      	itt	eq
 80059c2:	021b      	lsleq	r3, r3, #8
 80059c4:	3008      	addeq	r0, #8
 80059c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059ca:	bf04      	itt	eq
 80059cc:	011b      	lsleq	r3, r3, #4
 80059ce:	3004      	addeq	r0, #4
 80059d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059d4:	bf04      	itt	eq
 80059d6:	009b      	lsleq	r3, r3, #2
 80059d8:	3002      	addeq	r0, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	db06      	blt.n	80059ec <__hi0bits+0x3c>
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	d503      	bpl.n	80059ea <__hi0bits+0x3a>
 80059e2:	3001      	adds	r0, #1
 80059e4:	4770      	bx	lr
 80059e6:	2000      	movs	r0, #0
 80059e8:	e7e8      	b.n	80059bc <__hi0bits+0xc>
 80059ea:	2020      	movs	r0, #32
 80059ec:	4770      	bx	lr

080059ee <__lo0bits>:
 80059ee:	6803      	ldr	r3, [r0, #0]
 80059f0:	f013 0207 	ands.w	r2, r3, #7
 80059f4:	4601      	mov	r1, r0
 80059f6:	d00b      	beq.n	8005a10 <__lo0bits+0x22>
 80059f8:	07da      	lsls	r2, r3, #31
 80059fa:	d423      	bmi.n	8005a44 <__lo0bits+0x56>
 80059fc:	0798      	lsls	r0, r3, #30
 80059fe:	bf49      	itett	mi
 8005a00:	085b      	lsrmi	r3, r3, #1
 8005a02:	089b      	lsrpl	r3, r3, #2
 8005a04:	2001      	movmi	r0, #1
 8005a06:	600b      	strmi	r3, [r1, #0]
 8005a08:	bf5c      	itt	pl
 8005a0a:	600b      	strpl	r3, [r1, #0]
 8005a0c:	2002      	movpl	r0, #2
 8005a0e:	4770      	bx	lr
 8005a10:	b298      	uxth	r0, r3
 8005a12:	b9a8      	cbnz	r0, 8005a40 <__lo0bits+0x52>
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	2010      	movs	r0, #16
 8005a18:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a1c:	bf04      	itt	eq
 8005a1e:	0a1b      	lsreq	r3, r3, #8
 8005a20:	3008      	addeq	r0, #8
 8005a22:	071a      	lsls	r2, r3, #28
 8005a24:	bf04      	itt	eq
 8005a26:	091b      	lsreq	r3, r3, #4
 8005a28:	3004      	addeq	r0, #4
 8005a2a:	079a      	lsls	r2, r3, #30
 8005a2c:	bf04      	itt	eq
 8005a2e:	089b      	lsreq	r3, r3, #2
 8005a30:	3002      	addeq	r0, #2
 8005a32:	07da      	lsls	r2, r3, #31
 8005a34:	d402      	bmi.n	8005a3c <__lo0bits+0x4e>
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	d006      	beq.n	8005a48 <__lo0bits+0x5a>
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	600b      	str	r3, [r1, #0]
 8005a3e:	4770      	bx	lr
 8005a40:	4610      	mov	r0, r2
 8005a42:	e7e9      	b.n	8005a18 <__lo0bits+0x2a>
 8005a44:	2000      	movs	r0, #0
 8005a46:	4770      	bx	lr
 8005a48:	2020      	movs	r0, #32
 8005a4a:	4770      	bx	lr

08005a4c <__i2b>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	460c      	mov	r4, r1
 8005a50:	2101      	movs	r1, #1
 8005a52:	f7ff ff27 	bl	80058a4 <_Balloc>
 8005a56:	2201      	movs	r2, #1
 8005a58:	6144      	str	r4, [r0, #20]
 8005a5a:	6102      	str	r2, [r0, #16]
 8005a5c:	bd10      	pop	{r4, pc}

08005a5e <__multiply>:
 8005a5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a62:	4614      	mov	r4, r2
 8005a64:	690a      	ldr	r2, [r1, #16]
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	bfb8      	it	lt
 8005a6c:	460b      	movlt	r3, r1
 8005a6e:	4688      	mov	r8, r1
 8005a70:	bfbc      	itt	lt
 8005a72:	46a0      	movlt	r8, r4
 8005a74:	461c      	movlt	r4, r3
 8005a76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005a7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a86:	eb07 0609 	add.w	r6, r7, r9
 8005a8a:	42b3      	cmp	r3, r6
 8005a8c:	bfb8      	it	lt
 8005a8e:	3101      	addlt	r1, #1
 8005a90:	f7ff ff08 	bl	80058a4 <_Balloc>
 8005a94:	f100 0514 	add.w	r5, r0, #20
 8005a98:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4573      	cmp	r3, lr
 8005aa2:	d316      	bcc.n	8005ad2 <__multiply+0x74>
 8005aa4:	f104 0214 	add.w	r2, r4, #20
 8005aa8:	f108 0114 	add.w	r1, r8, #20
 8005aac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005ab0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	9b00      	ldr	r3, [sp, #0]
 8005ab8:	9201      	str	r2, [sp, #4]
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d80c      	bhi.n	8005ad8 <__multiply+0x7a>
 8005abe:	2e00      	cmp	r6, #0
 8005ac0:	dd03      	ble.n	8005aca <__multiply+0x6c>
 8005ac2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d05d      	beq.n	8005b86 <__multiply+0x128>
 8005aca:	6106      	str	r6, [r0, #16]
 8005acc:	b003      	add	sp, #12
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad2:	f843 2b04 	str.w	r2, [r3], #4
 8005ad6:	e7e3      	b.n	8005aa0 <__multiply+0x42>
 8005ad8:	f8b2 b000 	ldrh.w	fp, [r2]
 8005adc:	f1bb 0f00 	cmp.w	fp, #0
 8005ae0:	d023      	beq.n	8005b2a <__multiply+0xcc>
 8005ae2:	4689      	mov	r9, r1
 8005ae4:	46ac      	mov	ip, r5
 8005ae6:	f04f 0800 	mov.w	r8, #0
 8005aea:	f859 4b04 	ldr.w	r4, [r9], #4
 8005aee:	f8dc a000 	ldr.w	sl, [ip]
 8005af2:	b2a3      	uxth	r3, r4
 8005af4:	fa1f fa8a 	uxth.w	sl, sl
 8005af8:	fb0b a303 	mla	r3, fp, r3, sl
 8005afc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b00:	f8dc 4000 	ldr.w	r4, [ip]
 8005b04:	4443      	add	r3, r8
 8005b06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b0a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005b0e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b12:	46e2      	mov	sl, ip
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b1a:	454f      	cmp	r7, r9
 8005b1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b20:	f84a 3b04 	str.w	r3, [sl], #4
 8005b24:	d82b      	bhi.n	8005b7e <__multiply+0x120>
 8005b26:	f8cc 8004 	str.w	r8, [ip, #4]
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005b30:	3204      	adds	r2, #4
 8005b32:	f1ba 0f00 	cmp.w	sl, #0
 8005b36:	d020      	beq.n	8005b7a <__multiply+0x11c>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	4689      	mov	r9, r1
 8005b3c:	46a8      	mov	r8, r5
 8005b3e:	f04f 0b00 	mov.w	fp, #0
 8005b42:	f8b9 c000 	ldrh.w	ip, [r9]
 8005b46:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005b4a:	fb0a 440c 	mla	r4, sl, ip, r4
 8005b4e:	445c      	add	r4, fp
 8005b50:	46c4      	mov	ip, r8
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b58:	f84c 3b04 	str.w	r3, [ip], #4
 8005b5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b60:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	fb0a b303 	mla	r3, sl, r3, fp
 8005b6a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005b6e:	454f      	cmp	r7, r9
 8005b70:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005b74:	d805      	bhi.n	8005b82 <__multiply+0x124>
 8005b76:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b7a:	3504      	adds	r5, #4
 8005b7c:	e79b      	b.n	8005ab6 <__multiply+0x58>
 8005b7e:	46d4      	mov	ip, sl
 8005b80:	e7b3      	b.n	8005aea <__multiply+0x8c>
 8005b82:	46e0      	mov	r8, ip
 8005b84:	e7dd      	b.n	8005b42 <__multiply+0xe4>
 8005b86:	3e01      	subs	r6, #1
 8005b88:	e799      	b.n	8005abe <__multiply+0x60>
	...

08005b8c <__pow5mult>:
 8005b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b90:	4615      	mov	r5, r2
 8005b92:	f012 0203 	ands.w	r2, r2, #3
 8005b96:	4606      	mov	r6, r0
 8005b98:	460f      	mov	r7, r1
 8005b9a:	d007      	beq.n	8005bac <__pow5mult+0x20>
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	4c21      	ldr	r4, [pc, #132]	; (8005c24 <__pow5mult+0x98>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ba6:	f7ff fec8 	bl	800593a <__multadd>
 8005baa:	4607      	mov	r7, r0
 8005bac:	10ad      	asrs	r5, r5, #2
 8005bae:	d035      	beq.n	8005c1c <__pow5mult+0x90>
 8005bb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bb2:	b93c      	cbnz	r4, 8005bc4 <__pow5mult+0x38>
 8005bb4:	2010      	movs	r0, #16
 8005bb6:	f7ff fe6d 	bl	8005894 <malloc>
 8005bba:	6270      	str	r0, [r6, #36]	; 0x24
 8005bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bc0:	6004      	str	r4, [r0, #0]
 8005bc2:	60c4      	str	r4, [r0, #12]
 8005bc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bcc:	b94c      	cbnz	r4, 8005be2 <__pow5mult+0x56>
 8005bce:	f240 2171 	movw	r1, #625	; 0x271
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ff3a 	bl	8005a4c <__i2b>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bde:	4604      	mov	r4, r0
 8005be0:	6003      	str	r3, [r0, #0]
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	07eb      	lsls	r3, r5, #31
 8005be8:	d50a      	bpl.n	8005c00 <__pow5mult+0x74>
 8005bea:	4639      	mov	r1, r7
 8005bec:	4622      	mov	r2, r4
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f7ff ff35 	bl	8005a5e <__multiply>
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4681      	mov	r9, r0
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f7ff fe87 	bl	800590c <_Bfree>
 8005bfe:	464f      	mov	r7, r9
 8005c00:	106d      	asrs	r5, r5, #1
 8005c02:	d00b      	beq.n	8005c1c <__pow5mult+0x90>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	b938      	cbnz	r0, 8005c18 <__pow5mult+0x8c>
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff ff26 	bl	8005a5e <__multiply>
 8005c12:	6020      	str	r0, [r4, #0]
 8005c14:	f8c0 8000 	str.w	r8, [r0]
 8005c18:	4604      	mov	r4, r0
 8005c1a:	e7e4      	b.n	8005be6 <__pow5mult+0x5a>
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c22:	bf00      	nop
 8005c24:	080076c8 	.word	0x080076c8

08005c28 <__lshift>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	6849      	ldr	r1, [r1, #4]
 8005c36:	eb0a 0903 	add.w	r9, sl, r3
 8005c3a:	68a3      	ldr	r3, [r4, #8]
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	4616      	mov	r6, r2
 8005c40:	f109 0501 	add.w	r5, r9, #1
 8005c44:	42ab      	cmp	r3, r5
 8005c46:	db32      	blt.n	8005cae <__lshift+0x86>
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f7ff fe2b 	bl	80058a4 <_Balloc>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4680      	mov	r8, r0
 8005c52:	f100 0114 	add.w	r1, r0, #20
 8005c56:	461a      	mov	r2, r3
 8005c58:	4553      	cmp	r3, sl
 8005c5a:	db2b      	blt.n	8005cb4 <__lshift+0x8c>
 8005c5c:	6920      	ldr	r0, [r4, #16]
 8005c5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c62:	f104 0314 	add.w	r3, r4, #20
 8005c66:	f016 021f 	ands.w	r2, r6, #31
 8005c6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c72:	d025      	beq.n	8005cc0 <__lshift+0x98>
 8005c74:	f1c2 0e20 	rsb	lr, r2, #32
 8005c78:	2000      	movs	r0, #0
 8005c7a:	681e      	ldr	r6, [r3, #0]
 8005c7c:	468a      	mov	sl, r1
 8005c7e:	4096      	lsls	r6, r2
 8005c80:	4330      	orrs	r0, r6
 8005c82:	f84a 0b04 	str.w	r0, [sl], #4
 8005c86:	f853 0b04 	ldr.w	r0, [r3], #4
 8005c8a:	459c      	cmp	ip, r3
 8005c8c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005c90:	d814      	bhi.n	8005cbc <__lshift+0x94>
 8005c92:	6048      	str	r0, [r1, #4]
 8005c94:	b108      	cbz	r0, 8005c9a <__lshift+0x72>
 8005c96:	f109 0502 	add.w	r5, r9, #2
 8005c9a:	3d01      	subs	r5, #1
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	f7ff fe32 	bl	800590c <_Bfree>
 8005ca8:	4640      	mov	r0, r8
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	3101      	adds	r1, #1
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	e7c7      	b.n	8005c44 <__lshift+0x1c>
 8005cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	e7cd      	b.n	8005c58 <__lshift+0x30>
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	e7dc      	b.n	8005c7a <__lshift+0x52>
 8005cc0:	3904      	subs	r1, #4
 8005cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cca:	459c      	cmp	ip, r3
 8005ccc:	d8f9      	bhi.n	8005cc2 <__lshift+0x9a>
 8005cce:	e7e4      	b.n	8005c9a <__lshift+0x72>

08005cd0 <__mcmp>:
 8005cd0:	6903      	ldr	r3, [r0, #16]
 8005cd2:	690a      	ldr	r2, [r1, #16]
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	b530      	push	{r4, r5, lr}
 8005cd8:	d10c      	bne.n	8005cf4 <__mcmp+0x24>
 8005cda:	0092      	lsls	r2, r2, #2
 8005cdc:	3014      	adds	r0, #20
 8005cde:	3114      	adds	r1, #20
 8005ce0:	1884      	adds	r4, r0, r2
 8005ce2:	4411      	add	r1, r2
 8005ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005cec:	4295      	cmp	r5, r2
 8005cee:	d003      	beq.n	8005cf8 <__mcmp+0x28>
 8005cf0:	d305      	bcc.n	8005cfe <__mcmp+0x2e>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	d3f3      	bcc.n	8005ce4 <__mcmp+0x14>
 8005cfc:	e7fa      	b.n	8005cf4 <__mcmp+0x24>
 8005cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d02:	e7f7      	b.n	8005cf4 <__mcmp+0x24>

08005d04 <__mdiff>:
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	460d      	mov	r5, r1
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4628      	mov	r0, r5
 8005d10:	4614      	mov	r4, r2
 8005d12:	f7ff ffdd 	bl	8005cd0 <__mcmp>
 8005d16:	1e06      	subs	r6, r0, #0
 8005d18:	d108      	bne.n	8005d2c <__mdiff+0x28>
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f7ff fdc1 	bl	80058a4 <_Balloc>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	bfa4      	itt	ge
 8005d2e:	4623      	movge	r3, r4
 8005d30:	462c      	movge	r4, r5
 8005d32:	4638      	mov	r0, r7
 8005d34:	6861      	ldr	r1, [r4, #4]
 8005d36:	bfa6      	itte	ge
 8005d38:	461d      	movge	r5, r3
 8005d3a:	2600      	movge	r6, #0
 8005d3c:	2601      	movlt	r6, #1
 8005d3e:	f7ff fdb1 	bl	80058a4 <_Balloc>
 8005d42:	692b      	ldr	r3, [r5, #16]
 8005d44:	60c6      	str	r6, [r0, #12]
 8005d46:	6926      	ldr	r6, [r4, #16]
 8005d48:	f105 0914 	add.w	r9, r5, #20
 8005d4c:	f104 0214 	add.w	r2, r4, #20
 8005d50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005d54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005d58:	f100 0514 	add.w	r5, r0, #20
 8005d5c:	f04f 0e00 	mov.w	lr, #0
 8005d60:	f852 ab04 	ldr.w	sl, [r2], #4
 8005d64:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d68:	fa1e f18a 	uxtah	r1, lr, sl
 8005d6c:	b2a3      	uxth	r3, r4
 8005d6e:	1ac9      	subs	r1, r1, r3
 8005d70:	0c23      	lsrs	r3, r4, #16
 8005d72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005d76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d7a:	b289      	uxth	r1, r1
 8005d7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005d80:	45c8      	cmp	r8, r9
 8005d82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d86:	4694      	mov	ip, r2
 8005d88:	f845 3b04 	str.w	r3, [r5], #4
 8005d8c:	d8e8      	bhi.n	8005d60 <__mdiff+0x5c>
 8005d8e:	45bc      	cmp	ip, r7
 8005d90:	d304      	bcc.n	8005d9c <__mdiff+0x98>
 8005d92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005d96:	b183      	cbz	r3, 8005dba <__mdiff+0xb6>
 8005d98:	6106      	str	r6, [r0, #16]
 8005d9a:	e7c5      	b.n	8005d28 <__mdiff+0x24>
 8005d9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005da0:	fa1e f381 	uxtah	r3, lr, r1
 8005da4:	141a      	asrs	r2, r3, #16
 8005da6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005db0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005db4:	f845 3b04 	str.w	r3, [r5], #4
 8005db8:	e7e9      	b.n	8005d8e <__mdiff+0x8a>
 8005dba:	3e01      	subs	r6, #1
 8005dbc:	e7e9      	b.n	8005d92 <__mdiff+0x8e>

08005dbe <__d2b>:
 8005dbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dc2:	460e      	mov	r6, r1
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	ec59 8b10 	vmov	r8, r9, d0
 8005dca:	4615      	mov	r5, r2
 8005dcc:	f7ff fd6a 	bl	80058a4 <_Balloc>
 8005dd0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dda:	bb34      	cbnz	r4, 8005e2a <__d2b+0x6c>
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	f1b8 0300 	subs.w	r3, r8, #0
 8005de2:	d027      	beq.n	8005e34 <__d2b+0x76>
 8005de4:	a802      	add	r0, sp, #8
 8005de6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005dea:	f7ff fe00 	bl	80059ee <__lo0bits>
 8005dee:	9900      	ldr	r1, [sp, #0]
 8005df0:	b1f0      	cbz	r0, 8005e30 <__d2b+0x72>
 8005df2:	9a01      	ldr	r2, [sp, #4]
 8005df4:	f1c0 0320 	rsb	r3, r0, #32
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	40c2      	lsrs	r2, r0
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	9201      	str	r2, [sp, #4]
 8005e04:	9b01      	ldr	r3, [sp, #4]
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf14      	ite	ne
 8005e0c:	2102      	movne	r1, #2
 8005e0e:	2101      	moveq	r1, #1
 8005e10:	6139      	str	r1, [r7, #16]
 8005e12:	b1c4      	cbz	r4, 8005e46 <__d2b+0x88>
 8005e14:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e18:	4404      	add	r4, r0
 8005e1a:	6034      	str	r4, [r6, #0]
 8005e1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e20:	6028      	str	r0, [r5, #0]
 8005e22:	4638      	mov	r0, r7
 8005e24:	b003      	add	sp, #12
 8005e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e2e:	e7d5      	b.n	8005ddc <__d2b+0x1e>
 8005e30:	6179      	str	r1, [r7, #20]
 8005e32:	e7e7      	b.n	8005e04 <__d2b+0x46>
 8005e34:	a801      	add	r0, sp, #4
 8005e36:	f7ff fdda 	bl	80059ee <__lo0bits>
 8005e3a:	9b01      	ldr	r3, [sp, #4]
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	2101      	movs	r1, #1
 8005e40:	6139      	str	r1, [r7, #16]
 8005e42:	3020      	adds	r0, #32
 8005e44:	e7e5      	b.n	8005e12 <__d2b+0x54>
 8005e46:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005e4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e4e:	6030      	str	r0, [r6, #0]
 8005e50:	6918      	ldr	r0, [r3, #16]
 8005e52:	f7ff fdad 	bl	80059b0 <__hi0bits>
 8005e56:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005e5a:	e7e1      	b.n	8005e20 <__d2b+0x62>

08005e5c <_calloc_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	fb02 f401 	mul.w	r4, r2, r1
 8005e62:	4621      	mov	r1, r4
 8005e64:	f000 f856 	bl	8005f14 <_malloc_r>
 8005e68:	4605      	mov	r5, r0
 8005e6a:	b118      	cbz	r0, 8005e74 <_calloc_r+0x18>
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	2100      	movs	r1, #0
 8005e70:	f7fe fa37 	bl	80042e2 <memset>
 8005e74:	4628      	mov	r0, r5
 8005e76:	bd38      	pop	{r3, r4, r5, pc}

08005e78 <_free_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	d045      	beq.n	8005f0c <_free_r+0x94>
 8005e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e84:	1f0c      	subs	r4, r1, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bfb8      	it	lt
 8005e8a:	18e4      	addlt	r4, r4, r3
 8005e8c:	f000 fa29 	bl	80062e2 <__malloc_lock>
 8005e90:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <_free_r+0x98>)
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	4610      	mov	r0, r2
 8005e96:	b933      	cbnz	r3, 8005ea6 <_free_r+0x2e>
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	6014      	str	r4, [r2, #0]
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea2:	f000 ba1f 	b.w	80062e4 <__malloc_unlock>
 8005ea6:	42a3      	cmp	r3, r4
 8005ea8:	d90c      	bls.n	8005ec4 <_free_r+0x4c>
 8005eaa:	6821      	ldr	r1, [r4, #0]
 8005eac:	1862      	adds	r2, r4, r1
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	bf04      	itt	eq
 8005eb2:	681a      	ldreq	r2, [r3, #0]
 8005eb4:	685b      	ldreq	r3, [r3, #4]
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	bf04      	itt	eq
 8005eba:	1852      	addeq	r2, r2, r1
 8005ebc:	6022      	streq	r2, [r4, #0]
 8005ebe:	6004      	str	r4, [r0, #0]
 8005ec0:	e7ec      	b.n	8005e9c <_free_r+0x24>
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	b10a      	cbz	r2, 8005ecc <_free_r+0x54>
 8005ec8:	42a2      	cmp	r2, r4
 8005eca:	d9fa      	bls.n	8005ec2 <_free_r+0x4a>
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	1858      	adds	r0, r3, r1
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d10b      	bne.n	8005eec <_free_r+0x74>
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	1858      	adds	r0, r3, r1
 8005eda:	4282      	cmp	r2, r0
 8005edc:	6019      	str	r1, [r3, #0]
 8005ede:	d1dd      	bne.n	8005e9c <_free_r+0x24>
 8005ee0:	6810      	ldr	r0, [r2, #0]
 8005ee2:	6852      	ldr	r2, [r2, #4]
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	4401      	add	r1, r0
 8005ee8:	6019      	str	r1, [r3, #0]
 8005eea:	e7d7      	b.n	8005e9c <_free_r+0x24>
 8005eec:	d902      	bls.n	8005ef4 <_free_r+0x7c>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	e7d3      	b.n	8005e9c <_free_r+0x24>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428a      	cmp	r2, r1
 8005efa:	bf04      	itt	eq
 8005efc:	6811      	ldreq	r1, [r2, #0]
 8005efe:	6852      	ldreq	r2, [r2, #4]
 8005f00:	6062      	str	r2, [r4, #4]
 8005f02:	bf04      	itt	eq
 8005f04:	1809      	addeq	r1, r1, r0
 8005f06:	6021      	streq	r1, [r4, #0]
 8005f08:	605c      	str	r4, [r3, #4]
 8005f0a:	e7c7      	b.n	8005e9c <_free_r+0x24>
 8005f0c:	bd38      	pop	{r3, r4, r5, pc}
 8005f0e:	bf00      	nop
 8005f10:	2000022c 	.word	0x2000022c

08005f14 <_malloc_r>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	1ccd      	adds	r5, r1, #3
 8005f18:	f025 0503 	bic.w	r5, r5, #3
 8005f1c:	3508      	adds	r5, #8
 8005f1e:	2d0c      	cmp	r5, #12
 8005f20:	bf38      	it	cc
 8005f22:	250c      	movcc	r5, #12
 8005f24:	2d00      	cmp	r5, #0
 8005f26:	4606      	mov	r6, r0
 8005f28:	db01      	blt.n	8005f2e <_malloc_r+0x1a>
 8005f2a:	42a9      	cmp	r1, r5
 8005f2c:	d903      	bls.n	8005f36 <_malloc_r+0x22>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	2000      	movs	r0, #0
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
 8005f36:	f000 f9d4 	bl	80062e2 <__malloc_lock>
 8005f3a:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <_malloc_r+0xac>)
 8005f3c:	6814      	ldr	r4, [r2, #0]
 8005f3e:	4621      	mov	r1, r4
 8005f40:	b991      	cbnz	r1, 8005f68 <_malloc_r+0x54>
 8005f42:	4c20      	ldr	r4, [pc, #128]	; (8005fc4 <_malloc_r+0xb0>)
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	b91b      	cbnz	r3, 8005f50 <_malloc_r+0x3c>
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f000 f98f 	bl	800626c <_sbrk_r>
 8005f4e:	6020      	str	r0, [r4, #0]
 8005f50:	4629      	mov	r1, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	f000 f98a 	bl	800626c <_sbrk_r>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d124      	bne.n	8005fa6 <_malloc_r+0x92>
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	6033      	str	r3, [r6, #0]
 8005f60:	4630      	mov	r0, r6
 8005f62:	f000 f9bf 	bl	80062e4 <__malloc_unlock>
 8005f66:	e7e4      	b.n	8005f32 <_malloc_r+0x1e>
 8005f68:	680b      	ldr	r3, [r1, #0]
 8005f6a:	1b5b      	subs	r3, r3, r5
 8005f6c:	d418      	bmi.n	8005fa0 <_malloc_r+0x8c>
 8005f6e:	2b0b      	cmp	r3, #11
 8005f70:	d90f      	bls.n	8005f92 <_malloc_r+0x7e>
 8005f72:	600b      	str	r3, [r1, #0]
 8005f74:	50cd      	str	r5, [r1, r3]
 8005f76:	18cc      	adds	r4, r1, r3
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f000 f9b3 	bl	80062e4 <__malloc_unlock>
 8005f7e:	f104 000b 	add.w	r0, r4, #11
 8005f82:	1d23      	adds	r3, r4, #4
 8005f84:	f020 0007 	bic.w	r0, r0, #7
 8005f88:	1ac3      	subs	r3, r0, r3
 8005f8a:	d0d3      	beq.n	8005f34 <_malloc_r+0x20>
 8005f8c:	425a      	negs	r2, r3
 8005f8e:	50e2      	str	r2, [r4, r3]
 8005f90:	e7d0      	b.n	8005f34 <_malloc_r+0x20>
 8005f92:	428c      	cmp	r4, r1
 8005f94:	684b      	ldr	r3, [r1, #4]
 8005f96:	bf16      	itet	ne
 8005f98:	6063      	strne	r3, [r4, #4]
 8005f9a:	6013      	streq	r3, [r2, #0]
 8005f9c:	460c      	movne	r4, r1
 8005f9e:	e7eb      	b.n	8005f78 <_malloc_r+0x64>
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	6849      	ldr	r1, [r1, #4]
 8005fa4:	e7cc      	b.n	8005f40 <_malloc_r+0x2c>
 8005fa6:	1cc4      	adds	r4, r0, #3
 8005fa8:	f024 0403 	bic.w	r4, r4, #3
 8005fac:	42a0      	cmp	r0, r4
 8005fae:	d005      	beq.n	8005fbc <_malloc_r+0xa8>
 8005fb0:	1a21      	subs	r1, r4, r0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 f95a 	bl	800626c <_sbrk_r>
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d0cf      	beq.n	8005f5c <_malloc_r+0x48>
 8005fbc:	6025      	str	r5, [r4, #0]
 8005fbe:	e7db      	b.n	8005f78 <_malloc_r+0x64>
 8005fc0:	2000022c 	.word	0x2000022c
 8005fc4:	20000230 	.word	0x20000230

08005fc8 <__ssputs_r>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	688e      	ldr	r6, [r1, #8]
 8005fce:	429e      	cmp	r6, r3
 8005fd0:	4682      	mov	sl, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4690      	mov	r8, r2
 8005fd6:	4699      	mov	r9, r3
 8005fd8:	d837      	bhi.n	800604a <__ssputs_r+0x82>
 8005fda:	898a      	ldrh	r2, [r1, #12]
 8005fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fe0:	d031      	beq.n	8006046 <__ssputs_r+0x7e>
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	6909      	ldr	r1, [r1, #16]
 8005fe6:	1a6f      	subs	r7, r5, r1
 8005fe8:	6965      	ldr	r5, [r4, #20]
 8005fea:	2302      	movs	r3, #2
 8005fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ff0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ff4:	f109 0301 	add.w	r3, r9, #1
 8005ff8:	443b      	add	r3, r7
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	bf38      	it	cc
 8005ffe:	461d      	movcc	r5, r3
 8006000:	0553      	lsls	r3, r2, #21
 8006002:	d530      	bpl.n	8006066 <__ssputs_r+0x9e>
 8006004:	4629      	mov	r1, r5
 8006006:	f7ff ff85 	bl	8005f14 <_malloc_r>
 800600a:	4606      	mov	r6, r0
 800600c:	b950      	cbnz	r0, 8006024 <__ssputs_r+0x5c>
 800600e:	230c      	movs	r3, #12
 8006010:	f8ca 3000 	str.w	r3, [sl]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	463a      	mov	r2, r7
 8006026:	6921      	ldr	r1, [r4, #16]
 8006028:	f7fe f950 	bl	80042cc <memcpy>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	6126      	str	r6, [r4, #16]
 800603a:	6165      	str	r5, [r4, #20]
 800603c:	443e      	add	r6, r7
 800603e:	1bed      	subs	r5, r5, r7
 8006040:	6026      	str	r6, [r4, #0]
 8006042:	60a5      	str	r5, [r4, #8]
 8006044:	464e      	mov	r6, r9
 8006046:	454e      	cmp	r6, r9
 8006048:	d900      	bls.n	800604c <__ssputs_r+0x84>
 800604a:	464e      	mov	r6, r9
 800604c:	4632      	mov	r2, r6
 800604e:	4641      	mov	r1, r8
 8006050:	6820      	ldr	r0, [r4, #0]
 8006052:	f000 f92d 	bl	80062b0 <memmove>
 8006056:	68a3      	ldr	r3, [r4, #8]
 8006058:	1b9b      	subs	r3, r3, r6
 800605a:	60a3      	str	r3, [r4, #8]
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	441e      	add	r6, r3
 8006060:	6026      	str	r6, [r4, #0]
 8006062:	2000      	movs	r0, #0
 8006064:	e7dc      	b.n	8006020 <__ssputs_r+0x58>
 8006066:	462a      	mov	r2, r5
 8006068:	f000 f93d 	bl	80062e6 <_realloc_r>
 800606c:	4606      	mov	r6, r0
 800606e:	2800      	cmp	r0, #0
 8006070:	d1e2      	bne.n	8006038 <__ssputs_r+0x70>
 8006072:	6921      	ldr	r1, [r4, #16]
 8006074:	4650      	mov	r0, sl
 8006076:	f7ff feff 	bl	8005e78 <_free_r>
 800607a:	e7c8      	b.n	800600e <__ssputs_r+0x46>

0800607c <_svfiprintf_r>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	461d      	mov	r5, r3
 8006082:	898b      	ldrh	r3, [r1, #12]
 8006084:	061f      	lsls	r7, r3, #24
 8006086:	b09d      	sub	sp, #116	; 0x74
 8006088:	4680      	mov	r8, r0
 800608a:	460c      	mov	r4, r1
 800608c:	4616      	mov	r6, r2
 800608e:	d50f      	bpl.n	80060b0 <_svfiprintf_r+0x34>
 8006090:	690b      	ldr	r3, [r1, #16]
 8006092:	b96b      	cbnz	r3, 80060b0 <_svfiprintf_r+0x34>
 8006094:	2140      	movs	r1, #64	; 0x40
 8006096:	f7ff ff3d 	bl	8005f14 <_malloc_r>
 800609a:	6020      	str	r0, [r4, #0]
 800609c:	6120      	str	r0, [r4, #16]
 800609e:	b928      	cbnz	r0, 80060ac <_svfiprintf_r+0x30>
 80060a0:	230c      	movs	r3, #12
 80060a2:	f8c8 3000 	str.w	r3, [r8]
 80060a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060aa:	e0c8      	b.n	800623e <_svfiprintf_r+0x1c2>
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	6163      	str	r3, [r4, #20]
 80060b0:	2300      	movs	r3, #0
 80060b2:	9309      	str	r3, [sp, #36]	; 0x24
 80060b4:	2320      	movs	r3, #32
 80060b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ba:	2330      	movs	r3, #48	; 0x30
 80060bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c0:	9503      	str	r5, [sp, #12]
 80060c2:	f04f 0b01 	mov.w	fp, #1
 80060c6:	4637      	mov	r7, r6
 80060c8:	463d      	mov	r5, r7
 80060ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060ce:	b10b      	cbz	r3, 80060d4 <_svfiprintf_r+0x58>
 80060d0:	2b25      	cmp	r3, #37	; 0x25
 80060d2:	d13e      	bne.n	8006152 <_svfiprintf_r+0xd6>
 80060d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80060d8:	d00b      	beq.n	80060f2 <_svfiprintf_r+0x76>
 80060da:	4653      	mov	r3, sl
 80060dc:	4632      	mov	r2, r6
 80060de:	4621      	mov	r1, r4
 80060e0:	4640      	mov	r0, r8
 80060e2:	f7ff ff71 	bl	8005fc8 <__ssputs_r>
 80060e6:	3001      	adds	r0, #1
 80060e8:	f000 80a4 	beq.w	8006234 <_svfiprintf_r+0x1b8>
 80060ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ee:	4453      	add	r3, sl
 80060f0:	9309      	str	r3, [sp, #36]	; 0x24
 80060f2:	783b      	ldrb	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 809d 	beq.w	8006234 <_svfiprintf_r+0x1b8>
 80060fa:	2300      	movs	r3, #0
 80060fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	9307      	str	r3, [sp, #28]
 8006108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800610c:	931a      	str	r3, [sp, #104]	; 0x68
 800610e:	462f      	mov	r7, r5
 8006110:	2205      	movs	r2, #5
 8006112:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006116:	4850      	ldr	r0, [pc, #320]	; (8006258 <_svfiprintf_r+0x1dc>)
 8006118:	f7fa f86a 	bl	80001f0 <memchr>
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	b9d0      	cbnz	r0, 8006156 <_svfiprintf_r+0xda>
 8006120:	06d9      	lsls	r1, r3, #27
 8006122:	bf44      	itt	mi
 8006124:	2220      	movmi	r2, #32
 8006126:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800612a:	071a      	lsls	r2, r3, #28
 800612c:	bf44      	itt	mi
 800612e:	222b      	movmi	r2, #43	; 0x2b
 8006130:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006134:	782a      	ldrb	r2, [r5, #0]
 8006136:	2a2a      	cmp	r2, #42	; 0x2a
 8006138:	d015      	beq.n	8006166 <_svfiprintf_r+0xea>
 800613a:	9a07      	ldr	r2, [sp, #28]
 800613c:	462f      	mov	r7, r5
 800613e:	2000      	movs	r0, #0
 8006140:	250a      	movs	r5, #10
 8006142:	4639      	mov	r1, r7
 8006144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006148:	3b30      	subs	r3, #48	; 0x30
 800614a:	2b09      	cmp	r3, #9
 800614c:	d94d      	bls.n	80061ea <_svfiprintf_r+0x16e>
 800614e:	b1b8      	cbz	r0, 8006180 <_svfiprintf_r+0x104>
 8006150:	e00f      	b.n	8006172 <_svfiprintf_r+0xf6>
 8006152:	462f      	mov	r7, r5
 8006154:	e7b8      	b.n	80060c8 <_svfiprintf_r+0x4c>
 8006156:	4a40      	ldr	r2, [pc, #256]	; (8006258 <_svfiprintf_r+0x1dc>)
 8006158:	1a80      	subs	r0, r0, r2
 800615a:	fa0b f000 	lsl.w	r0, fp, r0
 800615e:	4318      	orrs	r0, r3
 8006160:	9004      	str	r0, [sp, #16]
 8006162:	463d      	mov	r5, r7
 8006164:	e7d3      	b.n	800610e <_svfiprintf_r+0x92>
 8006166:	9a03      	ldr	r2, [sp, #12]
 8006168:	1d11      	adds	r1, r2, #4
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	9103      	str	r1, [sp, #12]
 800616e:	2a00      	cmp	r2, #0
 8006170:	db01      	blt.n	8006176 <_svfiprintf_r+0xfa>
 8006172:	9207      	str	r2, [sp, #28]
 8006174:	e004      	b.n	8006180 <_svfiprintf_r+0x104>
 8006176:	4252      	negs	r2, r2
 8006178:	f043 0302 	orr.w	r3, r3, #2
 800617c:	9207      	str	r2, [sp, #28]
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	783b      	ldrb	r3, [r7, #0]
 8006182:	2b2e      	cmp	r3, #46	; 0x2e
 8006184:	d10c      	bne.n	80061a0 <_svfiprintf_r+0x124>
 8006186:	787b      	ldrb	r3, [r7, #1]
 8006188:	2b2a      	cmp	r3, #42	; 0x2a
 800618a:	d133      	bne.n	80061f4 <_svfiprintf_r+0x178>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9203      	str	r2, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	bfb8      	it	lt
 8006198:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800619c:	3702      	adds	r7, #2
 800619e:	9305      	str	r3, [sp, #20]
 80061a0:	4d2e      	ldr	r5, [pc, #184]	; (800625c <_svfiprintf_r+0x1e0>)
 80061a2:	7839      	ldrb	r1, [r7, #0]
 80061a4:	2203      	movs	r2, #3
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7fa f822 	bl	80001f0 <memchr>
 80061ac:	b138      	cbz	r0, 80061be <_svfiprintf_r+0x142>
 80061ae:	2340      	movs	r3, #64	; 0x40
 80061b0:	1b40      	subs	r0, r0, r5
 80061b2:	fa03 f000 	lsl.w	r0, r3, r0
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	4303      	orrs	r3, r0
 80061ba:	3701      	adds	r7, #1
 80061bc:	9304      	str	r3, [sp, #16]
 80061be:	7839      	ldrb	r1, [r7, #0]
 80061c0:	4827      	ldr	r0, [pc, #156]	; (8006260 <_svfiprintf_r+0x1e4>)
 80061c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061c6:	2206      	movs	r2, #6
 80061c8:	1c7e      	adds	r6, r7, #1
 80061ca:	f7fa f811 	bl	80001f0 <memchr>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d038      	beq.n	8006244 <_svfiprintf_r+0x1c8>
 80061d2:	4b24      	ldr	r3, [pc, #144]	; (8006264 <_svfiprintf_r+0x1e8>)
 80061d4:	bb13      	cbnz	r3, 800621c <_svfiprintf_r+0x1a0>
 80061d6:	9b03      	ldr	r3, [sp, #12]
 80061d8:	3307      	adds	r3, #7
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	3308      	adds	r3, #8
 80061e0:	9303      	str	r3, [sp, #12]
 80061e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e4:	444b      	add	r3, r9
 80061e6:	9309      	str	r3, [sp, #36]	; 0x24
 80061e8:	e76d      	b.n	80060c6 <_svfiprintf_r+0x4a>
 80061ea:	fb05 3202 	mla	r2, r5, r2, r3
 80061ee:	2001      	movs	r0, #1
 80061f0:	460f      	mov	r7, r1
 80061f2:	e7a6      	b.n	8006142 <_svfiprintf_r+0xc6>
 80061f4:	2300      	movs	r3, #0
 80061f6:	3701      	adds	r7, #1
 80061f8:	9305      	str	r3, [sp, #20]
 80061fa:	4619      	mov	r1, r3
 80061fc:	250a      	movs	r5, #10
 80061fe:	4638      	mov	r0, r7
 8006200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006204:	3a30      	subs	r2, #48	; 0x30
 8006206:	2a09      	cmp	r2, #9
 8006208:	d903      	bls.n	8006212 <_svfiprintf_r+0x196>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0c8      	beq.n	80061a0 <_svfiprintf_r+0x124>
 800620e:	9105      	str	r1, [sp, #20]
 8006210:	e7c6      	b.n	80061a0 <_svfiprintf_r+0x124>
 8006212:	fb05 2101 	mla	r1, r5, r1, r2
 8006216:	2301      	movs	r3, #1
 8006218:	4607      	mov	r7, r0
 800621a:	e7f0      	b.n	80061fe <_svfiprintf_r+0x182>
 800621c:	ab03      	add	r3, sp, #12
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	4622      	mov	r2, r4
 8006222:	4b11      	ldr	r3, [pc, #68]	; (8006268 <_svfiprintf_r+0x1ec>)
 8006224:	a904      	add	r1, sp, #16
 8006226:	4640      	mov	r0, r8
 8006228:	f7fe f8f8 	bl	800441c <_printf_float>
 800622c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006230:	4681      	mov	r9, r0
 8006232:	d1d6      	bne.n	80061e2 <_svfiprintf_r+0x166>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	065b      	lsls	r3, r3, #25
 8006238:	f53f af35 	bmi.w	80060a6 <_svfiprintf_r+0x2a>
 800623c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800623e:	b01d      	add	sp, #116	; 0x74
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	ab03      	add	r3, sp, #12
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	4622      	mov	r2, r4
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <_svfiprintf_r+0x1ec>)
 800624c:	a904      	add	r1, sp, #16
 800624e:	4640      	mov	r0, r8
 8006250:	f7fe fb9a 	bl	8004988 <_printf_i>
 8006254:	e7ea      	b.n	800622c <_svfiprintf_r+0x1b0>
 8006256:	bf00      	nop
 8006258:	080076d4 	.word	0x080076d4
 800625c:	080076da 	.word	0x080076da
 8006260:	080076de 	.word	0x080076de
 8006264:	0800441d 	.word	0x0800441d
 8006268:	08005fc9 	.word	0x08005fc9

0800626c <_sbrk_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4c06      	ldr	r4, [pc, #24]	; (8006288 <_sbrk_r+0x1c>)
 8006270:	2300      	movs	r3, #0
 8006272:	4605      	mov	r5, r0
 8006274:	4608      	mov	r0, r1
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	f7fb ff66 	bl	8002148 <_sbrk>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_sbrk_r+0x1a>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	b103      	cbz	r3, 8006286 <_sbrk_r+0x1a>
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	200003e0 	.word	0x200003e0

0800628c <__ascii_mbtowc>:
 800628c:	b082      	sub	sp, #8
 800628e:	b901      	cbnz	r1, 8006292 <__ascii_mbtowc+0x6>
 8006290:	a901      	add	r1, sp, #4
 8006292:	b142      	cbz	r2, 80062a6 <__ascii_mbtowc+0x1a>
 8006294:	b14b      	cbz	r3, 80062aa <__ascii_mbtowc+0x1e>
 8006296:	7813      	ldrb	r3, [r2, #0]
 8006298:	600b      	str	r3, [r1, #0]
 800629a:	7812      	ldrb	r2, [r2, #0]
 800629c:	1c10      	adds	r0, r2, #0
 800629e:	bf18      	it	ne
 80062a0:	2001      	movne	r0, #1
 80062a2:	b002      	add	sp, #8
 80062a4:	4770      	bx	lr
 80062a6:	4610      	mov	r0, r2
 80062a8:	e7fb      	b.n	80062a2 <__ascii_mbtowc+0x16>
 80062aa:	f06f 0001 	mvn.w	r0, #1
 80062ae:	e7f8      	b.n	80062a2 <__ascii_mbtowc+0x16>

080062b0 <memmove>:
 80062b0:	4288      	cmp	r0, r1
 80062b2:	b510      	push	{r4, lr}
 80062b4:	eb01 0302 	add.w	r3, r1, r2
 80062b8:	d807      	bhi.n	80062ca <memmove+0x1a>
 80062ba:	1e42      	subs	r2, r0, #1
 80062bc:	4299      	cmp	r1, r3
 80062be:	d00a      	beq.n	80062d6 <memmove+0x26>
 80062c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062c8:	e7f8      	b.n	80062bc <memmove+0xc>
 80062ca:	4283      	cmp	r3, r0
 80062cc:	d9f5      	bls.n	80062ba <memmove+0xa>
 80062ce:	1881      	adds	r1, r0, r2
 80062d0:	1ad2      	subs	r2, r2, r3
 80062d2:	42d3      	cmn	r3, r2
 80062d4:	d100      	bne.n	80062d8 <memmove+0x28>
 80062d6:	bd10      	pop	{r4, pc}
 80062d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80062e0:	e7f7      	b.n	80062d2 <memmove+0x22>

080062e2 <__malloc_lock>:
 80062e2:	4770      	bx	lr

080062e4 <__malloc_unlock>:
 80062e4:	4770      	bx	lr

080062e6 <_realloc_r>:
 80062e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e8:	4607      	mov	r7, r0
 80062ea:	4614      	mov	r4, r2
 80062ec:	460e      	mov	r6, r1
 80062ee:	b921      	cbnz	r1, 80062fa <_realloc_r+0x14>
 80062f0:	4611      	mov	r1, r2
 80062f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062f6:	f7ff be0d 	b.w	8005f14 <_malloc_r>
 80062fa:	b922      	cbnz	r2, 8006306 <_realloc_r+0x20>
 80062fc:	f7ff fdbc 	bl	8005e78 <_free_r>
 8006300:	4625      	mov	r5, r4
 8006302:	4628      	mov	r0, r5
 8006304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006306:	f000 f821 	bl	800634c <_malloc_usable_size_r>
 800630a:	42a0      	cmp	r0, r4
 800630c:	d20f      	bcs.n	800632e <_realloc_r+0x48>
 800630e:	4621      	mov	r1, r4
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff fdff 	bl	8005f14 <_malloc_r>
 8006316:	4605      	mov	r5, r0
 8006318:	2800      	cmp	r0, #0
 800631a:	d0f2      	beq.n	8006302 <_realloc_r+0x1c>
 800631c:	4631      	mov	r1, r6
 800631e:	4622      	mov	r2, r4
 8006320:	f7fd ffd4 	bl	80042cc <memcpy>
 8006324:	4631      	mov	r1, r6
 8006326:	4638      	mov	r0, r7
 8006328:	f7ff fda6 	bl	8005e78 <_free_r>
 800632c:	e7e9      	b.n	8006302 <_realloc_r+0x1c>
 800632e:	4635      	mov	r5, r6
 8006330:	e7e7      	b.n	8006302 <_realloc_r+0x1c>

08006332 <__ascii_wctomb>:
 8006332:	b149      	cbz	r1, 8006348 <__ascii_wctomb+0x16>
 8006334:	2aff      	cmp	r2, #255	; 0xff
 8006336:	bf85      	ittet	hi
 8006338:	238a      	movhi	r3, #138	; 0x8a
 800633a:	6003      	strhi	r3, [r0, #0]
 800633c:	700a      	strbls	r2, [r1, #0]
 800633e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006342:	bf98      	it	ls
 8006344:	2001      	movls	r0, #1
 8006346:	4770      	bx	lr
 8006348:	4608      	mov	r0, r1
 800634a:	4770      	bx	lr

0800634c <_malloc_usable_size_r>:
 800634c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006350:	1f18      	subs	r0, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	bfbc      	itt	lt
 8006356:	580b      	ldrlt	r3, [r1, r0]
 8006358:	18c0      	addlt	r0, r0, r3
 800635a:	4770      	bx	lr

0800635c <pow>:
 800635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	ed2d 8b04 	vpush	{d8-d9}
 8006364:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006638 <pow+0x2dc>
 8006368:	b08d      	sub	sp, #52	; 0x34
 800636a:	ec57 6b10 	vmov	r6, r7, d0
 800636e:	ec55 4b11 	vmov	r4, r5, d1
 8006372:	f000 f965 	bl	8006640 <__ieee754_pow>
 8006376:	f999 3000 	ldrsb.w	r3, [r9]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	eeb0 8a40 	vmov.f32	s16, s0
 8006382:	eef0 8a60 	vmov.f32	s17, s1
 8006386:	46c8      	mov	r8, r9
 8006388:	d05f      	beq.n	800644a <pow+0xee>
 800638a:	4622      	mov	r2, r4
 800638c:	462b      	mov	r3, r5
 800638e:	4620      	mov	r0, r4
 8006390:	4629      	mov	r1, r5
 8006392:	f7fa fbd3 	bl	8000b3c <__aeabi_dcmpun>
 8006396:	4683      	mov	fp, r0
 8006398:	2800      	cmp	r0, #0
 800639a:	d156      	bne.n	800644a <pow+0xee>
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	4630      	mov	r0, r6
 80063a2:	4639      	mov	r1, r7
 80063a4:	f7fa fbca 	bl	8000b3c <__aeabi_dcmpun>
 80063a8:	9001      	str	r0, [sp, #4]
 80063aa:	b1e8      	cbz	r0, 80063e8 <pow+0x8c>
 80063ac:	2200      	movs	r2, #0
 80063ae:	2300      	movs	r3, #0
 80063b0:	4620      	mov	r0, r4
 80063b2:	4629      	mov	r1, r5
 80063b4:	f7fa fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d046      	beq.n	800644a <pow+0xee>
 80063bc:	2301      	movs	r3, #1
 80063be:	9302      	str	r3, [sp, #8]
 80063c0:	4b96      	ldr	r3, [pc, #600]	; (800661c <pow+0x2c0>)
 80063c2:	9303      	str	r3, [sp, #12]
 80063c4:	4b96      	ldr	r3, [pc, #600]	; (8006620 <pow+0x2c4>)
 80063c6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80063ca:	2200      	movs	r2, #0
 80063cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063d0:	9b00      	ldr	r3, [sp, #0]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80063d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80063dc:	d033      	beq.n	8006446 <pow+0xea>
 80063de:	a802      	add	r0, sp, #8
 80063e0:	f000 fefd 	bl	80071de <matherr>
 80063e4:	bb48      	cbnz	r0, 800643a <pow+0xde>
 80063e6:	e05d      	b.n	80064a4 <pow+0x148>
 80063e8:	f04f 0a00 	mov.w	sl, #0
 80063ec:	f04f 0b00 	mov.w	fp, #0
 80063f0:	4652      	mov	r2, sl
 80063f2:	465b      	mov	r3, fp
 80063f4:	4630      	mov	r0, r6
 80063f6:	4639      	mov	r1, r7
 80063f8:	f7fa fb6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80063fc:	ec4b ab19 	vmov	d9, sl, fp
 8006400:	2800      	cmp	r0, #0
 8006402:	d054      	beq.n	80064ae <pow+0x152>
 8006404:	4652      	mov	r2, sl
 8006406:	465b      	mov	r3, fp
 8006408:	4620      	mov	r0, r4
 800640a:	4629      	mov	r1, r5
 800640c:	f7fa fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 8006410:	4680      	mov	r8, r0
 8006412:	b318      	cbz	r0, 800645c <pow+0x100>
 8006414:	2301      	movs	r3, #1
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	4b80      	ldr	r3, [pc, #512]	; (800661c <pow+0x2c0>)
 800641a:	9303      	str	r3, [sp, #12]
 800641c:	9b01      	ldr	r3, [sp, #4]
 800641e:	930a      	str	r3, [sp, #40]	; 0x28
 8006420:	9b00      	ldr	r3, [sp, #0]
 8006422:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006426:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800642a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0d5      	beq.n	80063de <pow+0x82>
 8006432:	4b7b      	ldr	r3, [pc, #492]	; (8006620 <pow+0x2c4>)
 8006434:	2200      	movs	r2, #0
 8006436:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800643a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800643c:	b11b      	cbz	r3, 8006446 <pow+0xea>
 800643e:	f7fd ff1b 	bl	8004278 <__errno>
 8006442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006444:	6003      	str	r3, [r0, #0]
 8006446:	ed9d 8b08 	vldr	d8, [sp, #32]
 800644a:	eeb0 0a48 	vmov.f32	s0, s16
 800644e:	eef0 0a68 	vmov.f32	s1, s17
 8006452:	b00d      	add	sp, #52	; 0x34
 8006454:	ecbd 8b04 	vpop	{d8-d9}
 8006458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645c:	ec45 4b10 	vmov	d0, r4, r5
 8006460:	f000 feb5 	bl	80071ce <finite>
 8006464:	2800      	cmp	r0, #0
 8006466:	d0f0      	beq.n	800644a <pow+0xee>
 8006468:	4652      	mov	r2, sl
 800646a:	465b      	mov	r3, fp
 800646c:	4620      	mov	r0, r4
 800646e:	4629      	mov	r1, r5
 8006470:	f7fa fb3c 	bl	8000aec <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	d0e8      	beq.n	800644a <pow+0xee>
 8006478:	2301      	movs	r3, #1
 800647a:	9302      	str	r3, [sp, #8]
 800647c:	4b67      	ldr	r3, [pc, #412]	; (800661c <pow+0x2c0>)
 800647e:	9303      	str	r3, [sp, #12]
 8006480:	f999 3000 	ldrsb.w	r3, [r9]
 8006484:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006488:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800648c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006490:	b913      	cbnz	r3, 8006498 <pow+0x13c>
 8006492:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006496:	e7a2      	b.n	80063de <pow+0x82>
 8006498:	4962      	ldr	r1, [pc, #392]	; (8006624 <pow+0x2c8>)
 800649a:	2000      	movs	r0, #0
 800649c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d19c      	bne.n	80063de <pow+0x82>
 80064a4:	f7fd fee8 	bl	8004278 <__errno>
 80064a8:	2321      	movs	r3, #33	; 0x21
 80064aa:	6003      	str	r3, [r0, #0]
 80064ac:	e7c5      	b.n	800643a <pow+0xde>
 80064ae:	eeb0 0a48 	vmov.f32	s0, s16
 80064b2:	eef0 0a68 	vmov.f32	s1, s17
 80064b6:	f000 fe8a 	bl	80071ce <finite>
 80064ba:	9000      	str	r0, [sp, #0]
 80064bc:	2800      	cmp	r0, #0
 80064be:	f040 8081 	bne.w	80065c4 <pow+0x268>
 80064c2:	ec47 6b10 	vmov	d0, r6, r7
 80064c6:	f000 fe82 	bl	80071ce <finite>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d07a      	beq.n	80065c4 <pow+0x268>
 80064ce:	ec45 4b10 	vmov	d0, r4, r5
 80064d2:	f000 fe7c 	bl	80071ce <finite>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d074      	beq.n	80065c4 <pow+0x268>
 80064da:	ec53 2b18 	vmov	r2, r3, d8
 80064de:	ee18 0a10 	vmov	r0, s16
 80064e2:	4619      	mov	r1, r3
 80064e4:	f7fa fb2a 	bl	8000b3c <__aeabi_dcmpun>
 80064e8:	f999 9000 	ldrsb.w	r9, [r9]
 80064ec:	4b4b      	ldr	r3, [pc, #300]	; (800661c <pow+0x2c0>)
 80064ee:	b1b0      	cbz	r0, 800651e <pow+0x1c2>
 80064f0:	2201      	movs	r2, #1
 80064f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064f6:	9b00      	ldr	r3, [sp, #0]
 80064f8:	930a      	str	r3, [sp, #40]	; 0x28
 80064fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80064fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006502:	f1b9 0f00 	cmp.w	r9, #0
 8006506:	d0c4      	beq.n	8006492 <pow+0x136>
 8006508:	4652      	mov	r2, sl
 800650a:	465b      	mov	r3, fp
 800650c:	4650      	mov	r0, sl
 800650e:	4659      	mov	r1, fp
 8006510:	f7fa f9a4 	bl	800085c <__aeabi_ddiv>
 8006514:	f1b9 0f02 	cmp.w	r9, #2
 8006518:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800651c:	e7c1      	b.n	80064a2 <pow+0x146>
 800651e:	2203      	movs	r2, #3
 8006520:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006524:	900a      	str	r0, [sp, #40]	; 0x28
 8006526:	4629      	mov	r1, r5
 8006528:	4620      	mov	r0, r4
 800652a:	2200      	movs	r2, #0
 800652c:	4b3e      	ldr	r3, [pc, #248]	; (8006628 <pow+0x2cc>)
 800652e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006532:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006536:	f7fa f867 	bl	8000608 <__aeabi_dmul>
 800653a:	4604      	mov	r4, r0
 800653c:	460d      	mov	r5, r1
 800653e:	f1b9 0f00 	cmp.w	r9, #0
 8006542:	d124      	bne.n	800658e <pow+0x232>
 8006544:	4b39      	ldr	r3, [pc, #228]	; (800662c <pow+0x2d0>)
 8006546:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800654a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800654e:	4630      	mov	r0, r6
 8006550:	4652      	mov	r2, sl
 8006552:	465b      	mov	r3, fp
 8006554:	4639      	mov	r1, r7
 8006556:	f7fa fac9 	bl	8000aec <__aeabi_dcmplt>
 800655a:	2800      	cmp	r0, #0
 800655c:	d056      	beq.n	800660c <pow+0x2b0>
 800655e:	ec45 4b10 	vmov	d0, r4, r5
 8006562:	f000 fe49 	bl	80071f8 <rint>
 8006566:	4622      	mov	r2, r4
 8006568:	462b      	mov	r3, r5
 800656a:	ec51 0b10 	vmov	r0, r1, d0
 800656e:	f7fa fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006572:	b920      	cbnz	r0, 800657e <pow+0x222>
 8006574:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <pow+0x2d4>)
 8006576:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800657a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800657e:	f998 3000 	ldrsb.w	r3, [r8]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d142      	bne.n	800660c <pow+0x2b0>
 8006586:	f7fd fe77 	bl	8004278 <__errno>
 800658a:	2322      	movs	r3, #34	; 0x22
 800658c:	e78d      	b.n	80064aa <pow+0x14e>
 800658e:	4b29      	ldr	r3, [pc, #164]	; (8006634 <pow+0x2d8>)
 8006590:	2200      	movs	r2, #0
 8006592:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006596:	4630      	mov	r0, r6
 8006598:	4652      	mov	r2, sl
 800659a:	465b      	mov	r3, fp
 800659c:	4639      	mov	r1, r7
 800659e:	f7fa faa5 	bl	8000aec <__aeabi_dcmplt>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0eb      	beq.n	800657e <pow+0x222>
 80065a6:	ec45 4b10 	vmov	d0, r4, r5
 80065aa:	f000 fe25 	bl	80071f8 <rint>
 80065ae:	4622      	mov	r2, r4
 80065b0:	462b      	mov	r3, r5
 80065b2:	ec51 0b10 	vmov	r0, r1, d0
 80065b6:	f7fa fa8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d1df      	bne.n	800657e <pow+0x222>
 80065be:	2200      	movs	r2, #0
 80065c0:	4b18      	ldr	r3, [pc, #96]	; (8006624 <pow+0x2c8>)
 80065c2:	e7da      	b.n	800657a <pow+0x21e>
 80065c4:	2200      	movs	r2, #0
 80065c6:	2300      	movs	r3, #0
 80065c8:	ec51 0b18 	vmov	r0, r1, d8
 80065cc:	f7fa fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f43f af3a 	beq.w	800644a <pow+0xee>
 80065d6:	ec47 6b10 	vmov	d0, r6, r7
 80065da:	f000 fdf8 	bl	80071ce <finite>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f43f af33 	beq.w	800644a <pow+0xee>
 80065e4:	ec45 4b10 	vmov	d0, r4, r5
 80065e8:	f000 fdf1 	bl	80071ce <finite>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f43f af2c 	beq.w	800644a <pow+0xee>
 80065f2:	2304      	movs	r3, #4
 80065f4:	9302      	str	r3, [sp, #8]
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <pow+0x2c0>)
 80065f8:	9303      	str	r3, [sp, #12]
 80065fa:	2300      	movs	r3, #0
 80065fc:	930a      	str	r3, [sp, #40]	; 0x28
 80065fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006602:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006606:	ed8d 9b08 	vstr	d9, [sp, #32]
 800660a:	e7b8      	b.n	800657e <pow+0x222>
 800660c:	a802      	add	r0, sp, #8
 800660e:	f000 fde6 	bl	80071de <matherr>
 8006612:	2800      	cmp	r0, #0
 8006614:	f47f af11 	bne.w	800643a <pow+0xde>
 8006618:	e7b5      	b.n	8006586 <pow+0x22a>
 800661a:	bf00      	nop
 800661c:	080077f0 	.word	0x080077f0
 8006620:	3ff00000 	.word	0x3ff00000
 8006624:	fff00000 	.word	0xfff00000
 8006628:	3fe00000 	.word	0x3fe00000
 800662c:	47efffff 	.word	0x47efffff
 8006630:	c7efffff 	.word	0xc7efffff
 8006634:	7ff00000 	.word	0x7ff00000
 8006638:	200001e0 	.word	0x200001e0
 800663c:	00000000 	.word	0x00000000

08006640 <__ieee754_pow>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	b091      	sub	sp, #68	; 0x44
 8006646:	ed8d 1b00 	vstr	d1, [sp]
 800664a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800664e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006652:	ea58 0302 	orrs.w	r3, r8, r2
 8006656:	ec57 6b10 	vmov	r6, r7, d0
 800665a:	f000 84be 	beq.w	8006fda <__ieee754_pow+0x99a>
 800665e:	4b7a      	ldr	r3, [pc, #488]	; (8006848 <__ieee754_pow+0x208>)
 8006660:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006664:	429c      	cmp	r4, r3
 8006666:	463d      	mov	r5, r7
 8006668:	ee10 aa10 	vmov	sl, s0
 800666c:	dc09      	bgt.n	8006682 <__ieee754_pow+0x42>
 800666e:	d103      	bne.n	8006678 <__ieee754_pow+0x38>
 8006670:	b93e      	cbnz	r6, 8006682 <__ieee754_pow+0x42>
 8006672:	45a0      	cmp	r8, r4
 8006674:	dc0d      	bgt.n	8006692 <__ieee754_pow+0x52>
 8006676:	e001      	b.n	800667c <__ieee754_pow+0x3c>
 8006678:	4598      	cmp	r8, r3
 800667a:	dc02      	bgt.n	8006682 <__ieee754_pow+0x42>
 800667c:	4598      	cmp	r8, r3
 800667e:	d10e      	bne.n	800669e <__ieee754_pow+0x5e>
 8006680:	b16a      	cbz	r2, 800669e <__ieee754_pow+0x5e>
 8006682:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006686:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800668a:	ea54 030a 	orrs.w	r3, r4, sl
 800668e:	f000 84a4 	beq.w	8006fda <__ieee754_pow+0x99a>
 8006692:	486e      	ldr	r0, [pc, #440]	; (800684c <__ieee754_pow+0x20c>)
 8006694:	b011      	add	sp, #68	; 0x44
 8006696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	f000 bda5 	b.w	80071e8 <nan>
 800669e:	2d00      	cmp	r5, #0
 80066a0:	da53      	bge.n	800674a <__ieee754_pow+0x10a>
 80066a2:	4b6b      	ldr	r3, [pc, #428]	; (8006850 <__ieee754_pow+0x210>)
 80066a4:	4598      	cmp	r8, r3
 80066a6:	dc4d      	bgt.n	8006744 <__ieee754_pow+0x104>
 80066a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80066ac:	4598      	cmp	r8, r3
 80066ae:	dd4c      	ble.n	800674a <__ieee754_pow+0x10a>
 80066b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80066b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80066b8:	2b14      	cmp	r3, #20
 80066ba:	dd26      	ble.n	800670a <__ieee754_pow+0xca>
 80066bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80066c0:	fa22 f103 	lsr.w	r1, r2, r3
 80066c4:	fa01 f303 	lsl.w	r3, r1, r3
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d13e      	bne.n	800674a <__ieee754_pow+0x10a>
 80066cc:	f001 0101 	and.w	r1, r1, #1
 80066d0:	f1c1 0b02 	rsb	fp, r1, #2
 80066d4:	2a00      	cmp	r2, #0
 80066d6:	d15b      	bne.n	8006790 <__ieee754_pow+0x150>
 80066d8:	4b5b      	ldr	r3, [pc, #364]	; (8006848 <__ieee754_pow+0x208>)
 80066da:	4598      	cmp	r8, r3
 80066dc:	d124      	bne.n	8006728 <__ieee754_pow+0xe8>
 80066de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80066e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80066e6:	ea53 030a 	orrs.w	r3, r3, sl
 80066ea:	f000 8476 	beq.w	8006fda <__ieee754_pow+0x99a>
 80066ee:	4b59      	ldr	r3, [pc, #356]	; (8006854 <__ieee754_pow+0x214>)
 80066f0:	429c      	cmp	r4, r3
 80066f2:	dd2d      	ble.n	8006750 <__ieee754_pow+0x110>
 80066f4:	f1b9 0f00 	cmp.w	r9, #0
 80066f8:	f280 8473 	bge.w	8006fe2 <__ieee754_pow+0x9a2>
 80066fc:	2000      	movs	r0, #0
 80066fe:	2100      	movs	r1, #0
 8006700:	ec41 0b10 	vmov	d0, r0, r1
 8006704:	b011      	add	sp, #68	; 0x44
 8006706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670a:	2a00      	cmp	r2, #0
 800670c:	d13e      	bne.n	800678c <__ieee754_pow+0x14c>
 800670e:	f1c3 0314 	rsb	r3, r3, #20
 8006712:	fa48 f103 	asr.w	r1, r8, r3
 8006716:	fa01 f303 	lsl.w	r3, r1, r3
 800671a:	4543      	cmp	r3, r8
 800671c:	f040 8469 	bne.w	8006ff2 <__ieee754_pow+0x9b2>
 8006720:	f001 0101 	and.w	r1, r1, #1
 8006724:	f1c1 0b02 	rsb	fp, r1, #2
 8006728:	4b4b      	ldr	r3, [pc, #300]	; (8006858 <__ieee754_pow+0x218>)
 800672a:	4598      	cmp	r8, r3
 800672c:	d118      	bne.n	8006760 <__ieee754_pow+0x120>
 800672e:	f1b9 0f00 	cmp.w	r9, #0
 8006732:	f280 845a 	bge.w	8006fea <__ieee754_pow+0x9aa>
 8006736:	4948      	ldr	r1, [pc, #288]	; (8006858 <__ieee754_pow+0x218>)
 8006738:	4632      	mov	r2, r6
 800673a:	463b      	mov	r3, r7
 800673c:	2000      	movs	r0, #0
 800673e:	f7fa f88d 	bl	800085c <__aeabi_ddiv>
 8006742:	e7dd      	b.n	8006700 <__ieee754_pow+0xc0>
 8006744:	f04f 0b02 	mov.w	fp, #2
 8006748:	e7c4      	b.n	80066d4 <__ieee754_pow+0x94>
 800674a:	f04f 0b00 	mov.w	fp, #0
 800674e:	e7c1      	b.n	80066d4 <__ieee754_pow+0x94>
 8006750:	f1b9 0f00 	cmp.w	r9, #0
 8006754:	dad2      	bge.n	80066fc <__ieee754_pow+0xbc>
 8006756:	e9dd 0300 	ldrd	r0, r3, [sp]
 800675a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800675e:	e7cf      	b.n	8006700 <__ieee754_pow+0xc0>
 8006760:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006764:	d106      	bne.n	8006774 <__ieee754_pow+0x134>
 8006766:	4632      	mov	r2, r6
 8006768:	463b      	mov	r3, r7
 800676a:	4610      	mov	r0, r2
 800676c:	4619      	mov	r1, r3
 800676e:	f7f9 ff4b 	bl	8000608 <__aeabi_dmul>
 8006772:	e7c5      	b.n	8006700 <__ieee754_pow+0xc0>
 8006774:	4b39      	ldr	r3, [pc, #228]	; (800685c <__ieee754_pow+0x21c>)
 8006776:	4599      	cmp	r9, r3
 8006778:	d10a      	bne.n	8006790 <__ieee754_pow+0x150>
 800677a:	2d00      	cmp	r5, #0
 800677c:	db08      	blt.n	8006790 <__ieee754_pow+0x150>
 800677e:	ec47 6b10 	vmov	d0, r6, r7
 8006782:	b011      	add	sp, #68	; 0x44
 8006784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	f000 bc68 	b.w	800705c <__ieee754_sqrt>
 800678c:	f04f 0b00 	mov.w	fp, #0
 8006790:	ec47 6b10 	vmov	d0, r6, r7
 8006794:	f000 fd12 	bl	80071bc <fabs>
 8006798:	ec51 0b10 	vmov	r0, r1, d0
 800679c:	f1ba 0f00 	cmp.w	sl, #0
 80067a0:	d127      	bne.n	80067f2 <__ieee754_pow+0x1b2>
 80067a2:	b124      	cbz	r4, 80067ae <__ieee754_pow+0x16e>
 80067a4:	4b2c      	ldr	r3, [pc, #176]	; (8006858 <__ieee754_pow+0x218>)
 80067a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d121      	bne.n	80067f2 <__ieee754_pow+0x1b2>
 80067ae:	f1b9 0f00 	cmp.w	r9, #0
 80067b2:	da05      	bge.n	80067c0 <__ieee754_pow+0x180>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	2000      	movs	r0, #0
 80067ba:	4927      	ldr	r1, [pc, #156]	; (8006858 <__ieee754_pow+0x218>)
 80067bc:	f7fa f84e 	bl	800085c <__aeabi_ddiv>
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	da9d      	bge.n	8006700 <__ieee754_pow+0xc0>
 80067c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80067c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80067cc:	ea54 030b 	orrs.w	r3, r4, fp
 80067d0:	d108      	bne.n	80067e4 <__ieee754_pow+0x1a4>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	f7f9 fd5d 	bl	8000298 <__aeabi_dsub>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e7ac      	b.n	800673e <__ieee754_pow+0xfe>
 80067e4:	f1bb 0f01 	cmp.w	fp, #1
 80067e8:	d18a      	bne.n	8006700 <__ieee754_pow+0xc0>
 80067ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067ee:	4619      	mov	r1, r3
 80067f0:	e786      	b.n	8006700 <__ieee754_pow+0xc0>
 80067f2:	0fed      	lsrs	r5, r5, #31
 80067f4:	1e6b      	subs	r3, r5, #1
 80067f6:	930d      	str	r3, [sp, #52]	; 0x34
 80067f8:	ea5b 0303 	orrs.w	r3, fp, r3
 80067fc:	d102      	bne.n	8006804 <__ieee754_pow+0x1c4>
 80067fe:	4632      	mov	r2, r6
 8006800:	463b      	mov	r3, r7
 8006802:	e7e8      	b.n	80067d6 <__ieee754_pow+0x196>
 8006804:	4b16      	ldr	r3, [pc, #88]	; (8006860 <__ieee754_pow+0x220>)
 8006806:	4598      	cmp	r8, r3
 8006808:	f340 80fe 	ble.w	8006a08 <__ieee754_pow+0x3c8>
 800680c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006810:	4598      	cmp	r8, r3
 8006812:	dd0a      	ble.n	800682a <__ieee754_pow+0x1ea>
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <__ieee754_pow+0x214>)
 8006816:	429c      	cmp	r4, r3
 8006818:	dc0d      	bgt.n	8006836 <__ieee754_pow+0x1f6>
 800681a:	f1b9 0f00 	cmp.w	r9, #0
 800681e:	f6bf af6d 	bge.w	80066fc <__ieee754_pow+0xbc>
 8006822:	a307      	add	r3, pc, #28	; (adr r3, 8006840 <__ieee754_pow+0x200>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	e79f      	b.n	800676a <__ieee754_pow+0x12a>
 800682a:	4b0e      	ldr	r3, [pc, #56]	; (8006864 <__ieee754_pow+0x224>)
 800682c:	429c      	cmp	r4, r3
 800682e:	ddf4      	ble.n	800681a <__ieee754_pow+0x1da>
 8006830:	4b09      	ldr	r3, [pc, #36]	; (8006858 <__ieee754_pow+0x218>)
 8006832:	429c      	cmp	r4, r3
 8006834:	dd18      	ble.n	8006868 <__ieee754_pow+0x228>
 8006836:	f1b9 0f00 	cmp.w	r9, #0
 800683a:	dcf2      	bgt.n	8006822 <__ieee754_pow+0x1e2>
 800683c:	e75e      	b.n	80066fc <__ieee754_pow+0xbc>
 800683e:	bf00      	nop
 8006840:	8800759c 	.word	0x8800759c
 8006844:	7e37e43c 	.word	0x7e37e43c
 8006848:	7ff00000 	.word	0x7ff00000
 800684c:	080076d9 	.word	0x080076d9
 8006850:	433fffff 	.word	0x433fffff
 8006854:	3fefffff 	.word	0x3fefffff
 8006858:	3ff00000 	.word	0x3ff00000
 800685c:	3fe00000 	.word	0x3fe00000
 8006860:	41e00000 	.word	0x41e00000
 8006864:	3feffffe 	.word	0x3feffffe
 8006868:	2200      	movs	r2, #0
 800686a:	4b63      	ldr	r3, [pc, #396]	; (80069f8 <__ieee754_pow+0x3b8>)
 800686c:	f7f9 fd14 	bl	8000298 <__aeabi_dsub>
 8006870:	a355      	add	r3, pc, #340	; (adr r3, 80069c8 <__ieee754_pow+0x388>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	4604      	mov	r4, r0
 8006878:	460d      	mov	r5, r1
 800687a:	f7f9 fec5 	bl	8000608 <__aeabi_dmul>
 800687e:	a354      	add	r3, pc, #336	; (adr r3, 80069d0 <__ieee754_pow+0x390>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7f9 febc 	bl	8000608 <__aeabi_dmul>
 8006890:	2200      	movs	r2, #0
 8006892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006896:	4b59      	ldr	r3, [pc, #356]	; (80069fc <__ieee754_pow+0x3bc>)
 8006898:	4620      	mov	r0, r4
 800689a:	4629      	mov	r1, r5
 800689c:	f7f9 feb4 	bl	8000608 <__aeabi_dmul>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	a14c      	add	r1, pc, #304	; (adr r1, 80069d8 <__ieee754_pow+0x398>)
 80068a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068aa:	f7f9 fcf5 	bl	8000298 <__aeabi_dsub>
 80068ae:	4622      	mov	r2, r4
 80068b0:	462b      	mov	r3, r5
 80068b2:	f7f9 fea9 	bl	8000608 <__aeabi_dmul>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	2000      	movs	r0, #0
 80068bc:	4950      	ldr	r1, [pc, #320]	; (8006a00 <__ieee754_pow+0x3c0>)
 80068be:	f7f9 fceb 	bl	8000298 <__aeabi_dsub>
 80068c2:	4622      	mov	r2, r4
 80068c4:	462b      	mov	r3, r5
 80068c6:	4680      	mov	r8, r0
 80068c8:	4689      	mov	r9, r1
 80068ca:	4620      	mov	r0, r4
 80068cc:	4629      	mov	r1, r5
 80068ce:	f7f9 fe9b 	bl	8000608 <__aeabi_dmul>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4640      	mov	r0, r8
 80068d8:	4649      	mov	r1, r9
 80068da:	f7f9 fe95 	bl	8000608 <__aeabi_dmul>
 80068de:	a340      	add	r3, pc, #256	; (adr r3, 80069e0 <__ieee754_pow+0x3a0>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7f9 fe90 	bl	8000608 <__aeabi_dmul>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f0:	f7f9 fcd2 	bl	8000298 <__aeabi_dsub>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4604      	mov	r4, r0
 80068fa:	460d      	mov	r5, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fccc 	bl	800029c <__adddf3>
 8006904:	2000      	movs	r0, #0
 8006906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800690a:	4632      	mov	r2, r6
 800690c:	463b      	mov	r3, r7
 800690e:	f7f9 fcc3 	bl	8000298 <__aeabi_dsub>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4620      	mov	r0, r4
 8006918:	4629      	mov	r1, r5
 800691a:	f7f9 fcbd 	bl	8000298 <__aeabi_dsub>
 800691e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006920:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006924:	4313      	orrs	r3, r2
 8006926:	4606      	mov	r6, r0
 8006928:	460f      	mov	r7, r1
 800692a:	f040 81eb 	bne.w	8006d04 <__ieee754_pow+0x6c4>
 800692e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80069e8 <__ieee754_pow+0x3a8>
 8006932:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006936:	2400      	movs	r4, #0
 8006938:	4622      	mov	r2, r4
 800693a:	462b      	mov	r3, r5
 800693c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006940:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006944:	f7f9 fca8 	bl	8000298 <__aeabi_dsub>
 8006948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800694c:	f7f9 fe5c 	bl	8000608 <__aeabi_dmul>
 8006950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006954:	4680      	mov	r8, r0
 8006956:	4689      	mov	r9, r1
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7f9 fe54 	bl	8000608 <__aeabi_dmul>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4640      	mov	r0, r8
 8006966:	4649      	mov	r1, r9
 8006968:	f7f9 fc98 	bl	800029c <__adddf3>
 800696c:	4622      	mov	r2, r4
 800696e:	462b      	mov	r3, r5
 8006970:	4680      	mov	r8, r0
 8006972:	4689      	mov	r9, r1
 8006974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006978:	f7f9 fe46 	bl	8000608 <__aeabi_dmul>
 800697c:	460b      	mov	r3, r1
 800697e:	4604      	mov	r4, r0
 8006980:	460d      	mov	r5, r1
 8006982:	4602      	mov	r2, r0
 8006984:	4649      	mov	r1, r9
 8006986:	4640      	mov	r0, r8
 8006988:	e9cd 4500 	strd	r4, r5, [sp]
 800698c:	f7f9 fc86 	bl	800029c <__adddf3>
 8006990:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <__ieee754_pow+0x3c4>)
 8006992:	4299      	cmp	r1, r3
 8006994:	4606      	mov	r6, r0
 8006996:	460f      	mov	r7, r1
 8006998:	468b      	mov	fp, r1
 800699a:	f340 82f7 	ble.w	8006f8c <__ieee754_pow+0x94c>
 800699e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80069a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80069a6:	4303      	orrs	r3, r0
 80069a8:	f000 81ea 	beq.w	8006d80 <__ieee754_pow+0x740>
 80069ac:	a310      	add	r3, pc, #64	; (adr r3, 80069f0 <__ieee754_pow+0x3b0>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b6:	f7f9 fe27 	bl	8000608 <__aeabi_dmul>
 80069ba:	a30d      	add	r3, pc, #52	; (adr r3, 80069f0 <__ieee754_pow+0x3b0>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	e6d5      	b.n	800676e <__ieee754_pow+0x12e>
 80069c2:	bf00      	nop
 80069c4:	f3af 8000 	nop.w
 80069c8:	60000000 	.word	0x60000000
 80069cc:	3ff71547 	.word	0x3ff71547
 80069d0:	f85ddf44 	.word	0xf85ddf44
 80069d4:	3e54ae0b 	.word	0x3e54ae0b
 80069d8:	55555555 	.word	0x55555555
 80069dc:	3fd55555 	.word	0x3fd55555
 80069e0:	652b82fe 	.word	0x652b82fe
 80069e4:	3ff71547 	.word	0x3ff71547
 80069e8:	00000000 	.word	0x00000000
 80069ec:	bff00000 	.word	0xbff00000
 80069f0:	8800759c 	.word	0x8800759c
 80069f4:	7e37e43c 	.word	0x7e37e43c
 80069f8:	3ff00000 	.word	0x3ff00000
 80069fc:	3fd00000 	.word	0x3fd00000
 8006a00:	3fe00000 	.word	0x3fe00000
 8006a04:	408fffff 	.word	0x408fffff
 8006a08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	da05      	bge.n	8006a1e <__ieee754_pow+0x3de>
 8006a12:	4bd3      	ldr	r3, [pc, #844]	; (8006d60 <__ieee754_pow+0x720>)
 8006a14:	f7f9 fdf8 	bl	8000608 <__aeabi_dmul>
 8006a18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	1523      	asrs	r3, r4, #20
 8006a20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a24:	4413      	add	r3, r2
 8006a26:	9309      	str	r3, [sp, #36]	; 0x24
 8006a28:	4bce      	ldr	r3, [pc, #824]	; (8006d64 <__ieee754_pow+0x724>)
 8006a2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006a2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006a32:	429c      	cmp	r4, r3
 8006a34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a38:	dd08      	ble.n	8006a4c <__ieee754_pow+0x40c>
 8006a3a:	4bcb      	ldr	r3, [pc, #812]	; (8006d68 <__ieee754_pow+0x728>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	f340 815e 	ble.w	8006cfe <__ieee754_pow+0x6be>
 8006a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a44:	3301      	adds	r3, #1
 8006a46:	9309      	str	r3, [sp, #36]	; 0x24
 8006a48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006a4c:	f04f 0a00 	mov.w	sl, #0
 8006a50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006a54:	930c      	str	r3, [sp, #48]	; 0x30
 8006a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a58:	4bc4      	ldr	r3, [pc, #784]	; (8006d6c <__ieee754_pow+0x72c>)
 8006a5a:	4413      	add	r3, r2
 8006a5c:	ed93 7b00 	vldr	d7, [r3]
 8006a60:	4629      	mov	r1, r5
 8006a62:	ec53 2b17 	vmov	r2, r3, d7
 8006a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006a6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a6e:	f7f9 fc13 	bl	8000298 <__aeabi_dsub>
 8006a72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a76:	4606      	mov	r6, r0
 8006a78:	460f      	mov	r7, r1
 8006a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a7e:	f7f9 fc0d 	bl	800029c <__adddf3>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	2000      	movs	r0, #0
 8006a88:	49b9      	ldr	r1, [pc, #740]	; (8006d70 <__ieee754_pow+0x730>)
 8006a8a:	f7f9 fee7 	bl	800085c <__aeabi_ddiv>
 8006a8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4630      	mov	r0, r6
 8006a98:	4639      	mov	r1, r7
 8006a9a:	f7f9 fdb5 	bl	8000608 <__aeabi_dmul>
 8006a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006aa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9302      	str	r3, [sp, #8]
 8006aae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006ab2:	106d      	asrs	r5, r5, #1
 8006ab4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006ab8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006abc:	2200      	movs	r2, #0
 8006abe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	4614      	mov	r4, r2
 8006ac8:	461d      	mov	r5, r3
 8006aca:	f7f9 fd9d 	bl	8000608 <__aeabi_dmul>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7f9 fbdf 	bl	8000298 <__aeabi_dsub>
 8006ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ade:	4606      	mov	r6, r0
 8006ae0:	460f      	mov	r7, r1
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	f7f9 fbd7 	bl	8000298 <__aeabi_dsub>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006af2:	f7f9 fbd1 	bl	8000298 <__aeabi_dsub>
 8006af6:	4642      	mov	r2, r8
 8006af8:	464b      	mov	r3, r9
 8006afa:	f7f9 fd85 	bl	8000608 <__aeabi_dmul>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7f9 fbc7 	bl	8000298 <__aeabi_dsub>
 8006b0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006b0e:	f7f9 fd7b 	bl	8000608 <__aeabi_dmul>
 8006b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f7f9 fd73 	bl	8000608 <__aeabi_dmul>
 8006b22:	a37b      	add	r3, pc, #492	; (adr r3, 8006d10 <__ieee754_pow+0x6d0>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	f7f9 fd6c 	bl	8000608 <__aeabi_dmul>
 8006b30:	a379      	add	r3, pc, #484	; (adr r3, 8006d18 <__ieee754_pow+0x6d8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fbb1 	bl	800029c <__adddf3>
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	f7f9 fd63 	bl	8000608 <__aeabi_dmul>
 8006b42:	a377      	add	r3, pc, #476	; (adr r3, 8006d20 <__ieee754_pow+0x6e0>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f7f9 fba8 	bl	800029c <__adddf3>
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	462b      	mov	r3, r5
 8006b50:	f7f9 fd5a 	bl	8000608 <__aeabi_dmul>
 8006b54:	a374      	add	r3, pc, #464	; (adr r3, 8006d28 <__ieee754_pow+0x6e8>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fb9f 	bl	800029c <__adddf3>
 8006b5e:	4622      	mov	r2, r4
 8006b60:	462b      	mov	r3, r5
 8006b62:	f7f9 fd51 	bl	8000608 <__aeabi_dmul>
 8006b66:	a372      	add	r3, pc, #456	; (adr r3, 8006d30 <__ieee754_pow+0x6f0>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fb96 	bl	800029c <__adddf3>
 8006b70:	4622      	mov	r2, r4
 8006b72:	462b      	mov	r3, r5
 8006b74:	f7f9 fd48 	bl	8000608 <__aeabi_dmul>
 8006b78:	a36f      	add	r3, pc, #444	; (adr r3, 8006d38 <__ieee754_pow+0x6f8>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fb8d 	bl	800029c <__adddf3>
 8006b82:	4622      	mov	r2, r4
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	462b      	mov	r3, r5
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 fd3b 	bl	8000608 <__aeabi_dmul>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4630      	mov	r0, r6
 8006b98:	4639      	mov	r1, r7
 8006b9a:	f7f9 fd35 	bl	8000608 <__aeabi_dmul>
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	460d      	mov	r5, r1
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006baa:	f7f9 fb77 	bl	800029c <__adddf3>
 8006bae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bb2:	f7f9 fd29 	bl	8000608 <__aeabi_dmul>
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	462b      	mov	r3, r5
 8006bba:	f7f9 fb6f 	bl	800029c <__adddf3>
 8006bbe:	4642      	mov	r2, r8
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f7f9 fd1d 	bl	8000608 <__aeabi_dmul>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4b68      	ldr	r3, [pc, #416]	; (8006d74 <__ieee754_pow+0x734>)
 8006bd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006bd6:	f7f9 fb61 	bl	800029c <__adddf3>
 8006bda:	4632      	mov	r2, r6
 8006bdc:	463b      	mov	r3, r7
 8006bde:	f7f9 fb5d 	bl	800029c <__adddf3>
 8006be2:	9802      	ldr	r0, [sp, #8]
 8006be4:	460d      	mov	r5, r1
 8006be6:	4604      	mov	r4, r0
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4640      	mov	r0, r8
 8006bee:	4649      	mov	r1, r9
 8006bf0:	f7f9 fd0a 	bl	8000608 <__aeabi_dmul>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4680      	mov	r8, r0
 8006bf8:	4689      	mov	r9, r1
 8006bfa:	4b5e      	ldr	r3, [pc, #376]	; (8006d74 <__ieee754_pow+0x734>)
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f7f9 fb4a 	bl	8000298 <__aeabi_dsub>
 8006c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c08:	f7f9 fb46 	bl	8000298 <__aeabi_dsub>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 fb40 	bl	8000298 <__aeabi_dsub>
 8006c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c1c:	f7f9 fcf4 	bl	8000608 <__aeabi_dmul>
 8006c20:	4622      	mov	r2, r4
 8006c22:	4606      	mov	r6, r0
 8006c24:	460f      	mov	r7, r1
 8006c26:	462b      	mov	r3, r5
 8006c28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c2c:	f7f9 fcec 	bl	8000608 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4630      	mov	r0, r6
 8006c36:	4639      	mov	r1, r7
 8006c38:	f7f9 fb30 	bl	800029c <__adddf3>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	460f      	mov	r7, r1
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4640      	mov	r0, r8
 8006c46:	4649      	mov	r1, r9
 8006c48:	f7f9 fb28 	bl	800029c <__adddf3>
 8006c4c:	9802      	ldr	r0, [sp, #8]
 8006c4e:	a33c      	add	r3, pc, #240	; (adr r3, 8006d40 <__ieee754_pow+0x700>)
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	4604      	mov	r4, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	f7f9 fcd6 	bl	8000608 <__aeabi_dmul>
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c62:	464b      	mov	r3, r9
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fb16 	bl	8000298 <__aeabi_dsub>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f7f9 fb10 	bl	8000298 <__aeabi_dsub>
 8006c78:	a333      	add	r3, pc, #204	; (adr r3, 8006d48 <__ieee754_pow+0x708>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f7f9 fcc3 	bl	8000608 <__aeabi_dmul>
 8006c82:	a333      	add	r3, pc, #204	; (adr r3, 8006d50 <__ieee754_pow+0x710>)
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	4606      	mov	r6, r0
 8006c8a:	460f      	mov	r7, r1
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4629      	mov	r1, r5
 8006c90:	f7f9 fcba 	bl	8000608 <__aeabi_dmul>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 fafe 	bl	800029c <__adddf3>
 8006ca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ca2:	4b35      	ldr	r3, [pc, #212]	; (8006d78 <__ieee754_pow+0x738>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f7f9 faf7 	bl	800029c <__adddf3>
 8006cae:	4604      	mov	r4, r0
 8006cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	f7f9 fc3e 	bl	8000534 <__aeabi_i2d>
 8006cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cba:	4b30      	ldr	r3, [pc, #192]	; (8006d7c <__ieee754_pow+0x73c>)
 8006cbc:	4413      	add	r3, r2
 8006cbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	460f      	mov	r7, r1
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	462b      	mov	r3, r5
 8006cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cce:	f7f9 fae5 	bl	800029c <__adddf3>
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	f7f9 fae1 	bl	800029c <__adddf3>
 8006cda:	4632      	mov	r2, r6
 8006cdc:	463b      	mov	r3, r7
 8006cde:	f7f9 fadd 	bl	800029c <__adddf3>
 8006ce2:	9802      	ldr	r0, [sp, #8]
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	463b      	mov	r3, r7
 8006ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cec:	f7f9 fad4 	bl	8000298 <__aeabi_dsub>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	f7f9 fad0 	bl	8000298 <__aeabi_dsub>
 8006cf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cfc:	e607      	b.n	800690e <__ieee754_pow+0x2ce>
 8006cfe:	f04f 0a01 	mov.w	sl, #1
 8006d02:	e6a5      	b.n	8006a50 <__ieee754_pow+0x410>
 8006d04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006d58 <__ieee754_pow+0x718>
 8006d08:	e613      	b.n	8006932 <__ieee754_pow+0x2f2>
 8006d0a:	bf00      	nop
 8006d0c:	f3af 8000 	nop.w
 8006d10:	4a454eef 	.word	0x4a454eef
 8006d14:	3fca7e28 	.word	0x3fca7e28
 8006d18:	93c9db65 	.word	0x93c9db65
 8006d1c:	3fcd864a 	.word	0x3fcd864a
 8006d20:	a91d4101 	.word	0xa91d4101
 8006d24:	3fd17460 	.word	0x3fd17460
 8006d28:	518f264d 	.word	0x518f264d
 8006d2c:	3fd55555 	.word	0x3fd55555
 8006d30:	db6fabff 	.word	0xdb6fabff
 8006d34:	3fdb6db6 	.word	0x3fdb6db6
 8006d38:	33333303 	.word	0x33333303
 8006d3c:	3fe33333 	.word	0x3fe33333
 8006d40:	e0000000 	.word	0xe0000000
 8006d44:	3feec709 	.word	0x3feec709
 8006d48:	dc3a03fd 	.word	0xdc3a03fd
 8006d4c:	3feec709 	.word	0x3feec709
 8006d50:	145b01f5 	.word	0x145b01f5
 8006d54:	be3e2fe0 	.word	0xbe3e2fe0
 8006d58:	00000000 	.word	0x00000000
 8006d5c:	3ff00000 	.word	0x3ff00000
 8006d60:	43400000 	.word	0x43400000
 8006d64:	0003988e 	.word	0x0003988e
 8006d68:	000bb679 	.word	0x000bb679
 8006d6c:	080077f8 	.word	0x080077f8
 8006d70:	3ff00000 	.word	0x3ff00000
 8006d74:	40080000 	.word	0x40080000
 8006d78:	08007818 	.word	0x08007818
 8006d7c:	08007808 	.word	0x08007808
 8006d80:	a3b4      	add	r3, pc, #720	; (adr r3, 8007054 <__ieee754_pow+0xa14>)
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	4640      	mov	r0, r8
 8006d88:	4649      	mov	r1, r9
 8006d8a:	f7f9 fa87 	bl	800029c <__adddf3>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d94:	462b      	mov	r3, r5
 8006d96:	4630      	mov	r0, r6
 8006d98:	4639      	mov	r1, r7
 8006d9a:	f7f9 fa7d 	bl	8000298 <__aeabi_dsub>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da6:	f7f9 febf 	bl	8000b28 <__aeabi_dcmpgt>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	f47f adfe 	bne.w	80069ac <__ieee754_pow+0x36c>
 8006db0:	4aa3      	ldr	r2, [pc, #652]	; (8007040 <__ieee754_pow+0xa00>)
 8006db2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006db6:	4293      	cmp	r3, r2
 8006db8:	f340 810a 	ble.w	8006fd0 <__ieee754_pow+0x990>
 8006dbc:	151b      	asrs	r3, r3, #20
 8006dbe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006dc2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006dc6:	fa4a f303 	asr.w	r3, sl, r3
 8006dca:	445b      	add	r3, fp
 8006dcc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006dd0:	4e9c      	ldr	r6, [pc, #624]	; (8007044 <__ieee754_pow+0xa04>)
 8006dd2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006dd6:	4116      	asrs	r6, r2
 8006dd8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006ddc:	2000      	movs	r0, #0
 8006dde:	ea23 0106 	bic.w	r1, r3, r6
 8006de2:	f1c2 0214 	rsb	r2, r2, #20
 8006de6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006dea:	fa4a fa02 	asr.w	sl, sl, r2
 8006dee:	f1bb 0f00 	cmp.w	fp, #0
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	bfb8      	it	lt
 8006dfc:	f1ca 0a00 	rsblt	sl, sl, #0
 8006e00:	f7f9 fa4a 	bl	8000298 <__aeabi_dsub>
 8006e04:	e9cd 0100 	strd	r0, r1, [sp]
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e10:	f7f9 fa44 	bl	800029c <__adddf3>
 8006e14:	2000      	movs	r0, #0
 8006e16:	a378      	add	r3, pc, #480	; (adr r3, 8006ff8 <__ieee754_pow+0x9b8>)
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	460d      	mov	r5, r1
 8006e20:	f7f9 fbf2 	bl	8000608 <__aeabi_dmul>
 8006e24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e28:	4606      	mov	r6, r0
 8006e2a:	460f      	mov	r7, r1
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	4629      	mov	r1, r5
 8006e30:	f7f9 fa32 	bl	8000298 <__aeabi_dsub>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4640      	mov	r0, r8
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	f7f9 fa2c 	bl	8000298 <__aeabi_dsub>
 8006e40:	a36f      	add	r3, pc, #444	; (adr r3, 8007000 <__ieee754_pow+0x9c0>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f7f9 fbdf 	bl	8000608 <__aeabi_dmul>
 8006e4a:	a36f      	add	r3, pc, #444	; (adr r3, 8007008 <__ieee754_pow+0x9c8>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	4680      	mov	r8, r0
 8006e52:	4689      	mov	r9, r1
 8006e54:	4620      	mov	r0, r4
 8006e56:	4629      	mov	r1, r5
 8006e58:	f7f9 fbd6 	bl	8000608 <__aeabi_dmul>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4640      	mov	r0, r8
 8006e62:	4649      	mov	r1, r9
 8006e64:	f7f9 fa1a 	bl	800029c <__adddf3>
 8006e68:	4604      	mov	r4, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4630      	mov	r0, r6
 8006e72:	4639      	mov	r1, r7
 8006e74:	f7f9 fa12 	bl	800029c <__adddf3>
 8006e78:	4632      	mov	r2, r6
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	4689      	mov	r9, r1
 8006e80:	f7f9 fa0a 	bl	8000298 <__aeabi_dsub>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 fa04 	bl	8000298 <__aeabi_dsub>
 8006e90:	4642      	mov	r2, r8
 8006e92:	4606      	mov	r6, r0
 8006e94:	460f      	mov	r7, r1
 8006e96:	464b      	mov	r3, r9
 8006e98:	4640      	mov	r0, r8
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	f7f9 fbb4 	bl	8000608 <__aeabi_dmul>
 8006ea0:	a35b      	add	r3, pc, #364	; (adr r3, 8007010 <__ieee754_pow+0x9d0>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	460d      	mov	r5, r1
 8006eaa:	f7f9 fbad 	bl	8000608 <__aeabi_dmul>
 8006eae:	a35a      	add	r3, pc, #360	; (adr r3, 8007018 <__ieee754_pow+0x9d8>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f7f9 f9f0 	bl	8000298 <__aeabi_dsub>
 8006eb8:	4622      	mov	r2, r4
 8006eba:	462b      	mov	r3, r5
 8006ebc:	f7f9 fba4 	bl	8000608 <__aeabi_dmul>
 8006ec0:	a357      	add	r3, pc, #348	; (adr r3, 8007020 <__ieee754_pow+0x9e0>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 f9e9 	bl	800029c <__adddf3>
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	f7f9 fb9b 	bl	8000608 <__aeabi_dmul>
 8006ed2:	a355      	add	r3, pc, #340	; (adr r3, 8007028 <__ieee754_pow+0x9e8>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f7f9 f9de 	bl	8000298 <__aeabi_dsub>
 8006edc:	4622      	mov	r2, r4
 8006ede:	462b      	mov	r3, r5
 8006ee0:	f7f9 fb92 	bl	8000608 <__aeabi_dmul>
 8006ee4:	a352      	add	r3, pc, #328	; (adr r3, 8007030 <__ieee754_pow+0x9f0>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f7f9 f9d7 	bl	800029c <__adddf3>
 8006eee:	4622      	mov	r2, r4
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	f7f9 fb89 	bl	8000608 <__aeabi_dmul>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4640      	mov	r0, r8
 8006efc:	4649      	mov	r1, r9
 8006efe:	f7f9 f9cb 	bl	8000298 <__aeabi_dsub>
 8006f02:	4604      	mov	r4, r0
 8006f04:	460d      	mov	r5, r1
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	f7f9 fb7b 	bl	8000608 <__aeabi_dmul>
 8006f12:	2200      	movs	r2, #0
 8006f14:	e9cd 0100 	strd	r0, r1, [sp]
 8006f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	4629      	mov	r1, r5
 8006f20:	f7f9 f9ba 	bl	8000298 <__aeabi_dsub>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f2c:	f7f9 fc96 	bl	800085c <__aeabi_ddiv>
 8006f30:	4632      	mov	r2, r6
 8006f32:	4604      	mov	r4, r0
 8006f34:	460d      	mov	r5, r1
 8006f36:	463b      	mov	r3, r7
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 fb64 	bl	8000608 <__aeabi_dmul>
 8006f40:	4632      	mov	r2, r6
 8006f42:	463b      	mov	r3, r7
 8006f44:	f7f9 f9aa 	bl	800029c <__adddf3>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 f9a2 	bl	8000298 <__aeabi_dsub>
 8006f54:	4642      	mov	r2, r8
 8006f56:	464b      	mov	r3, r9
 8006f58:	f7f9 f99e 	bl	8000298 <__aeabi_dsub>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	2000      	movs	r0, #0
 8006f62:	4939      	ldr	r1, [pc, #228]	; (8007048 <__ieee754_pow+0xa08>)
 8006f64:	f7f9 f998 	bl	8000298 <__aeabi_dsub>
 8006f68:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006f6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	da2f      	bge.n	8006fd6 <__ieee754_pow+0x996>
 8006f76:	4650      	mov	r0, sl
 8006f78:	ec43 2b10 	vmov	d0, r2, r3
 8006f7c:	f000 f9c0 	bl	8007300 <scalbn>
 8006f80:	ec51 0b10 	vmov	r0, r1, d0
 8006f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f88:	f7ff bbf1 	b.w	800676e <__ieee754_pow+0x12e>
 8006f8c:	4b2f      	ldr	r3, [pc, #188]	; (800704c <__ieee754_pow+0xa0c>)
 8006f8e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f92:	429e      	cmp	r6, r3
 8006f94:	f77f af0c 	ble.w	8006db0 <__ieee754_pow+0x770>
 8006f98:	4b2d      	ldr	r3, [pc, #180]	; (8007050 <__ieee754_pow+0xa10>)
 8006f9a:	440b      	add	r3, r1
 8006f9c:	4303      	orrs	r3, r0
 8006f9e:	d00b      	beq.n	8006fb8 <__ieee754_pow+0x978>
 8006fa0:	a325      	add	r3, pc, #148	; (adr r3, 8007038 <__ieee754_pow+0x9f8>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006faa:	f7f9 fb2d 	bl	8000608 <__aeabi_dmul>
 8006fae:	a322      	add	r3, pc, #136	; (adr r3, 8007038 <__ieee754_pow+0x9f8>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7ff bbdb 	b.w	800676e <__ieee754_pow+0x12e>
 8006fb8:	4622      	mov	r2, r4
 8006fba:	462b      	mov	r3, r5
 8006fbc:	f7f9 f96c 	bl	8000298 <__aeabi_dsub>
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	f7f9 fda6 	bl	8000b14 <__aeabi_dcmpge>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	f43f aef1 	beq.w	8006db0 <__ieee754_pow+0x770>
 8006fce:	e7e7      	b.n	8006fa0 <__ieee754_pow+0x960>
 8006fd0:	f04f 0a00 	mov.w	sl, #0
 8006fd4:	e718      	b.n	8006e08 <__ieee754_pow+0x7c8>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	e7d4      	b.n	8006f84 <__ieee754_pow+0x944>
 8006fda:	2000      	movs	r0, #0
 8006fdc:	491a      	ldr	r1, [pc, #104]	; (8007048 <__ieee754_pow+0xa08>)
 8006fde:	f7ff bb8f 	b.w	8006700 <__ieee754_pow+0xc0>
 8006fe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fe6:	f7ff bb8b 	b.w	8006700 <__ieee754_pow+0xc0>
 8006fea:	4630      	mov	r0, r6
 8006fec:	4639      	mov	r1, r7
 8006fee:	f7ff bb87 	b.w	8006700 <__ieee754_pow+0xc0>
 8006ff2:	4693      	mov	fp, r2
 8006ff4:	f7ff bb98 	b.w	8006728 <__ieee754_pow+0xe8>
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	3fe62e43 	.word	0x3fe62e43
 8007000:	fefa39ef 	.word	0xfefa39ef
 8007004:	3fe62e42 	.word	0x3fe62e42
 8007008:	0ca86c39 	.word	0x0ca86c39
 800700c:	be205c61 	.word	0xbe205c61
 8007010:	72bea4d0 	.word	0x72bea4d0
 8007014:	3e663769 	.word	0x3e663769
 8007018:	c5d26bf1 	.word	0xc5d26bf1
 800701c:	3ebbbd41 	.word	0x3ebbbd41
 8007020:	af25de2c 	.word	0xaf25de2c
 8007024:	3f11566a 	.word	0x3f11566a
 8007028:	16bebd93 	.word	0x16bebd93
 800702c:	3f66c16c 	.word	0x3f66c16c
 8007030:	5555553e 	.word	0x5555553e
 8007034:	3fc55555 	.word	0x3fc55555
 8007038:	c2f8f359 	.word	0xc2f8f359
 800703c:	01a56e1f 	.word	0x01a56e1f
 8007040:	3fe00000 	.word	0x3fe00000
 8007044:	000fffff 	.word	0x000fffff
 8007048:	3ff00000 	.word	0x3ff00000
 800704c:	4090cbff 	.word	0x4090cbff
 8007050:	3f6f3400 	.word	0x3f6f3400
 8007054:	652b82fe 	.word	0x652b82fe
 8007058:	3c971547 	.word	0x3c971547

0800705c <__ieee754_sqrt>:
 800705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007060:	4955      	ldr	r1, [pc, #340]	; (80071b8 <__ieee754_sqrt+0x15c>)
 8007062:	ec55 4b10 	vmov	r4, r5, d0
 8007066:	43a9      	bics	r1, r5
 8007068:	462b      	mov	r3, r5
 800706a:	462a      	mov	r2, r5
 800706c:	d112      	bne.n	8007094 <__ieee754_sqrt+0x38>
 800706e:	ee10 2a10 	vmov	r2, s0
 8007072:	ee10 0a10 	vmov	r0, s0
 8007076:	4629      	mov	r1, r5
 8007078:	f7f9 fac6 	bl	8000608 <__aeabi_dmul>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 f90a 	bl	800029c <__adddf3>
 8007088:	4604      	mov	r4, r0
 800708a:	460d      	mov	r5, r1
 800708c:	ec45 4b10 	vmov	d0, r4, r5
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007094:	2d00      	cmp	r5, #0
 8007096:	ee10 0a10 	vmov	r0, s0
 800709a:	4621      	mov	r1, r4
 800709c:	dc0f      	bgt.n	80070be <__ieee754_sqrt+0x62>
 800709e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070a2:	4330      	orrs	r0, r6
 80070a4:	d0f2      	beq.n	800708c <__ieee754_sqrt+0x30>
 80070a6:	b155      	cbz	r5, 80070be <__ieee754_sqrt+0x62>
 80070a8:	ee10 2a10 	vmov	r2, s0
 80070ac:	4620      	mov	r0, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	f7f9 f8f2 	bl	8000298 <__aeabi_dsub>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	f7f9 fbd0 	bl	800085c <__aeabi_ddiv>
 80070bc:	e7e4      	b.n	8007088 <__ieee754_sqrt+0x2c>
 80070be:	151b      	asrs	r3, r3, #20
 80070c0:	d073      	beq.n	80071aa <__ieee754_sqrt+0x14e>
 80070c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070c6:	07dd      	lsls	r5, r3, #31
 80070c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80070cc:	bf48      	it	mi
 80070ce:	0fc8      	lsrmi	r0, r1, #31
 80070d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80070d4:	bf44      	itt	mi
 80070d6:	0049      	lslmi	r1, r1, #1
 80070d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80070dc:	2500      	movs	r5, #0
 80070de:	1058      	asrs	r0, r3, #1
 80070e0:	0fcb      	lsrs	r3, r1, #31
 80070e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80070e6:	0049      	lsls	r1, r1, #1
 80070e8:	2316      	movs	r3, #22
 80070ea:	462c      	mov	r4, r5
 80070ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80070f0:	19a7      	adds	r7, r4, r6
 80070f2:	4297      	cmp	r7, r2
 80070f4:	bfde      	ittt	le
 80070f6:	19bc      	addle	r4, r7, r6
 80070f8:	1bd2      	suble	r2, r2, r7
 80070fa:	19ad      	addle	r5, r5, r6
 80070fc:	0fcf      	lsrs	r7, r1, #31
 80070fe:	3b01      	subs	r3, #1
 8007100:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007104:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007108:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800710c:	d1f0      	bne.n	80070f0 <__ieee754_sqrt+0x94>
 800710e:	f04f 0c20 	mov.w	ip, #32
 8007112:	469e      	mov	lr, r3
 8007114:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007118:	42a2      	cmp	r2, r4
 800711a:	eb06 070e 	add.w	r7, r6, lr
 800711e:	dc02      	bgt.n	8007126 <__ieee754_sqrt+0xca>
 8007120:	d112      	bne.n	8007148 <__ieee754_sqrt+0xec>
 8007122:	428f      	cmp	r7, r1
 8007124:	d810      	bhi.n	8007148 <__ieee754_sqrt+0xec>
 8007126:	2f00      	cmp	r7, #0
 8007128:	eb07 0e06 	add.w	lr, r7, r6
 800712c:	da42      	bge.n	80071b4 <__ieee754_sqrt+0x158>
 800712e:	f1be 0f00 	cmp.w	lr, #0
 8007132:	db3f      	blt.n	80071b4 <__ieee754_sqrt+0x158>
 8007134:	f104 0801 	add.w	r8, r4, #1
 8007138:	1b12      	subs	r2, r2, r4
 800713a:	428f      	cmp	r7, r1
 800713c:	bf88      	it	hi
 800713e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007142:	1bc9      	subs	r1, r1, r7
 8007144:	4433      	add	r3, r6
 8007146:	4644      	mov	r4, r8
 8007148:	0052      	lsls	r2, r2, #1
 800714a:	f1bc 0c01 	subs.w	ip, ip, #1
 800714e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007152:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007156:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800715a:	d1dd      	bne.n	8007118 <__ieee754_sqrt+0xbc>
 800715c:	430a      	orrs	r2, r1
 800715e:	d006      	beq.n	800716e <__ieee754_sqrt+0x112>
 8007160:	1c5c      	adds	r4, r3, #1
 8007162:	bf13      	iteet	ne
 8007164:	3301      	addne	r3, #1
 8007166:	3501      	addeq	r5, #1
 8007168:	4663      	moveq	r3, ip
 800716a:	f023 0301 	bicne.w	r3, r3, #1
 800716e:	106a      	asrs	r2, r5, #1
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	07e9      	lsls	r1, r5, #31
 8007174:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007178:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800717c:	bf48      	it	mi
 800717e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007182:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007186:	461c      	mov	r4, r3
 8007188:	e780      	b.n	800708c <__ieee754_sqrt+0x30>
 800718a:	0aca      	lsrs	r2, r1, #11
 800718c:	3815      	subs	r0, #21
 800718e:	0549      	lsls	r1, r1, #21
 8007190:	2a00      	cmp	r2, #0
 8007192:	d0fa      	beq.n	800718a <__ieee754_sqrt+0x12e>
 8007194:	02d6      	lsls	r6, r2, #11
 8007196:	d50a      	bpl.n	80071ae <__ieee754_sqrt+0x152>
 8007198:	f1c3 0420 	rsb	r4, r3, #32
 800719c:	fa21 f404 	lsr.w	r4, r1, r4
 80071a0:	1e5d      	subs	r5, r3, #1
 80071a2:	4099      	lsls	r1, r3
 80071a4:	4322      	orrs	r2, r4
 80071a6:	1b43      	subs	r3, r0, r5
 80071a8:	e78b      	b.n	80070c2 <__ieee754_sqrt+0x66>
 80071aa:	4618      	mov	r0, r3
 80071ac:	e7f0      	b.n	8007190 <__ieee754_sqrt+0x134>
 80071ae:	0052      	lsls	r2, r2, #1
 80071b0:	3301      	adds	r3, #1
 80071b2:	e7ef      	b.n	8007194 <__ieee754_sqrt+0x138>
 80071b4:	46a0      	mov	r8, r4
 80071b6:	e7bf      	b.n	8007138 <__ieee754_sqrt+0xdc>
 80071b8:	7ff00000 	.word	0x7ff00000

080071bc <fabs>:
 80071bc:	ec51 0b10 	vmov	r0, r1, d0
 80071c0:	ee10 2a10 	vmov	r2, s0
 80071c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071c8:	ec43 2b10 	vmov	d0, r2, r3
 80071cc:	4770      	bx	lr

080071ce <finite>:
 80071ce:	ee10 3a90 	vmov	r3, s1
 80071d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80071d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80071da:	0fc0      	lsrs	r0, r0, #31
 80071dc:	4770      	bx	lr

080071de <matherr>:
 80071de:	2000      	movs	r0, #0
 80071e0:	4770      	bx	lr
 80071e2:	0000      	movs	r0, r0
 80071e4:	0000      	movs	r0, r0
	...

080071e8 <nan>:
 80071e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80071f0 <nan+0x8>
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	00000000 	.word	0x00000000
 80071f4:	7ff80000 	.word	0x7ff80000

080071f8 <rint>:
 80071f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071fa:	ec51 0b10 	vmov	r0, r1, d0
 80071fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007202:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007206:	2e13      	cmp	r6, #19
 8007208:	460b      	mov	r3, r1
 800720a:	ee10 4a10 	vmov	r4, s0
 800720e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007212:	dc56      	bgt.n	80072c2 <rint+0xca>
 8007214:	2e00      	cmp	r6, #0
 8007216:	da2b      	bge.n	8007270 <rint+0x78>
 8007218:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800721c:	4302      	orrs	r2, r0
 800721e:	d023      	beq.n	8007268 <rint+0x70>
 8007220:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007224:	4302      	orrs	r2, r0
 8007226:	4254      	negs	r4, r2
 8007228:	4314      	orrs	r4, r2
 800722a:	0c4b      	lsrs	r3, r1, #17
 800722c:	0b24      	lsrs	r4, r4, #12
 800722e:	045b      	lsls	r3, r3, #17
 8007230:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007234:	ea44 0103 	orr.w	r1, r4, r3
 8007238:	460b      	mov	r3, r1
 800723a:	492f      	ldr	r1, [pc, #188]	; (80072f8 <rint+0x100>)
 800723c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007240:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007244:	4602      	mov	r2, r0
 8007246:	4639      	mov	r1, r7
 8007248:	4630      	mov	r0, r6
 800724a:	f7f9 f827 	bl	800029c <__adddf3>
 800724e:	e9cd 0100 	strd	r0, r1, [sp]
 8007252:	463b      	mov	r3, r7
 8007254:	4632      	mov	r2, r6
 8007256:	e9dd 0100 	ldrd	r0, r1, [sp]
 800725a:	f7f9 f81d 	bl	8000298 <__aeabi_dsub>
 800725e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007262:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007266:	4639      	mov	r1, r7
 8007268:	ec41 0b10 	vmov	d0, r0, r1
 800726c:	b003      	add	sp, #12
 800726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007270:	4a22      	ldr	r2, [pc, #136]	; (80072fc <rint+0x104>)
 8007272:	4132      	asrs	r2, r6
 8007274:	ea01 0702 	and.w	r7, r1, r2
 8007278:	4307      	orrs	r7, r0
 800727a:	d0f5      	beq.n	8007268 <rint+0x70>
 800727c:	0852      	lsrs	r2, r2, #1
 800727e:	4011      	ands	r1, r2
 8007280:	430c      	orrs	r4, r1
 8007282:	d00b      	beq.n	800729c <rint+0xa4>
 8007284:	ea23 0202 	bic.w	r2, r3, r2
 8007288:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800728c:	2e13      	cmp	r6, #19
 800728e:	fa43 f306 	asr.w	r3, r3, r6
 8007292:	bf0c      	ite	eq
 8007294:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007298:	2400      	movne	r4, #0
 800729a:	4313      	orrs	r3, r2
 800729c:	4916      	ldr	r1, [pc, #88]	; (80072f8 <rint+0x100>)
 800729e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80072a2:	4622      	mov	r2, r4
 80072a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072a8:	4620      	mov	r0, r4
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7f8 fff6 	bl	800029c <__adddf3>
 80072b0:	e9cd 0100 	strd	r0, r1, [sp]
 80072b4:	4622      	mov	r2, r4
 80072b6:	462b      	mov	r3, r5
 80072b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072bc:	f7f8 ffec 	bl	8000298 <__aeabi_dsub>
 80072c0:	e7d2      	b.n	8007268 <rint+0x70>
 80072c2:	2e33      	cmp	r6, #51	; 0x33
 80072c4:	dd07      	ble.n	80072d6 <rint+0xde>
 80072c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80072ca:	d1cd      	bne.n	8007268 <rint+0x70>
 80072cc:	ee10 2a10 	vmov	r2, s0
 80072d0:	f7f8 ffe4 	bl	800029c <__adddf3>
 80072d4:	e7c8      	b.n	8007268 <rint+0x70>
 80072d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80072da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072de:	40f2      	lsrs	r2, r6
 80072e0:	4210      	tst	r0, r2
 80072e2:	d0c1      	beq.n	8007268 <rint+0x70>
 80072e4:	0852      	lsrs	r2, r2, #1
 80072e6:	4210      	tst	r0, r2
 80072e8:	bf1f      	itttt	ne
 80072ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80072ee:	ea20 0202 	bicne.w	r2, r0, r2
 80072f2:	4134      	asrne	r4, r6
 80072f4:	4314      	orrne	r4, r2
 80072f6:	e7d1      	b.n	800729c <rint+0xa4>
 80072f8:	08007828 	.word	0x08007828
 80072fc:	000fffff 	.word	0x000fffff

08007300 <scalbn>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	ec55 4b10 	vmov	r4, r5, d0
 8007306:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800730a:	4606      	mov	r6, r0
 800730c:	462b      	mov	r3, r5
 800730e:	b9aa      	cbnz	r2, 800733c <scalbn+0x3c>
 8007310:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007314:	4323      	orrs	r3, r4
 8007316:	d03b      	beq.n	8007390 <scalbn+0x90>
 8007318:	4b31      	ldr	r3, [pc, #196]	; (80073e0 <scalbn+0xe0>)
 800731a:	4629      	mov	r1, r5
 800731c:	2200      	movs	r2, #0
 800731e:	ee10 0a10 	vmov	r0, s0
 8007322:	f7f9 f971 	bl	8000608 <__aeabi_dmul>
 8007326:	4b2f      	ldr	r3, [pc, #188]	; (80073e4 <scalbn+0xe4>)
 8007328:	429e      	cmp	r6, r3
 800732a:	4604      	mov	r4, r0
 800732c:	460d      	mov	r5, r1
 800732e:	da12      	bge.n	8007356 <scalbn+0x56>
 8007330:	a327      	add	r3, pc, #156	; (adr r3, 80073d0 <scalbn+0xd0>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f9 f967 	bl	8000608 <__aeabi_dmul>
 800733a:	e009      	b.n	8007350 <scalbn+0x50>
 800733c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007340:	428a      	cmp	r2, r1
 8007342:	d10c      	bne.n	800735e <scalbn+0x5e>
 8007344:	ee10 2a10 	vmov	r2, s0
 8007348:	4620      	mov	r0, r4
 800734a:	4629      	mov	r1, r5
 800734c:	f7f8 ffa6 	bl	800029c <__adddf3>
 8007350:	4604      	mov	r4, r0
 8007352:	460d      	mov	r5, r1
 8007354:	e01c      	b.n	8007390 <scalbn+0x90>
 8007356:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800735a:	460b      	mov	r3, r1
 800735c:	3a36      	subs	r2, #54	; 0x36
 800735e:	4432      	add	r2, r6
 8007360:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007364:	428a      	cmp	r2, r1
 8007366:	dd0b      	ble.n	8007380 <scalbn+0x80>
 8007368:	ec45 4b11 	vmov	d1, r4, r5
 800736c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80073d8 <scalbn+0xd8>
 8007370:	f000 f83c 	bl	80073ec <copysign>
 8007374:	a318      	add	r3, pc, #96	; (adr r3, 80073d8 <scalbn+0xd8>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	ec51 0b10 	vmov	r0, r1, d0
 800737e:	e7da      	b.n	8007336 <scalbn+0x36>
 8007380:	2a00      	cmp	r2, #0
 8007382:	dd08      	ble.n	8007396 <scalbn+0x96>
 8007384:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007388:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800738c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007390:	ec45 4b10 	vmov	d0, r4, r5
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800739a:	da0d      	bge.n	80073b8 <scalbn+0xb8>
 800739c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80073a0:	429e      	cmp	r6, r3
 80073a2:	ec45 4b11 	vmov	d1, r4, r5
 80073a6:	dce1      	bgt.n	800736c <scalbn+0x6c>
 80073a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80073d0 <scalbn+0xd0>
 80073ac:	f000 f81e 	bl	80073ec <copysign>
 80073b0:	a307      	add	r3, pc, #28	; (adr r3, 80073d0 <scalbn+0xd0>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	e7e0      	b.n	800737a <scalbn+0x7a>
 80073b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073bc:	3236      	adds	r2, #54	; 0x36
 80073be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80073c6:	4620      	mov	r0, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	2200      	movs	r2, #0
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <scalbn+0xe8>)
 80073ce:	e7b2      	b.n	8007336 <scalbn+0x36>
 80073d0:	c2f8f359 	.word	0xc2f8f359
 80073d4:	01a56e1f 	.word	0x01a56e1f
 80073d8:	8800759c 	.word	0x8800759c
 80073dc:	7e37e43c 	.word	0x7e37e43c
 80073e0:	43500000 	.word	0x43500000
 80073e4:	ffff3cb0 	.word	0xffff3cb0
 80073e8:	3c900000 	.word	0x3c900000

080073ec <copysign>:
 80073ec:	ec51 0b10 	vmov	r0, r1, d0
 80073f0:	ee11 0a90 	vmov	r0, s3
 80073f4:	ee10 2a10 	vmov	r2, s0
 80073f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007400:	ea41 0300 	orr.w	r3, r1, r0
 8007404:	ec43 2b10 	vmov	d0, r2, r3
 8007408:	4770      	bx	lr
	...

0800740c <_init>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr

08007418 <_fini>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr
